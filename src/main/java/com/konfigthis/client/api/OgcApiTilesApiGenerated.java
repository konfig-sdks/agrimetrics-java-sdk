/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OgcApiTilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OgcApiTilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OgcApiTilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getConformanceCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/conformance"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConformanceValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getConformance(Async)");
        }

        return getConformanceCall(datasetId, _callback);

    }


    private ApiResponse<String> getConformanceWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = getConformanceValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConformanceAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConformanceValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConformanceRequestBuilder {
        private final UUID datasetId;

        private GetConformanceRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for getConformance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConformanceCall(datasetId, _callback);
        }


        /**
         * Execute getConformance request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getConformanceWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConformance request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getConformanceWithHttpInfo(datasetId);
        }

        /**
         * Execute getConformance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getConformanceAsync(datasetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @return GetConformanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetConformanceRequestBuilder getConformance(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new GetConformanceRequestBuilder(datasetId);
    }
    private okhttp3.Call getQueryTilesCollectionCall(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "tileMatrixSetId" + "}", localVarApiClient.escapeString(tileMatrixSetId.toString()))
            .replace("{" + "tileMatrix" + "}", localVarApiClient.escapeString(tileMatrix.toString()))
            .replace("{" + "tileRow" + "}", localVarApiClient.escapeString(tileRow.toString()))
            .replace("{" + "tileCol" + "}", localVarApiClient.escapeString(tileCol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (f != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f", f));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryTilesCollectionValidateBeforeCall(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'tileMatrixSetId' is set
        if (tileMatrixSetId == null) {
            throw new ApiException("Missing the required parameter 'tileMatrixSetId' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'tileMatrix' is set
        if (tileMatrix == null) {
            throw new ApiException("Missing the required parameter 'tileMatrix' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'tileRow' is set
        if (tileRow == null) {
            throw new ApiException("Missing the required parameter 'tileRow' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'tileCol' is set
        if (tileCol == null) {
            throw new ApiException("Missing the required parameter 'tileCol' when calling getQueryTilesCollection(Async)");
        }

        // verify the required parameter 'f' is set
        if (f == null) {
            throw new ApiException("Missing the required parameter 'f' when calling getQueryTilesCollection(Async)");
        }

        return getQueryTilesCollectionCall(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f, _callback);

    }


    private ApiResponse<String> getQueryTilesCollectionWithHttpInfo(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f) throws ApiException {
        okhttp3.Call localVarCall = getQueryTilesCollectionValidateBeforeCall(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQueryTilesCollectionAsync(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryTilesCollectionValidateBeforeCall(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQueryTilesCollectionRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;
        private final String tileMatrixSetId;
        private final String tileMatrix;
        private final Integer tileRow;
        private final Integer tileCol;
        private final String f;

        private GetQueryTilesCollectionRequestBuilder(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
            this.tileMatrixSetId = tileMatrixSetId;
            this.tileMatrix = tileMatrix;
            this.tileRow = tileRow;
            this.tileCol = tileCol;
            this.f = f;
        }

        /**
         * Build call for getQueryTilesCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getQueryTilesCollectionCall(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f, _callback);
        }


        /**
         * Execute getQueryTilesCollection request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getQueryTilesCollectionWithHttpInfo(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQueryTilesCollection request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getQueryTilesCollectionWithHttpInfo(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f);
        }

        /**
         * Execute getQueryTilesCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getQueryTilesCollectionAsync(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @param tileMatrixSetId  (required)
     * @param tileMatrix  (required)
     * @param tileRow  (required)
     * @param tileCol  (required)
     * @param f  (required)
     * @return GetQueryTilesCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetQueryTilesCollectionRequestBuilder getQueryTilesCollection(UUID datasetId, String collectionId, String tileMatrixSetId, String tileMatrix, Integer tileRow, Integer tileCol, String f) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (tileMatrixSetId == null) throw new IllegalArgumentException("\"tileMatrixSetId\" is required but got null");
            

        if (tileMatrix == null) throw new IllegalArgumentException("\"tileMatrix\" is required but got null");
            

        if (tileRow == null) throw new IllegalArgumentException("\"tileRow\" is required but got null");
        if (tileCol == null) throw new IllegalArgumentException("\"tileCol\" is required but got null");
        if (f == null) throw new IllegalArgumentException("\"f\" is required but got null");
            

        return new GetQueryTilesCollectionRequestBuilder(datasetId, collectionId, tileMatrixSetId, tileMatrix, tileRow, tileCol, f);
    }
    private okhttp3.Call getTilesCollectionCall(UUID datasetId, String collectionId, String tileMatrixSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/tiles/{tileMatrixSetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "tileMatrixSetId" + "}", localVarApiClient.escapeString(tileMatrixSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTilesCollectionValidateBeforeCall(UUID datasetId, String collectionId, String tileMatrixSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getTilesCollection(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling getTilesCollection(Async)");
        }

        // verify the required parameter 'tileMatrixSetId' is set
        if (tileMatrixSetId == null) {
            throw new ApiException("Missing the required parameter 'tileMatrixSetId' when calling getTilesCollection(Async)");
        }

        return getTilesCollectionCall(datasetId, collectionId, tileMatrixSetId, _callback);

    }


    private ApiResponse<String> getTilesCollectionWithHttpInfo(UUID datasetId, String collectionId, String tileMatrixSetId) throws ApiException {
        okhttp3.Call localVarCall = getTilesCollectionValidateBeforeCall(datasetId, collectionId, tileMatrixSetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTilesCollectionAsync(UUID datasetId, String collectionId, String tileMatrixSetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTilesCollectionValidateBeforeCall(datasetId, collectionId, tileMatrixSetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTilesCollectionRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;
        private final String tileMatrixSetId;

        private GetTilesCollectionRequestBuilder(UUID datasetId, String collectionId, String tileMatrixSetId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
            this.tileMatrixSetId = tileMatrixSetId;
        }

        /**
         * Build call for getTilesCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTilesCollectionCall(datasetId, collectionId, tileMatrixSetId, _callback);
        }


        /**
         * Execute getTilesCollection request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getTilesCollectionWithHttpInfo(datasetId, collectionId, tileMatrixSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTilesCollection request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getTilesCollectionWithHttpInfo(datasetId, collectionId, tileMatrixSetId);
        }

        /**
         * Execute getTilesCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getTilesCollectionAsync(datasetId, collectionId, tileMatrixSetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @param tileMatrixSetId  (required)
     * @return GetTilesCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetTilesCollectionRequestBuilder getTilesCollection(UUID datasetId, String collectionId, String tileMatrixSetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (tileMatrixSetId == null) throw new IllegalArgumentException("\"tileMatrixSetId\" is required but got null");
            

        return new GetTilesCollectionRequestBuilder(datasetId, collectionId, tileMatrixSetId);
    }
    private okhttp3.Call queryCollectionByIdCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCollectionByIdValidateBeforeCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryCollectionById(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling queryCollectionById(Async)");
        }

        return queryCollectionByIdCall(datasetId, collectionId, _callback);

    }


    private ApiResponse<String> queryCollectionByIdWithHttpInfo(UUID datasetId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = queryCollectionByIdValidateBeforeCall(datasetId, collectionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryCollectionByIdAsync(UUID datasetId, String collectionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCollectionByIdValidateBeforeCall(datasetId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryCollectionByIdRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;

        private QueryCollectionByIdRequestBuilder(UUID datasetId, String collectionId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for queryCollectionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryCollectionByIdCall(datasetId, collectionId, _callback);
        }


        /**
         * Execute queryCollectionById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryCollectionByIdWithHttpInfo(datasetId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryCollectionById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryCollectionByIdWithHttpInfo(datasetId, collectionId);
        }

        /**
         * Execute queryCollectionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryCollectionByIdAsync(datasetId, collectionId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @return QueryCollectionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryCollectionByIdRequestBuilder queryCollectionById(UUID datasetId, String collectionId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new QueryCollectionByIdRequestBuilder(datasetId, collectionId);
    }
    private okhttp3.Call queryCollectionQueryablesCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/queryables"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCollectionQueryablesValidateBeforeCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryCollectionQueryables(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling queryCollectionQueryables(Async)");
        }

        return queryCollectionQueryablesCall(datasetId, collectionId, _callback);

    }


    private ApiResponse<String> queryCollectionQueryablesWithHttpInfo(UUID datasetId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = queryCollectionQueryablesValidateBeforeCall(datasetId, collectionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryCollectionQueryablesAsync(UUID datasetId, String collectionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCollectionQueryablesValidateBeforeCall(datasetId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryCollectionQueryablesRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;

        private QueryCollectionQueryablesRequestBuilder(UUID datasetId, String collectionId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for queryCollectionQueryables
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryCollectionQueryablesCall(datasetId, collectionId, _callback);
        }


        /**
         * Execute queryCollectionQueryables request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryCollectionQueryablesWithHttpInfo(datasetId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryCollectionQueryables request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryCollectionQueryablesWithHttpInfo(datasetId, collectionId);
        }

        /**
         * Execute queryCollectionQueryables request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryCollectionQueryablesAsync(datasetId, collectionId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @return QueryCollectionQueryablesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryCollectionQueryablesRequestBuilder queryCollectionQueryables(UUID datasetId, String collectionId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new QueryCollectionQueryablesRequestBuilder(datasetId, collectionId);
    }
    private okhttp3.Call queryCollectionsCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/collections"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCollectionsValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryCollections(Async)");
        }

        return queryCollectionsCall(datasetId, _callback);

    }


    private ApiResponse<String> queryCollectionsWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryCollectionsValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryCollectionsAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryCollectionsValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryCollectionsRequestBuilder {
        private final UUID datasetId;

        private QueryCollectionsRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryCollections
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryCollectionsCall(datasetId, _callback);
        }


        /**
         * Execute queryCollections request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryCollectionsWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryCollections request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryCollectionsWithHttpInfo(datasetId);
        }

        /**
         * Execute queryCollections request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryCollectionsAsync(datasetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @return QueryCollectionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryCollectionsRequestBuilder queryCollections(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryCollectionsRequestBuilder(datasetId);
    }
    private okhttp3.Call queryTileMatrixSetsCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTileMatrixSetsValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryTileMatrixSets(Async)");
        }

        return queryTileMatrixSetsCall(datasetId, _callback);

    }


    private ApiResponse<String> queryTileMatrixSetsWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryTileMatrixSetsValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTileMatrixSetsAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTileMatrixSetsValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryTileMatrixSetsRequestBuilder {
        private final UUID datasetId;

        private QueryTileMatrixSetsRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryTileMatrixSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTileMatrixSetsCall(datasetId, _callback);
        }


        /**
         * Execute queryTileMatrixSets request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryTileMatrixSetsWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryTileMatrixSets request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryTileMatrixSetsWithHttpInfo(datasetId);
        }

        /**
         * Execute queryTileMatrixSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryTileMatrixSetsAsync(datasetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @return QueryTileMatrixSetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTileMatrixSetsRequestBuilder queryTileMatrixSets(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryTileMatrixSetsRequestBuilder(datasetId);
    }
    private okhttp3.Call queryTileMatrixSets_0Call(UUID datasetId, String tileMatrixSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets/{tileMatrixSetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "tileMatrixSetId" + "}", localVarApiClient.escapeString(tileMatrixSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTileMatrixSets_0ValidateBeforeCall(UUID datasetId, String tileMatrixSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryTileMatrixSets_0(Async)");
        }

        // verify the required parameter 'tileMatrixSetId' is set
        if (tileMatrixSetId == null) {
            throw new ApiException("Missing the required parameter 'tileMatrixSetId' when calling queryTileMatrixSets_0(Async)");
        }

        return queryTileMatrixSets_0Call(datasetId, tileMatrixSetId, _callback);

    }


    private ApiResponse<String> queryTileMatrixSets_0WithHttpInfo(UUID datasetId, String tileMatrixSetId) throws ApiException {
        okhttp3.Call localVarCall = queryTileMatrixSets_0ValidateBeforeCall(datasetId, tileMatrixSetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTileMatrixSets_0Async(UUID datasetId, String tileMatrixSetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTileMatrixSets_0ValidateBeforeCall(datasetId, tileMatrixSetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryTileMatrixSets0RequestBuilder {
        private final UUID datasetId;
        private final String tileMatrixSetId;

        private QueryTileMatrixSets0RequestBuilder(UUID datasetId, String tileMatrixSetId) {
            this.datasetId = datasetId;
            this.tileMatrixSetId = tileMatrixSetId;
        }

        /**
         * Build call for queryTileMatrixSets_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTileMatrixSets_0Call(datasetId, tileMatrixSetId, _callback);
        }


        /**
         * Execute queryTileMatrixSets_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryTileMatrixSets_0WithHttpInfo(datasetId, tileMatrixSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryTileMatrixSets_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryTileMatrixSets_0WithHttpInfo(datasetId, tileMatrixSetId);
        }

        /**
         * Execute queryTileMatrixSets_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryTileMatrixSets_0Async(datasetId, tileMatrixSetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @param tileMatrixSetId  (required)
     * @return QueryTileMatrixSets0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTileMatrixSets0RequestBuilder queryTileMatrixSets_0(UUID datasetId, String tileMatrixSetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (tileMatrixSetId == null) throw new IllegalArgumentException("\"tileMatrixSetId\" is required but got null");
            

        return new QueryTileMatrixSets0RequestBuilder(datasetId, tileMatrixSetId);
    }
    private okhttp3.Call queryTilesV1Call(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/tiles/v1"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTilesV1ValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryTilesV1(Async)");
        }

        return queryTilesV1Call(datasetId, _callback);

    }


    private ApiResponse<String> queryTilesV1WithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryTilesV1ValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTilesV1Async(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTilesV1ValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryTilesV1RequestBuilder {
        private final UUID datasetId;

        private QueryTilesV1RequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryTilesV1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTilesV1Call(datasetId, _callback);
        }


        /**
         * Execute queryTilesV1 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryTilesV1WithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryTilesV1 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryTilesV1WithHttpInfo(datasetId);
        }

        /**
         * Execute queryTilesV1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryTilesV1Async(datasetId, _callback);
        }
    }

    /**
     * OGC API Tiles query
     * Query the given data set with OGC API Tiles standard 
     * @param datasetId  (required)
     * @return QueryTilesV1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTilesV1RequestBuilder queryTilesV1(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryTilesV1RequestBuilder(datasetId);
    }
}
