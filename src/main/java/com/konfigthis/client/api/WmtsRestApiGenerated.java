/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WmtsRestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WmtsRestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WmtsRestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call queryTileMatrixSetCall(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "layerName" + "}", localVarApiClient.escapeString(layerName.toString()))
            .replace("{" + "style" + "}", localVarApiClient.escapeString(style.toString()))
            .replace("{" + "TileMatrixSet" + "}", localVarApiClient.escapeString(tileMatrixSet.toString()))
            .replace("{" + "TileMatrix" + "}", localVarApiClient.escapeString(tileMatrix.toString()))
            .replace("{" + "TileRow" + "}", localVarApiClient.escapeString(tileRow.toString()))
            .replace("{" + "TileCol" + "}", localVarApiClient.escapeString(tileCol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTileMatrixSetValidateBeforeCall(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'layerName' is set
        if (layerName == null) {
            throw new ApiException("Missing the required parameter 'layerName' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'tileMatrixSet' is set
        if (tileMatrixSet == null) {
            throw new ApiException("Missing the required parameter 'tileMatrixSet' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'tileMatrix' is set
        if (tileMatrix == null) {
            throw new ApiException("Missing the required parameter 'tileMatrix' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'tileRow' is set
        if (tileRow == null) {
            throw new ApiException("Missing the required parameter 'tileRow' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'tileCol' is set
        if (tileCol == null) {
            throw new ApiException("Missing the required parameter 'tileCol' when calling queryTileMatrixSet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling queryTileMatrixSet(Async)");
        }

        return queryTileMatrixSetCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format, _callback);

    }


    private ApiResponse<String> queryTileMatrixSetWithHttpInfo(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format) throws ApiException {
        okhttp3.Call localVarCall = queryTileMatrixSetValidateBeforeCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTileMatrixSetAsync(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTileMatrixSetValidateBeforeCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryTileMatrixSetRequestBuilder {
        private final UUID datasetId;
        private final String layerName;
        private final String style;
        private final String tileMatrixSet;
        private final String tileMatrix;
        private final Integer tileRow;
        private final Integer tileCol;
        private final String format;

        private QueryTileMatrixSetRequestBuilder(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format) {
            this.datasetId = datasetId;
            this.layerName = layerName;
            this.style = style;
            this.tileMatrixSet = tileMatrixSet;
            this.tileMatrix = tileMatrix;
            this.tileRow = tileRow;
            this.tileCol = tileCol;
            this.format = format;
        }

        /**
         * Build call for queryTileMatrixSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTileMatrixSetCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format, _callback);
        }


        /**
         * Execute queryTileMatrixSet request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryTileMatrixSetWithHttpInfo(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryTileMatrixSet request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryTileMatrixSetWithHttpInfo(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format);
        }

        /**
         * Execute queryTileMatrixSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryTileMatrixSetAsync(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format, _callback);
        }
    }

    /**
     * WMTS Service query
     * Query the given data set with theWMTS standard 
     * @param datasetId  (required)
     * @param layerName  (required)
     * @param style  (required)
     * @param tileMatrixSet  (required)
     * @param tileMatrix  (required)
     * @param tileRow  (required)
     * @param tileCol  (required)
     * @param format  (required)
     * @return QueryTileMatrixSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTileMatrixSetRequestBuilder queryTileMatrixSet(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, String format) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (layerName == null) throw new IllegalArgumentException("\"layerName\" is required but got null");
            

        if (style == null) throw new IllegalArgumentException("\"style\" is required but got null");
            

        if (tileMatrixSet == null) throw new IllegalArgumentException("\"tileMatrixSet\" is required but got null");
            

        if (tileMatrix == null) throw new IllegalArgumentException("\"tileMatrix\" is required but got null");
            

        if (tileRow == null) throw new IllegalArgumentException("\"tileRow\" is required but got null");
        if (tileCol == null) throw new IllegalArgumentException("\"tileCol\" is required but got null");
        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new QueryTileMatrixSetRequestBuilder(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, format);
    }
    private okhttp3.Call queryTilejsonImageFormatCall(UUID datasetId, String layerName, String style, String imageFormat, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/wmts/rest/{layerName}/{style}/tilejson/{imageFormat}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "layerName" + "}", localVarApiClient.escapeString(layerName.toString()))
            .replace("{" + "style" + "}", localVarApiClient.escapeString(style.toString()))
            .replace("{" + "imageFormat" + "}", localVarApiClient.escapeString(imageFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryTilejsonImageFormatValidateBeforeCall(UUID datasetId, String layerName, String style, String imageFormat, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryTilejsonImageFormat(Async)");
        }

        // verify the required parameter 'layerName' is set
        if (layerName == null) {
            throw new ApiException("Missing the required parameter 'layerName' when calling queryTilejsonImageFormat(Async)");
        }

        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling queryTilejsonImageFormat(Async)");
        }

        // verify the required parameter 'imageFormat' is set
        if (imageFormat == null) {
            throw new ApiException("Missing the required parameter 'imageFormat' when calling queryTilejsonImageFormat(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling queryTilejsonImageFormat(Async)");
        }

        return queryTilejsonImageFormatCall(datasetId, layerName, style, imageFormat, format, _callback);

    }


    private ApiResponse<String> queryTilejsonImageFormatWithHttpInfo(UUID datasetId, String layerName, String style, String imageFormat, String format) throws ApiException {
        okhttp3.Call localVarCall = queryTilejsonImageFormatValidateBeforeCall(datasetId, layerName, style, imageFormat, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryTilejsonImageFormatAsync(UUID datasetId, String layerName, String style, String imageFormat, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryTilejsonImageFormatValidateBeforeCall(datasetId, layerName, style, imageFormat, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryTilejsonImageFormatRequestBuilder {
        private final UUID datasetId;
        private final String layerName;
        private final String style;
        private final String imageFormat;
        private final String format;

        private QueryTilejsonImageFormatRequestBuilder(UUID datasetId, String layerName, String style, String imageFormat, String format) {
            this.datasetId = datasetId;
            this.layerName = layerName;
            this.style = style;
            this.imageFormat = imageFormat;
            this.format = format;
        }

        /**
         * Build call for queryTilejsonImageFormat
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryTilejsonImageFormatCall(datasetId, layerName, style, imageFormat, format, _callback);
        }


        /**
         * Execute queryTilejsonImageFormat request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryTilejsonImageFormatWithHttpInfo(datasetId, layerName, style, imageFormat, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryTilejsonImageFormat request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryTilejsonImageFormatWithHttpInfo(datasetId, layerName, style, imageFormat, format);
        }

        /**
         * Execute queryTilejsonImageFormat request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryTilejsonImageFormatAsync(datasetId, layerName, style, imageFormat, format, _callback);
        }
    }

    /**
     * WMTS Service query
     * Query the given data set with theWMTS standard 
     * @param datasetId  (required)
     * @param layerName  (required)
     * @param style  (required)
     * @param imageFormat  (required)
     * @param format  (required)
     * @return QueryTilejsonImageFormatRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryTilejsonImageFormatRequestBuilder queryTilejsonImageFormat(UUID datasetId, String layerName, String style, String imageFormat, String format) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (layerName == null) throw new IllegalArgumentException("\"layerName\" is required but got null");
            

        if (style == null) throw new IllegalArgumentException("\"style\" is required but got null");
            

        if (imageFormat == null) throw new IllegalArgumentException("\"imageFormat\" is required but got null");
            

        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new QueryTilejsonImageFormatRequestBuilder(datasetId, layerName, style, imageFormat, format);
    }
    private okhttp3.Call serviceQueryCall(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}/{J}/{I}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "layerName" + "}", localVarApiClient.escapeString(layerName.toString()))
            .replace("{" + "style" + "}", localVarApiClient.escapeString(style.toString()))
            .replace("{" + "TileMatrixSet" + "}", localVarApiClient.escapeString(tileMatrixSet.toString()))
            .replace("{" + "TileMatrix" + "}", localVarApiClient.escapeString(tileMatrix.toString()))
            .replace("{" + "TileRow" + "}", localVarApiClient.escapeString(tileRow.toString()))
            .replace("{" + "TileCol" + "}", localVarApiClient.escapeString(tileCol.toString()))
            .replace("{" + "J" + "}", localVarApiClient.escapeString(J.toString()))
            .replace("{" + "I" + "}", localVarApiClient.escapeString(I.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceQueryValidateBeforeCall(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'layerName' is set
        if (layerName == null) {
            throw new ApiException("Missing the required parameter 'layerName' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'tileMatrixSet' is set
        if (tileMatrixSet == null) {
            throw new ApiException("Missing the required parameter 'tileMatrixSet' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'tileMatrix' is set
        if (tileMatrix == null) {
            throw new ApiException("Missing the required parameter 'tileMatrix' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'tileRow' is set
        if (tileRow == null) {
            throw new ApiException("Missing the required parameter 'tileRow' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'tileCol' is set
        if (tileCol == null) {
            throw new ApiException("Missing the required parameter 'tileCol' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'J' is set
        if (J == null) {
            throw new ApiException("Missing the required parameter 'J' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'I' is set
        if (I == null) {
            throw new ApiException("Missing the required parameter 'I' when calling serviceQuery(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling serviceQuery(Async)");
        }

        return serviceQueryCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format, _callback);

    }


    private ApiResponse<String> serviceQueryWithHttpInfo(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format) throws ApiException {
        okhttp3.Call localVarCall = serviceQueryValidateBeforeCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call serviceQueryAsync(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceQueryValidateBeforeCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ServiceQueryRequestBuilder {
        private final UUID datasetId;
        private final String layerName;
        private final String style;
        private final String tileMatrixSet;
        private final String tileMatrix;
        private final Integer tileRow;
        private final Integer tileCol;
        private final Integer J;
        private final Integer I;
        private final String format;

        private ServiceQueryRequestBuilder(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format) {
            this.datasetId = datasetId;
            this.layerName = layerName;
            this.style = style;
            this.tileMatrixSet = tileMatrixSet;
            this.tileMatrix = tileMatrix;
            this.tileRow = tileRow;
            this.tileCol = tileCol;
            this.J = J;
            this.I = I;
            this.format = format;
        }

        /**
         * Build call for serviceQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return serviceQueryCall(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format, _callback);
        }


        /**
         * Execute serviceQuery request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = serviceQueryWithHttpInfo(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute serviceQuery request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return serviceQueryWithHttpInfo(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format);
        }

        /**
         * Execute serviceQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return serviceQueryAsync(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format, _callback);
        }
    }

    /**
     * WMTS Service query
     * Query the given data set with theWMTS standard 
     * @param datasetId  (required)
     * @param layerName  (required)
     * @param style  (required)
     * @param tileMatrixSet  (required)
     * @param tileMatrix  (required)
     * @param tileRow  (required)
     * @param tileCol  (required)
     * @param J  (required)
     * @param I  (required)
     * @param format  (required)
     * @return ServiceQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServiceQueryRequestBuilder serviceQuery(UUID datasetId, String layerName, String style, String tileMatrixSet, String tileMatrix, Integer tileRow, Integer tileCol, Integer J, Integer I, String format) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (layerName == null) throw new IllegalArgumentException("\"layerName\" is required but got null");
            

        if (style == null) throw new IllegalArgumentException("\"style\" is required but got null");
            

        if (tileMatrixSet == null) throw new IllegalArgumentException("\"tileMatrixSet\" is required but got null");
            

        if (tileMatrix == null) throw new IllegalArgumentException("\"tileMatrix\" is required but got null");
            

        if (tileRow == null) throw new IllegalArgumentException("\"tileRow\" is required but got null");
        if (tileCol == null) throw new IllegalArgumentException("\"tileCol\" is required but got null");
        if (J == null) throw new IllegalArgumentException("\"J\" is required but got null");
        if (I == null) throw new IllegalArgumentException("\"I\" is required but got null");
        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new ServiceQueryRequestBuilder(datasetId, layerName, style, tileMatrixSet, tileMatrix, tileRow, tileCol, J, I, format);
    }
}
