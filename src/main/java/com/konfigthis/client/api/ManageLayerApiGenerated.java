/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.ManageLayerAddGeoTiffRequest;
import com.konfigthis.client.model.ManageLayerAddGeoTiffResponse;
import com.konfigthis.client.model.ManageLayerIngestFileRequest;
import com.konfigthis.client.model.ManageLayerSetStyleRequest;
import com.konfigthis.client.model.RestError;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ManageLayerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManageLayerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ManageLayerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGeoTiffCall(UUID layerId, ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest, String datetime, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageLayerAddGeoTiffRequest;

        // create path and map variables
        String localVarPath = "/layers/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (datetime != null) {
            localVarFormParams.put("datetime", datetime);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGeoTiffValidateBeforeCall(UUID layerId, ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest, String datetime, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling addGeoTiff(Async)");
        }

        // verify the required parameter 'manageLayerAddGeoTiffRequest' is set
        if (manageLayerAddGeoTiffRequest == null) {
            throw new ApiException("Missing the required parameter 'manageLayerAddGeoTiffRequest' when calling addGeoTiff(Async)");
        }

        return addGeoTiffCall(layerId, manageLayerAddGeoTiffRequest, datetime, _file, _callback);

    }


    private ApiResponse<ManageLayerAddGeoTiffResponse> addGeoTiffWithHttpInfo(UUID layerId, ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest, String datetime, File _file) throws ApiException {
        okhttp3.Call localVarCall = addGeoTiffValidateBeforeCall(layerId, manageLayerAddGeoTiffRequest, datetime, _file, null);
        Type localVarReturnType = new TypeToken<ManageLayerAddGeoTiffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGeoTiffAsync(UUID layerId, ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest, String datetime, File _file, final ApiCallback<ManageLayerAddGeoTiffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGeoTiffValidateBeforeCall(layerId, manageLayerAddGeoTiffRequest, datetime, _file, _callback);
        Type localVarReturnType = new TypeToken<ManageLayerAddGeoTiffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGeoTiffRequestBuilder {
        private final UUID layerId;
        private String datetime;
        private File _file;

        private AddGeoTiffRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set datetime
         * @param datetime  (optional)
         * @return AddGeoTiffRequestBuilder
         */
        public AddGeoTiffRequestBuilder datetime(String datetime) {
            this.datetime = datetime;
            return this;
        }
        
        /**
         * Set _file
         * @param _file The file to upload. (optional)
         * @return AddGeoTiffRequestBuilder
         */
        public AddGeoTiffRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for addGeoTiff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile created on the specified layer. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest = buildBodyParams();
            return addGeoTiffCall(layerId, manageLayerAddGeoTiffRequest, datetime, _file, _callback);
        }

        private ManageLayerAddGeoTiffRequest buildBodyParams() {
            ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest = new ManageLayerAddGeoTiffRequest();
            manageLayerAddGeoTiffRequest.datetime(this.datetime);
            manageLayerAddGeoTiffRequest._file(this._file);
            return manageLayerAddGeoTiffRequest;
        }

        /**
         * Execute addGeoTiff request
         * @return ManageLayerAddGeoTiffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile created on the specified layer. </td><td>  -  </td></tr>
         </table>
         */
        public ManageLayerAddGeoTiffResponse execute() throws ApiException {
            ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest = buildBodyParams();
            ApiResponse<ManageLayerAddGeoTiffResponse> localVarResp = addGeoTiffWithHttpInfo(layerId, manageLayerAddGeoTiffRequest, datetime, _file);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGeoTiff request with HTTP info returned
         * @return ApiResponse&lt;ManageLayerAddGeoTiffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile created on the specified layer. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ManageLayerAddGeoTiffResponse> executeWithHttpInfo() throws ApiException {
            ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest = buildBodyParams();
            return addGeoTiffWithHttpInfo(layerId, manageLayerAddGeoTiffRequest, datetime, _file);
        }

        /**
         * Execute addGeoTiff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile created on the specified layer. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ManageLayerAddGeoTiffResponse> _callback) throws ApiException {
            ManageLayerAddGeoTiffRequest manageLayerAddGeoTiffRequest = buildBodyParams();
            return addGeoTiffAsync(layerId, manageLayerAddGeoTiffRequest, datetime, _file, _callback);
        }
    }

    /**
     * Add a GeoTIFF to a layer
     * &gt; :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
     * @param layerId  (required)
     * @param manageLayerAddGeoTiffRequest  (required)
     * @return AddGeoTiffRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Tile created on the specified layer. </td><td>  -  </td></tr>
     </table>
     */
    public AddGeoTiffRequestBuilder addGeoTiff(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new AddGeoTiffRequestBuilder(layerId);
    }
    private okhttp3.Call autoGenerateStyleCall(UUID layerId, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/style"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoGenerateStyleValidateBeforeCall(UUID layerId, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling autoGenerateStyle(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling autoGenerateStyle(Async)");
        }

        return autoGenerateStyleCall(layerId, key, _callback);

    }


    private ApiResponse<RestError> autoGenerateStyleWithHttpInfo(UUID layerId, String key) throws ApiException {
        okhttp3.Call localVarCall = autoGenerateStyleValidateBeforeCall(layerId, key, null);
        Type localVarReturnType = new TypeToken<RestError>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call autoGenerateStyleAsync(UUID layerId, String key, final ApiCallback<RestError> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoGenerateStyleValidateBeforeCall(layerId, key, _callback);
        Type localVarReturnType = new TypeToken<RestError>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AutoGenerateStyleRequestBuilder {
        private final UUID layerId;
        private final String key;

        private AutoGenerateStyleRequestBuilder(UUID layerId, String key) {
            this.layerId = layerId;
            this.key = key;
        }

        /**
         * Build call for autoGenerateStyle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return autoGenerateStyleCall(layerId, key, _callback);
        }


        /**
         * Execute autoGenerateStyle request
         * @return RestError
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public RestError execute() throws ApiException {
            ApiResponse<RestError> localVarResp = autoGenerateStyleWithHttpInfo(layerId, key);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute autoGenerateStyle request with HTTP info returned
         * @return ApiResponse&lt;RestError&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RestError> executeWithHttpInfo() throws ApiException {
            return autoGenerateStyleWithHttpInfo(layerId, key);
        }

        /**
         * Execute autoGenerateStyle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RestError> _callback) throws ApiException {
            return autoGenerateStyleAsync(layerId, key, _callback);
        }
    }

    /**
     * Auto-generate and set layer style
     * Generate a new style and apply it to the given layer. 
     * @param layerId  (required)
     * @param key  (required)
     * @return AutoGenerateStyleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
     </table>
     */
    public AutoGenerateStyleRequestBuilder autoGenerateStyle(UUID layerId, String key) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new AutoGenerateStyleRequestBuilder(layerId, key);
    }
    private okhttp3.Call deleteLayerCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLayerValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling deleteLayer(Async)");
        }

        return deleteLayerCall(layerId, _callback);

    }


    private ApiResponse<Void> deleteLayerWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = deleteLayerValidateBeforeCall(layerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLayerAsync(UUID layerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLayerValidateBeforeCall(layerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLayerRequestBuilder {
        private final UUID layerId;

        private DeleteLayerRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for deleteLayer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLayerCall(layerId, _callback);
        }


        /**
         * Execute deleteLayer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLayerWithHttpInfo(layerId);
        }

        /**
         * Execute deleteLayer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLayerWithHttpInfo(layerId);
        }

        /**
         * Execute deleteLayer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLayerAsync(layerId, _callback);
        }
    }

    /**
     * Delete layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
     * @param layerId  (required)
     * @return DeleteLayerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLayerRequestBuilder deleteLayer(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new DeleteLayerRequestBuilder(layerId);
    }
    private okhttp3.Call getStyleCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/style"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.ogc.sld+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStyleValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling getStyle(Async)");
        }

        return getStyleCall(layerId, _callback);

    }


    private ApiResponse<Void> getStyleWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = getStyleValidateBeforeCall(layerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getStyleAsync(UUID layerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStyleValidateBeforeCall(layerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetStyleRequestBuilder {
        private final UUID layerId;

        private GetStyleRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for getStyle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Style applied to the layer </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Query was successful but no style found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStyleCall(layerId, _callback);
        }


        /**
         * Execute getStyle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Style applied to the layer </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Query was successful but no style found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getStyleWithHttpInfo(layerId);
        }

        /**
         * Execute getStyle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Style applied to the layer </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Query was successful but no style found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getStyleWithHttpInfo(layerId);
        }

        /**
         * Execute getStyle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Style applied to the layer </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Query was successful but no style found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getStyleAsync(layerId, _callback);
        }
    }

    /**
     * Get the style for a layer, if one has been set
     * Get the SLD style that has been applied to a layer. 
     * @param layerId  (required)
     * @return GetStyleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Style applied to the layer </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Query was successful but no style found. </td><td>  -  </td></tr>
     </table>
     */
    public GetStyleRequestBuilder getStyle(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new GetStyleRequestBuilder(layerId);
    }
    private okhttp3.Call ingestFileCall(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageLayerIngestFileRequest;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/ingest"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestFileValidateBeforeCall(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling ingestFile(Async)");
        }

        // verify the required parameter 'manageLayerIngestFileRequest' is set
        if (manageLayerIngestFileRequest == null) {
            throw new ApiException("Missing the required parameter 'manageLayerIngestFileRequest' when calling ingestFile(Async)");
        }

        return ingestFileCall(layerId, manageLayerIngestFileRequest, _callback);

    }


    private ApiResponse<Void> ingestFileWithHttpInfo(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest) throws ApiException {
        okhttp3.Call localVarCall = ingestFileValidateBeforeCall(layerId, manageLayerIngestFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call ingestFileAsync(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestFileValidateBeforeCall(layerId, manageLayerIngestFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class IngestFileRequestBuilder {
        private final String fileId;
        private final UUID layerId;
        private String fileName;
        private String datetime;

        private IngestFileRequestBuilder(String fileId, UUID layerId) {
            this.fileId = fileId;
            this.layerId = layerId;
        }

        /**
         * Set fileName
         * @param fileName  (optional)
         * @return IngestFileRequestBuilder
         */
        public IngestFileRequestBuilder fileName(String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        /**
         * Set datetime
         * @param datetime  (optional)
         * @return IngestFileRequestBuilder
         */
        public IngestFileRequestBuilder datetime(String datetime) {
            this.datetime = datetime;
            return this;
        }
        
        /**
         * Build call for ingestFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileCall(layerId, manageLayerIngestFileRequest, _callback);
        }

        private ManageLayerIngestFileRequest buildBodyParams() {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = new ManageLayerIngestFileRequest();
            manageLayerIngestFileRequest.fileId(this.fileId);
            manageLayerIngestFileRequest.fileName(this.fileName);
            manageLayerIngestFileRequest.datetime(this.datetime);
            return manageLayerIngestFileRequest;
        }

        /**
         * Execute ingestFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            ingestFileWithHttpInfo(layerId, manageLayerIngestFileRequest);
        }

        /**
         * Execute ingestFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileWithHttpInfo(layerId, manageLayerIngestFileRequest);
        }

        /**
         * Execute ingestFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileAsync(layerId, manageLayerIngestFileRequest, _callback);
        }
    }

    /**
     * Ingest a file to a layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
     * @param layerId  (required)
     * @param manageLayerIngestFileRequest  (required)
     * @return IngestFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
     </table>
     */
    public IngestFileRequestBuilder ingestFile(String fileId, UUID layerId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new IngestFileRequestBuilder(fileId, layerId);
    }
    private okhttp3.Call removeFileCall(UUID layerId, URI fileUri, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/files"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileUri", fileUri));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileValidateBeforeCall(UUID layerId, URI fileUri, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling removeFile(Async)");
        }

        return removeFileCall(layerId, fileUri, filename, _callback);

    }


    private ApiResponse<Void> removeFileWithHttpInfo(UUID layerId, URI fileUri, String filename) throws ApiException {
        okhttp3.Call localVarCall = removeFileValidateBeforeCall(layerId, fileUri, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileAsync(UUID layerId, URI fileUri, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileValidateBeforeCall(layerId, fileUri, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileRequestBuilder {
        private final UUID layerId;
        private URI fileUri;
        private String filename;

        private RemoveFileRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set fileUri
         * @param fileUri  (optional)
         * @return RemoveFileRequestBuilder
         */
        public RemoveFileRequestBuilder fileUri(URI fileUri) {
            this.fileUri = fileUri;
            return this;
        }
        
        /**
         * Set filename
         * @param filename  (optional)
         * @return RemoveFileRequestBuilder
         */
        public RemoveFileRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for removeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileCall(layerId, fileUri, filename, _callback);
        }


        /**
         * Execute removeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileWithHttpInfo(layerId, fileUri, filename);
        }

        /**
         * Execute removeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileWithHttpInfo(layerId, fileUri, filename);
        }

        /**
         * Execute removeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileAsync(layerId, fileUri, filename, _callback);
        }
    }

    /**
     * Delete a file from a layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
     * @param layerId  (required)
     * @return RemoveFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileRequestBuilder removeFile(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new RemoveFileRequestBuilder(layerId);
    }
    private okhttp3.Call removeStyleCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/style"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeStyleValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling removeStyle(Async)");
        }

        return removeStyleCall(layerId, _callback);

    }


    private ApiResponse<Void> removeStyleWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = removeStyleValidateBeforeCall(layerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeStyleAsync(UUID layerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeStyleValidateBeforeCall(layerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveStyleRequestBuilder {
        private final UUID layerId;

        private RemoveStyleRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for removeStyle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Style deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> You probably tried to delete the style from an unstyled layer. Please verify the layer ID.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeStyleCall(layerId, _callback);
        }


        /**
         * Execute removeStyle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Style deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> You probably tried to delete the style from an unstyled layer. Please verify the layer ID.  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeStyleWithHttpInfo(layerId);
        }

        /**
         * Execute removeStyle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Style deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> You probably tried to delete the style from an unstyled layer. Please verify the layer ID.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeStyleWithHttpInfo(layerId);
        }

        /**
         * Execute removeStyle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Style deleted </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> You probably tried to delete the style from an unstyled layer. Please verify the layer ID.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeStyleAsync(layerId, _callback);
        }
    }

    /**
     * Delete the style from a layer, if one has been set
     * Delete an SLD style that has been applied to a layer. 
     * @param layerId  (required)
     * @return RemoveStyleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Style deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You probably tried to delete the style from an unstyled layer. Please verify the layer ID.  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveStyleRequestBuilder removeStyle(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new RemoveStyleRequestBuilder(layerId);
    }
    private okhttp3.Call setStyleCall(UUID layerId, ManageLayerSetStyleRequest manageLayerSetStyleRequest, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageLayerSetStyleRequest;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/style"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStyleValidateBeforeCall(UUID layerId, ManageLayerSetStyleRequest manageLayerSetStyleRequest, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling setStyle(Async)");
        }

        // verify the required parameter 'manageLayerSetStyleRequest' is set
        if (manageLayerSetStyleRequest == null) {
            throw new ApiException("Missing the required parameter 'manageLayerSetStyleRequest' when calling setStyle(Async)");
        }

        return setStyleCall(layerId, manageLayerSetStyleRequest, _file, _callback);

    }


    private ApiResponse<Object> setStyleWithHttpInfo(UUID layerId, ManageLayerSetStyleRequest manageLayerSetStyleRequest, File _file) throws ApiException {
        okhttp3.Call localVarCall = setStyleValidateBeforeCall(layerId, manageLayerSetStyleRequest, _file, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setStyleAsync(UUID layerId, ManageLayerSetStyleRequest manageLayerSetStyleRequest, File _file, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStyleValidateBeforeCall(layerId, manageLayerSetStyleRequest, _file, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetStyleRequestBuilder {
        private final UUID layerId;
        private File _file;

        private SetStyleRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return SetStyleRequestBuilder
         */
        public SetStyleRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for setStyle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ManageLayerSetStyleRequest manageLayerSetStyleRequest = buildBodyParams();
            return setStyleCall(layerId, manageLayerSetStyleRequest, _file, _callback);
        }

        private ManageLayerSetStyleRequest buildBodyParams() {
            ManageLayerSetStyleRequest manageLayerSetStyleRequest = new ManageLayerSetStyleRequest();
            manageLayerSetStyleRequest._file(this._file);
            return manageLayerSetStyleRequest;
        }

        /**
         * Execute setStyle request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ManageLayerSetStyleRequest manageLayerSetStyleRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = setStyleWithHttpInfo(layerId, manageLayerSetStyleRequest, _file);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setStyle request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ManageLayerSetStyleRequest manageLayerSetStyleRequest = buildBodyParams();
            return setStyleWithHttpInfo(layerId, manageLayerSetStyleRequest, _file);
        }

        /**
         * Execute setStyle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ManageLayerSetStyleRequest manageLayerSetStyleRequest = buildBodyParams();
            return setStyleAsync(layerId, manageLayerSetStyleRequest, _file, _callback);
        }
    }

    /**
     * Set layer style
     * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
     * @param layerId  (required)
     * @param manageLayerSetStyleRequest  (required)
     * @return SetStyleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Layer style has been updated. </td><td>  -  </td></tr>
     </table>
     */
    public SetStyleRequestBuilder setStyle(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new SetStyleRequestBuilder(layerId);
    }
}
