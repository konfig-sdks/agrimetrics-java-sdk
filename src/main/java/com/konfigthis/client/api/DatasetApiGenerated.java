/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccrualPeriodicity;
import com.konfigthis.client.model.BasicDataSetInfo;
import com.konfigthis.client.model.BatchIdentityInputEntitlementsInner;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.CategoryValue;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.DataFormat;
import com.konfigthis.client.model.DataSet;
import com.konfigthis.client.model.DataSetDataSet;
import com.konfigthis.client.model.DataSetDistributionsInner;
import com.konfigthis.client.model.DataSetPatch;
import com.konfigthis.client.model.DataSetPatchGeospatialExtent;
import com.konfigthis.client.model.DataSetPatchLicence;
import com.konfigthis.client.model.DataSetPatchMetadataContact;
import com.konfigthis.client.model.DataSetPatchTemporalExtent;
import com.konfigthis.client.model.DataSetSampleData;
import com.konfigthis.client.model.DataSetServicesInner;
import com.konfigthis.client.model.DataSets;
import com.konfigthis.client.model.DatasetCreateFileDatasetResponse;
import com.konfigthis.client.model.DatasetDeleteSingleDataSetResponse;
import com.konfigthis.client.model.DatasetGetEntitlementsResponse;
import com.konfigthis.client.model.DatasetGetFileDatasetIdResponse;
import com.konfigthis.client.model.DatasetGetValidationReport200Response;
import com.konfigthis.client.model.DatasetGetValidationReportResponse;
import com.konfigthis.client.model.DatasetListValidTagsResponse;
import com.konfigthis.client.model.DatasetSetEntitlementsRequest;
import com.konfigthis.client.model.DraftStatus;
import com.konfigthis.client.model.Entitlement;
import com.konfigthis.client.model.EntryType;
import com.konfigthis.client.model.EntryUpdateResponse;
import com.konfigthis.client.model.Exchange;
import java.io.File;
import com.konfigthis.client.model.GeospatialExtent;
import com.konfigthis.client.model.GroupCode;
import com.konfigthis.client.model.ImageRepresentation;
import com.konfigthis.client.model.Licence;
import com.konfigthis.client.model.PublicContact;
import com.konfigthis.client.model.PublishedStatus;
import com.konfigthis.client.model.Relationship;
import com.konfigthis.client.model.Resource;
import com.konfigthis.client.model.SpatialCoverage;
import com.konfigthis.client.model.TaxonomyKeywords;
import com.konfigthis.client.model.Topic;
import java.util.UUID;
import com.konfigthis.client.model.WorkflowKeywords;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DatasetApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFileDatasetCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/fileDataset"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFileDatasetValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling createFileDataset(Async)");
        }

        return createFileDatasetCall(dataSetId, _callback);

    }


    private ApiResponse<DatasetCreateFileDatasetResponse> createFileDatasetWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = createFileDatasetValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetCreateFileDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFileDatasetAsync(UUID dataSetId, final ApiCallback<DatasetCreateFileDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFileDatasetValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetCreateFileDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFileDatasetRequestBuilder {
        private final UUID dataSetId;

        private CreateFileDatasetRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for createFileDataset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createFileDatasetCall(dataSetId, _callback);
        }


        /**
         * Execute createFileDataset request
         * @return DatasetCreateFileDatasetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public DatasetCreateFileDatasetResponse execute() throws ApiException {
            ApiResponse<DatasetCreateFileDatasetResponse> localVarResp = createFileDatasetWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFileDataset request with HTTP info returned
         * @return ApiResponse&lt;DatasetCreateFileDatasetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetCreateFileDatasetResponse> executeWithHttpInfo() throws ApiException {
            return createFileDatasetWithHttpInfo(dataSetId);
        }

        /**
         * Execute createFileDataset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetCreateFileDatasetResponse> _callback) throws ApiException {
            return createFileDatasetAsync(dataSetId, _callback);
        }
    }

    /**
     * Create and attach file dataset
     * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
     * @param dataSetId  (required)
     * @return CreateFileDatasetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
     </table>
     */
    public CreateFileDatasetRequestBuilder createFileDataset(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new CreateFileDatasetRequestBuilder(dataSetId);
    }
    private okhttp3.Call createSingleCatalogEntryCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/data-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSingleCatalogEntryValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return createSingleCatalogEntryCall(body, _callback);

    }


    private ApiResponse<EntryUpdateResponse> createSingleCatalogEntryWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = createSingleCatalogEntryValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSingleCatalogEntryAsync(Object body, final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSingleCatalogEntryValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSingleCatalogEntryRequestBuilder {
        private Object body;

        private CreateSingleCatalogEntryRequestBuilder() {
        }

        /**
         * Set body
         * @param body The data set to create. (optional)
         * @return CreateSingleCatalogEntryRequestBuilder
         */
        public CreateSingleCatalogEntryRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for createSingleCatalogEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return createSingleCatalogEntryCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createSingleCatalogEntry request
         * @return EntryUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public EntryUpdateResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<EntryUpdateResponse> localVarResp = createSingleCatalogEntryWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSingleCatalogEntry request with HTTP info returned
         * @return ApiResponse&lt;EntryUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntryUpdateResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return createSingleCatalogEntryWithHttpInfo(body);
        }

        /**
         * Execute createSingleCatalogEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return createSingleCatalogEntryAsync(body, _callback);
        }
    }

    /**
     * Create a single data set catalog entry.
     * Creates a single catalog entry.
     * @return CreateSingleCatalogEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSingleCatalogEntryRequestBuilder createSingleCatalogEntry() throws IllegalArgumentException {
        return new CreateSingleCatalogEntryRequestBuilder();
    }
    private okhttp3.Call deleteSingleDataSetCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSingleDataSetValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling deleteSingleDataSet(Async)");
        }

        return deleteSingleDataSetCall(dataSetId, _callback);

    }


    private ApiResponse<DatasetDeleteSingleDataSetResponse> deleteSingleDataSetWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = deleteSingleDataSetValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetDeleteSingleDataSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSingleDataSetAsync(UUID dataSetId, final ApiCallback<DatasetDeleteSingleDataSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSingleDataSetValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetDeleteSingleDataSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSingleDataSetRequestBuilder {
        private final UUID dataSetId;

        private DeleteSingleDataSetRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for deleteSingleDataSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response if deleted properly </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSingleDataSetCall(dataSetId, _callback);
        }


        /**
         * Execute deleteSingleDataSet request
         * @return DatasetDeleteSingleDataSetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response if deleted properly </td><td>  -  </td></tr>
         </table>
         */
        public DatasetDeleteSingleDataSetResponse execute() throws ApiException {
            ApiResponse<DatasetDeleteSingleDataSetResponse> localVarResp = deleteSingleDataSetWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSingleDataSet request with HTTP info returned
         * @return ApiResponse&lt;DatasetDeleteSingleDataSetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response if deleted properly </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetDeleteSingleDataSetResponse> executeWithHttpInfo() throws ApiException {
            return deleteSingleDataSetWithHttpInfo(dataSetId);
        }

        /**
         * Execute deleteSingleDataSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response if deleted properly </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetDeleteSingleDataSetResponse> _callback) throws ApiException {
            return deleteSingleDataSetAsync(dataSetId, _callback);
        }
    }

    /**
     * Delete a Data Set
     * Delete a single Data Set
     * @param dataSetId  (required)
     * @return DeleteSingleDataSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response if deleted properly </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSingleDataSetRequestBuilder deleteSingleDataSet(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new DeleteSingleDataSetRequestBuilder(dataSetId);
    }
    private okhttp3.Call discardDraftChangesCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/draft"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discardDraftChangesValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling discardDraftChanges(Async)");
        }

        return discardDraftChangesCall(dataSetId, _callback);

    }


    private ApiResponse<Void> discardDraftChangesWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = discardDraftChangesValidateBeforeCall(dataSetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call discardDraftChangesAsync(UUID dataSetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = discardDraftChangesValidateBeforeCall(dataSetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DiscardDraftChangesRequestBuilder {
        private final UUID dataSetId;

        private DiscardDraftChangesRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for discardDraftChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Draft changes were discarded. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return discardDraftChangesCall(dataSetId, _callback);
        }


        /**
         * Execute discardDraftChanges request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Draft changes were discarded. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            discardDraftChangesWithHttpInfo(dataSetId);
        }

        /**
         * Execute discardDraftChanges request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Draft changes were discarded. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return discardDraftChangesWithHttpInfo(dataSetId);
        }

        /**
         * Execute discardDraftChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Draft changes were discarded. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return discardDraftChangesAsync(dataSetId, _callback);
        }
    }

    /**
     * Discards the draft changes on a data set catalog entry.
     * Discards the draft changes on a data set catalog entry.
     * @param dataSetId  (required)
     * @return DiscardDraftChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Draft changes were discarded. </td><td>  -  </td></tr>
     </table>
     */
    public DiscardDraftChangesRequestBuilder discardDraftChanges(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new DiscardDraftChangesRequestBuilder(dataSetId);
    }
    private okhttp3.Call getDraftChangesCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/draft"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDraftChangesValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getDraftChanges(Async)");
        }

        return getDraftChangesCall(dataSetId, _callback);

    }


    private ApiResponse<DataSet> getDraftChangesWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getDraftChangesValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDraftChangesAsync(UUID dataSetId, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDraftChangesValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDraftChangesRequestBuilder {
        private final UUID dataSetId;

        private GetDraftChangesRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getDraftChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the draft changes on a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDraftChangesCall(dataSetId, _callback);
        }


        /**
         * Execute getDraftChanges request
         * @return DataSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the draft changes on a data set. </td><td>  -  </td></tr>
         </table>
         */
        public DataSet execute() throws ApiException {
            ApiResponse<DataSet> localVarResp = getDraftChangesWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDraftChanges request with HTTP info returned
         * @return ApiResponse&lt;DataSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the draft changes on a data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSet> executeWithHttpInfo() throws ApiException {
            return getDraftChangesWithHttpInfo(dataSetId);
        }

        /**
         * Execute getDraftChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the draft changes on a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSet> _callback) throws ApiException {
            return getDraftChangesAsync(dataSetId, _callback);
        }
    }

    /**
     * Get the draft changes on a data set catalog entry.
     * Get the draft changes on a data set catalog entry.
     * @param dataSetId  (required)
     * @return GetDraftChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the draft changes on a data set. </td><td>  -  </td></tr>
     </table>
     */
    public GetDraftChangesRequestBuilder getDraftChanges(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetDraftChangesRequestBuilder(dataSetId);
    }
    private okhttp3.Call getEntitlementsCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/access"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitlementsValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getEntitlements(Async)");
        }

        return getEntitlementsCall(dataSetId, _callback);

    }


    private ApiResponse<DatasetGetEntitlementsResponse> getEntitlementsWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetGetEntitlementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntitlementsAsync(UUID dataSetId, final ApiCallback<DatasetGetEntitlementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetGetEntitlementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEntitlementsRequestBuilder {
        private final UUID dataSetId;

        private GetEntitlementsRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitlementsCall(dataSetId, _callback);
        }


        /**
         * Execute getEntitlements request
         * @return DatasetGetEntitlementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public DatasetGetEntitlementsResponse execute() throws ApiException {
            ApiResponse<DatasetGetEntitlementsResponse> localVarResp = getEntitlementsWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEntitlements request with HTTP info returned
         * @return ApiResponse&lt;DatasetGetEntitlementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetGetEntitlementsResponse> executeWithHttpInfo() throws ApiException {
            return getEntitlementsWithHttpInfo(dataSetId);
        }

        /**
         * Execute getEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetGetEntitlementsResponse> _callback) throws ApiException {
            return getEntitlementsAsync(dataSetId, _callback);
        }
    }

    /**
     * Get the entitlements on a data set.
     * Gets the entitlements on a data set.
     * @param dataSetId  (required)
     * @return GetEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitlementsRequestBuilder getEntitlements(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetEntitlementsRequestBuilder(dataSetId);
    }
    private okhttp3.Call getFileDatasetIdCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/fileDataset"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileDatasetIdValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getFileDatasetId(Async)");
        }

        return getFileDatasetIdCall(dataSetId, _callback);

    }


    private ApiResponse<DatasetGetFileDatasetIdResponse> getFileDatasetIdWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getFileDatasetIdValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetGetFileDatasetIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileDatasetIdAsync(UUID dataSetId, final ApiCallback<DatasetGetFileDatasetIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileDatasetIdValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetGetFileDatasetIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileDatasetIdRequestBuilder {
        private final UUID dataSetId;

        private GetFileDatasetIdRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getFileDatasetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileDatasetIdCall(dataSetId, _callback);
        }


        /**
         * Execute getFileDatasetId request
         * @return DatasetGetFileDatasetIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public DatasetGetFileDatasetIdResponse execute() throws ApiException {
            ApiResponse<DatasetGetFileDatasetIdResponse> localVarResp = getFileDatasetIdWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileDatasetId request with HTTP info returned
         * @return ApiResponse&lt;DatasetGetFileDatasetIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetGetFileDatasetIdResponse> executeWithHttpInfo() throws ApiException {
            return getFileDatasetIdWithHttpInfo(dataSetId);
        }

        /**
         * Execute getFileDatasetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetGetFileDatasetIdResponse> _callback) throws ApiException {
            return getFileDatasetIdAsync(dataSetId, _callback);
        }
    }

    /**
     * Get file dataset id from dataset
     * Get file dataset id from dataset
     * @param dataSetId  (required)
     * @return GetFileDatasetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the file management Id for this dataset </td><td>  -  </td></tr>
     </table>
     */
    public GetFileDatasetIdRequestBuilder getFileDatasetId(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetFileDatasetIdRequestBuilder(dataSetId);
    }
    private okhttp3.Call getNonSpatialDataForGroupCall(GroupCode group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/harvest/{group}/dcat"
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/turtle"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNonSpatialDataForGroupValidateBeforeCall(GroupCode group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling getNonSpatialDataForGroup(Async)");
        }

        return getNonSpatialDataForGroupCall(group, _callback);

    }


    private ApiResponse<Object> getNonSpatialDataForGroupWithHttpInfo(GroupCode group) throws ApiException {
        okhttp3.Call localVarCall = getNonSpatialDataForGroupValidateBeforeCall(group, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNonSpatialDataForGroupAsync(GroupCode group, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNonSpatialDataForGroupValidateBeforeCall(group, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNonSpatialDataForGroupRequestBuilder {
        private final GroupCode group;

        private GetNonSpatialDataForGroupRequestBuilder(GroupCode group) {
            this.group = group;
        }

        /**
         * Build call for getNonSpatialDataForGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Metadata as DCAT </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNonSpatialDataForGroupCall(group, _callback);
        }


        /**
         * Execute getNonSpatialDataForGroup request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Metadata as DCAT </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getNonSpatialDataForGroupWithHttpInfo(group);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNonSpatialDataForGroup request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Metadata as DCAT </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getNonSpatialDataForGroupWithHttpInfo(group);
        }

        /**
         * Execute getNonSpatialDataForGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get Metadata as DCAT </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getNonSpatialDataForGroupAsync(group, _callback);
        }
    }

    /**
     * Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
     * 
     * @param group  (required)
     * @return GetNonSpatialDataForGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Metadata as DCAT </td><td>  -  </td></tr>
     </table>
     */
    public GetNonSpatialDataForGroupRequestBuilder getNonSpatialDataForGroup(GroupCode group) throws IllegalArgumentException {
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        return new GetNonSpatialDataForGroupRequestBuilder(group);
    }
    private okhttp3.Call getSingleCatalogEntryCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCatalogEntryValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getSingleCatalogEntry(Async)");
        }

        return getSingleCatalogEntryCall(dataSetId, _callback);

    }


    private ApiResponse<DataSet> getSingleCatalogEntryWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getSingleCatalogEntryValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCatalogEntryAsync(UUID dataSetId, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCatalogEntryValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCatalogEntryRequestBuilder {
        private final UUID dataSetId;

        private GetSingleCatalogEntryRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getSingleCatalogEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single catalog entry from catalog. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCatalogEntryCall(dataSetId, _callback);
        }


        /**
         * Execute getSingleCatalogEntry request
         * @return DataSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single catalog entry from catalog. </td><td>  -  </td></tr>
         </table>
         */
        public DataSet execute() throws ApiException {
            ApiResponse<DataSet> localVarResp = getSingleCatalogEntryWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCatalogEntry request with HTTP info returned
         * @return ApiResponse&lt;DataSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single catalog entry from catalog. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSet> executeWithHttpInfo() throws ApiException {
            return getSingleCatalogEntryWithHttpInfo(dataSetId);
        }

        /**
         * Execute getSingleCatalogEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a single catalog entry from catalog. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSet> _callback) throws ApiException {
            return getSingleCatalogEntryAsync(dataSetId, _callback);
        }
    }

    /**
     * Get a single data set catalog entry.
     * Get a single data set catalog entry.
     * @param dataSetId  (required)
     * @return GetSingleCatalogEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a single catalog entry from catalog. </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCatalogEntryRequestBuilder getSingleCatalogEntry(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetSingleCatalogEntryRequestBuilder(dataSetId);
    }
    private okhttp3.Call getValidationReportCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/validationReport"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationReportValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getValidationReport(Async)");
        }

        return getValidationReportCall(dataSetId, _callback);

    }


    private ApiResponse<DatasetGetValidationReportResponse> getValidationReportWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getValidationReportValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetGetValidationReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValidationReportAsync(UUID dataSetId, final ApiCallback<DatasetGetValidationReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationReportValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetGetValidationReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetValidationReportRequestBuilder {
        private final UUID dataSetId;

        private GetValidationReportRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getValidationReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValidationReportCall(dataSetId, _callback);
        }


        /**
         * Execute getValidationReport request
         * @return DatasetGetValidationReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public DatasetGetValidationReportResponse execute() throws ApiException {
            ApiResponse<DatasetGetValidationReportResponse> localVarResp = getValidationReportWithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getValidationReport request with HTTP info returned
         * @return ApiResponse&lt;DatasetGetValidationReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetGetValidationReportResponse> executeWithHttpInfo() throws ApiException {
            return getValidationReportWithHttpInfo(dataSetId);
        }

        /**
         * Execute getValidationReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetGetValidationReportResponse> _callback) throws ApiException {
            return getValidationReportAsync(dataSetId, _callback);
        }
    }

    /**
     * Get the schematron validation report using the data sets validation profile
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     * @param dataSetId  (required)
     * @return GetValidationReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public GetValidationReportRequestBuilder getValidationReport(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetValidationReportRequestBuilder(dataSetId);
    }
    private okhttp3.Call getValidationReport_0Call(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/draft/validationReport"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationReport_0ValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling getValidationReport_0(Async)");
        }

        return getValidationReport_0Call(dataSetId, _callback);

    }


    private ApiResponse<DatasetGetValidationReport200Response> getValidationReport_0WithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = getValidationReport_0ValidateBeforeCall(dataSetId, null);
        Type localVarReturnType = new TypeToken<DatasetGetValidationReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getValidationReport_0Async(UUID dataSetId, final ApiCallback<DatasetGetValidationReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationReport_0ValidateBeforeCall(dataSetId, _callback);
        Type localVarReturnType = new TypeToken<DatasetGetValidationReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetValidationReport0RequestBuilder {
        private final UUID dataSetId;

        private GetValidationReport0RequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for getValidationReport_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValidationReport_0Call(dataSetId, _callback);
        }


        /**
         * Execute getValidationReport_0 request
         * @return DatasetGetValidationReport200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public DatasetGetValidationReport200Response execute() throws ApiException {
            ApiResponse<DatasetGetValidationReport200Response> localVarResp = getValidationReport_0WithHttpInfo(dataSetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getValidationReport_0 request with HTTP info returned
         * @return ApiResponse&lt;DatasetGetValidationReport200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetGetValidationReport200Response> executeWithHttpInfo() throws ApiException {
            return getValidationReport_0WithHttpInfo(dataSetId);
        }

        /**
         * Execute getValidationReport_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetGetValidationReport200Response> _callback) throws ApiException {
            return getValidationReport_0Async(dataSetId, _callback);
        }
    }

    /**
     * Get the schematron validation report using the data sets validation profile
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     * @param dataSetId  (required)
     * @return GetValidationReport0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public GetValidationReport0RequestBuilder getValidationReport_0(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new GetValidationReport0RequestBuilder(dataSetId);
    }
    private okhttp3.Call listAllDataSetsCall(List<String> ids, List<String> creator, List<String> keywords, List<String> tags, Relationship tagRelationship, List<CategoryValue> category, List<SpatialCoverage> spatialCoverage, String text, String extendedText, List<String> identities, Boolean onlyFeatured, Boolean showEditable, Boolean showHidden, Integer pageNum, Integer pageSize, Integer offset, String searchType, Integer limit, Boolean legacyConcepts, String sort, Exchange exchange, List<String> metadataStandardName, List<DraftStatus> draftStatus, List<Object> publishedStatus, List<String> licence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (creator != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "creator", creator));
        }

        if (keywords != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "keywords", keywords));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (tagRelationship != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagRelationship", tagRelationship));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category", category));
        }

        if (spatialCoverage != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spatialCoverage", spatialCoverage));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (extendedText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedText", extendedText));
        }

        if (identities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "identities", identities));
        }

        if (onlyFeatured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyFeatured", onlyFeatured));
        }

        if (showEditable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showEditable", showEditable));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchType", searchType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (legacyConcepts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("legacyConcepts", legacyConcepts));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (exchange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exchange", exchange));
        }

        if (metadataStandardName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metadataStandardName", metadataStandardName));
        }

        if (draftStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "draftStatus", draftStatus));
        }

        if (publishedStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "publishedStatus", publishedStatus));
        }

        if (licence != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "licence", licence));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllDataSetsValidateBeforeCall(List<String> ids, List<String> creator, List<String> keywords, List<String> tags, Relationship tagRelationship, List<CategoryValue> category, List<SpatialCoverage> spatialCoverage, String text, String extendedText, List<String> identities, Boolean onlyFeatured, Boolean showEditable, Boolean showHidden, Integer pageNum, Integer pageSize, Integer offset, String searchType, Integer limit, Boolean legacyConcepts, String sort, Exchange exchange, List<String> metadataStandardName, List<DraftStatus> draftStatus, List<Object> publishedStatus, List<String> licence, final ApiCallback _callback) throws ApiException {
        return listAllDataSetsCall(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence, _callback);

    }


    private ApiResponse<DataSets> listAllDataSetsWithHttpInfo(List<String> ids, List<String> creator, List<String> keywords, List<String> tags, Relationship tagRelationship, List<CategoryValue> category, List<SpatialCoverage> spatialCoverage, String text, String extendedText, List<String> identities, Boolean onlyFeatured, Boolean showEditable, Boolean showHidden, Integer pageNum, Integer pageSize, Integer offset, String searchType, Integer limit, Boolean legacyConcepts, String sort, Exchange exchange, List<String> metadataStandardName, List<DraftStatus> draftStatus, List<Object> publishedStatus, List<String> licence) throws ApiException {
        okhttp3.Call localVarCall = listAllDataSetsValidateBeforeCall(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence, null);
        Type localVarReturnType = new TypeToken<DataSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllDataSetsAsync(List<String> ids, List<String> creator, List<String> keywords, List<String> tags, Relationship tagRelationship, List<CategoryValue> category, List<SpatialCoverage> spatialCoverage, String text, String extendedText, List<String> identities, Boolean onlyFeatured, Boolean showEditable, Boolean showHidden, Integer pageNum, Integer pageSize, Integer offset, String searchType, Integer limit, Boolean legacyConcepts, String sort, Exchange exchange, List<String> metadataStandardName, List<DraftStatus> draftStatus, List<Object> publishedStatus, List<String> licence, final ApiCallback<DataSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllDataSetsValidateBeforeCall(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence, _callback);
        Type localVarReturnType = new TypeToken<DataSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllDataSetsRequestBuilder {
        private List<String> ids;
        private List<String> creator;
        private List<String> keywords;
        private List<String> tags;
        private Relationship tagRelationship;
        private List<CategoryValue> category;
        private List<SpatialCoverage> spatialCoverage;
        private String text;
        private String extendedText;
        private List<String> identities;
        private Boolean onlyFeatured;
        private Boolean showEditable;
        private Boolean showHidden;
        private Integer pageNum;
        private Integer pageSize;
        private Integer offset;
        private String searchType;
        private Integer limit;
        private Boolean legacyConcepts;
        private String sort;
        private Exchange exchange;
        private List<String> metadataStandardName;
        private List<DraftStatus> draftStatus;
        private List<Object> publishedStatus;
        private List<String> licence;

        private ListAllDataSetsRequestBuilder() {
        }

        /**
         * Set ids
         * @param ids List of data set ids (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder ids(List<String> ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set creator
         * @param creator The creator of the data set. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder creator(List<String> creator) {
            this.creator = creator;
            return this;
        }
        
        /**
         * Set keywords
         * @param keywords Tags describing the data set. keywords is deprecated - use tags instead (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder keywords(List<String> keywords) {
            this.keywords = keywords;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Tags describing the data set. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set tagRelationship
         * @param tagRelationship Note - This feature will no longer be available as we are in the process of moving to a different backend and will soon be removed. If provided, include data sets that have been tagged with concepts that are related to the values provided in the &#x60;tags&#x60; parameter. If not provided, only include data sets tagged with exact matches. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder tagRelationship(Relationship tagRelationship) {
            this.tagRelationship = tagRelationship;
            return this;
        }
        
        /**
         * Set category
         * @param category Indicates the type of data (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder category(List<CategoryValue> category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set spatialCoverage
         * @param spatialCoverage The region the data is applicable to. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder spatialCoverage(List<SpatialCoverage> spatialCoverage) {
            this.spatialCoverage = spatialCoverage;
            return this;
        }
        
        /**
         * Set text
         * @param text Note - Use extendedText. This field has been deprecated. Free text search for data sets. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set extendedText
         * @param extendedText Free text search for data sets matching title; summary; description; tags; concepts; and source. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder extendedText(String extendedText) {
            this.extendedText = extendedText;
            return this;
        }
        
        /**
         * Set identities
         * @param identities Only show datasets accessible by these identities. Can be &#39;PUBLIC&#39;, a user ID or an organisation ID. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder identities(List<String> identities) {
            this.identities = identities;
            return this;
        }
        
        /**
         * Set onlyFeatured
         * @param onlyFeatured Defines whether to return only featured data sets (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder onlyFeatured(Boolean onlyFeatured) {
            this.onlyFeatured = onlyFeatured;
            return this;
        }
        
        /**
         * Set showEditable
         * @param showEditable Defines whether my editable data sets should be shown. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder showEditable(Boolean showEditable) {
            this.showEditable = showEditable;
            return this;
        }
        
        /**
         * Set showHidden
         * @param showHidden Defines whether hidden data sets should be shown. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder showHidden(Boolean showHidden) {
            this.showHidden = showHidden;
            return this;
        }
        
        /**
         * Set pageNum
         * @param pageNum Set the page number. Should not be specified in conjunction with offset or limit. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder pageNum(Integer pageNum) {
            this.pageNum = pageNum;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Set the page size. Should not be specified in conjunction with offset or limit. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Set the pagination offset. Should not be specified in conjunction with pageNum or pageSize. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set searchType
         * @param searchType Choose whether to search across all metadata on a data set, or just the title. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder searchType(String searchType) {
            this.searchType = searchType;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Set the pagination limit. Should not be specified in conjunction with pageNum or pageSize. (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set legacyConcepts
         * @param legacyConcepts Note - This feature will no longer be available once we move to a different backend. \&quot;Format response to convert any new concepts to legacy concepts\&quot; (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder legacyConcepts(Boolean legacyConcepts) {
            this.legacyConcepts = legacyConcepts;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Criterion by which to order the results (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set exchange
         * @param exchange The private data exchange for which to retrieve records (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder exchange(Exchange exchange) {
            this.exchange = exchange;
            return this;
        }
        
        /**
         * Set metadataStandardName
         * @param metadataStandardName  (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder metadataStandardName(List<String> metadataStandardName) {
            this.metadataStandardName = metadataStandardName;
            return this;
        }
        
        /**
         * Set draftStatus
         * @param draftStatus  (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder draftStatus(List<DraftStatus> draftStatus) {
            this.draftStatus = draftStatus;
            return this;
        }
        
        /**
         * Set publishedStatus
         * @param publishedStatus  (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder publishedStatus(List<Object> publishedStatus) {
            this.publishedStatus = publishedStatus;
            return this;
        }
        
        /**
         * Set licence
         * @param licence  (optional)
         * @return ListAllDataSetsRequestBuilder
         */
        public ListAllDataSetsRequestBuilder licence(List<String> licence) {
            this.licence = licence;
            return this;
        }
        
        /**
         * Build call for listAllDataSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all data sets. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllDataSetsCall(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence, _callback);
        }


        /**
         * Execute listAllDataSets request
         * @return DataSets
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all data sets. </td><td>  -  </td></tr>
         </table>
         */
        public DataSets execute() throws ApiException {
            ApiResponse<DataSets> localVarResp = listAllDataSetsWithHttpInfo(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllDataSets request with HTTP info returned
         * @return ApiResponse&lt;DataSets&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all data sets. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSets> executeWithHttpInfo() throws ApiException {
            return listAllDataSetsWithHttpInfo(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence);
        }

        /**
         * Execute listAllDataSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all data sets. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSets> _callback) throws ApiException {
            return listAllDataSetsAsync(ids, creator, keywords, tags, tagRelationship, category, spatialCoverage, text, extendedText, identities, onlyFeatured, showEditable, showHidden, pageNum, pageSize, offset, searchType, limit, legacyConcepts, sort, exchange, metadataStandardName, draftStatus, publishedStatus, licence, _callback);
        }
    }

    /**
     * List all data sets.
     * List all data sets.
     * @return ListAllDataSetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all data sets. </td><td>  -  </td></tr>
     </table>
     */
    public ListAllDataSetsRequestBuilder listAllDataSets() throws IllegalArgumentException {
        return new ListAllDataSetsRequestBuilder();
    }
    private okhttp3.Call listValidCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listValidCategoriesCall(_callback);

    }


    private ApiResponse<List<Category>> listValidCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listValidCategoriesAsync(final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListValidCategoriesRequestBuilder {

        private ListValidCategoriesRequestBuilder() {
        }

        /**
         * Build call for listValidCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listValidCategoriesCall(_callback);
        }


        /**
         * Execute listValidCategories request
         * @return List&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of categories </td><td>  -  </td></tr>
         </table>
         */
        public List<Category> execute() throws ApiException {
            ApiResponse<List<Category>> localVarResp = listValidCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listValidCategories request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Category&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of categories </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Category>> executeWithHttpInfo() throws ApiException {
            return listValidCategoriesWithHttpInfo();
        }

        /**
         * Execute listValidCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Category>> _callback) throws ApiException {
            return listValidCategoriesAsync(_callback);
        }
    }

    /**
     * List all the valid categories of datasets.
     * List all the valid categories of datasets.
     * @return ListValidCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of categories </td><td>  -  </td></tr>
     </table>
     */
    public ListValidCategoriesRequestBuilder listValidCategories() throws IllegalArgumentException {
        return new ListValidCategoriesRequestBuilder();
    }
    private okhttp3.Call listValidTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listValidTagsCall(_callback);

    }


    private ApiResponse<DatasetListValidTagsResponse> listValidTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DatasetListValidTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listValidTagsAsync(final ApiCallback<DatasetListValidTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DatasetListValidTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListValidTagsRequestBuilder {

        private ListValidTagsRequestBuilder() {
        }

        /**
         * Build call for listValidTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of tags the user can use </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listValidTagsCall(_callback);
        }


        /**
         * Execute listValidTags request
         * @return DatasetListValidTagsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of tags the user can use </td><td>  -  </td></tr>
         </table>
         */
        public DatasetListValidTagsResponse execute() throws ApiException {
            ApiResponse<DatasetListValidTagsResponse> localVarResp = listValidTagsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listValidTags request with HTTP info returned
         * @return ApiResponse&lt;DatasetListValidTagsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of tags the user can use </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DatasetListValidTagsResponse> executeWithHttpInfo() throws ApiException {
            return listValidTagsWithHttpInfo();
        }

        /**
         * Execute listValidTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of tags the user can use </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DatasetListValidTagsResponse> _callback) throws ApiException {
            return listValidTagsAsync(_callback);
        }
    }

    /**
     * List all the valid tags that can be set on a data set.
     * List all the valid tags that can be set on a data set.
     * @return ListValidTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of tags the user can use </td><td>  -  </td></tr>
     </table>
     */
    public ListValidTagsRequestBuilder listValidTags() throws IllegalArgumentException {
        return new ListValidTagsRequestBuilder();
    }
    private okhttp3.Call setEntitlementsCall(UUID dataSetId, DatasetSetEntitlementsRequest datasetSetEntitlementsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datasetSetEntitlementsRequest;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/access"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setEntitlementsValidateBeforeCall(UUID dataSetId, DatasetSetEntitlementsRequest datasetSetEntitlementsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling setEntitlements(Async)");
        }

        return setEntitlementsCall(dataSetId, datasetSetEntitlementsRequest, _callback);

    }


    private ApiResponse<Object> setEntitlementsWithHttpInfo(UUID dataSetId, DatasetSetEntitlementsRequest datasetSetEntitlementsRequest) throws ApiException {
        okhttp3.Call localVarCall = setEntitlementsValidateBeforeCall(dataSetId, datasetSetEntitlementsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setEntitlementsAsync(UUID dataSetId, DatasetSetEntitlementsRequest datasetSetEntitlementsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setEntitlementsValidateBeforeCall(dataSetId, datasetSetEntitlementsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetEntitlementsRequestBuilder {
        private final List<BatchIdentityInputEntitlementsInner> entitlements;
        private final UUID dataSetId;

        private SetEntitlementsRequestBuilder(List<BatchIdentityInputEntitlementsInner> entitlements, UUID dataSetId) {
            this.entitlements = entitlements;
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for setEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DatasetSetEntitlementsRequest datasetSetEntitlementsRequest = buildBodyParams();
            return setEntitlementsCall(dataSetId, datasetSetEntitlementsRequest, _callback);
        }

        private DatasetSetEntitlementsRequest buildBodyParams() {
            DatasetSetEntitlementsRequest datasetSetEntitlementsRequest = new DatasetSetEntitlementsRequest();
            datasetSetEntitlementsRequest.entitlements(this.entitlements);
            return datasetSetEntitlementsRequest;
        }

        /**
         * Execute setEntitlements request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            DatasetSetEntitlementsRequest datasetSetEntitlementsRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = setEntitlementsWithHttpInfo(dataSetId, datasetSetEntitlementsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setEntitlements request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            DatasetSetEntitlementsRequest datasetSetEntitlementsRequest = buildBodyParams();
            return setEntitlementsWithHttpInfo(dataSetId, datasetSetEntitlementsRequest);
        }

        /**
         * Execute setEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            DatasetSetEntitlementsRequest datasetSetEntitlementsRequest = buildBodyParams();
            return setEntitlementsAsync(dataSetId, datasetSetEntitlementsRequest, _callback);
        }
    }

    /**
     * Set the entitlements and on a data set for all identities.
     * Set the entitlements and on a data set for all identities.
     * @param dataSetId  (required)
     * @return SetEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access set on the data set </td><td>  -  </td></tr>
     </table>
     */
    public SetEntitlementsRequestBuilder setEntitlements(List<BatchIdentityInputEntitlementsInner> entitlements, UUID dataSetId) throws IllegalArgumentException {
        if (entitlements == null) throw new IllegalArgumentException("\"entitlements\" is required but got null");
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new SetEntitlementsRequestBuilder(entitlements, dataSetId);
    }
    private okhttp3.Call setImageCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}/image"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setImageValidateBeforeCall(UUID dataSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling setImage(Async)");
        }

        return setImageCall(dataSetId, _callback);

    }


    private ApiResponse<Void> setImageWithHttpInfo(UUID dataSetId) throws ApiException {
        okhttp3.Call localVarCall = setImageValidateBeforeCall(dataSetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setImageAsync(UUID dataSetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setImageValidateBeforeCall(dataSetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetImageRequestBuilder {
        private final UUID dataSetId;

        private SetImageRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Build call for setImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The imageUrl for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setImageCall(dataSetId, _callback);
        }


        /**
         * Execute setImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The imageUrl for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setImageWithHttpInfo(dataSetId);
        }

        /**
         * Execute setImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The imageUrl for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setImageWithHttpInfo(dataSetId);
        }

        /**
         * Execute setImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The imageUrl for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setImageAsync(dataSetId, _callback);
        }
    }

    /**
     * Set the image for a data set.
     * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
     * @param dataSetId  (required)
     * @return SetImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The imageUrl for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public SetImageRequestBuilder setImage(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new SetImageRequestBuilder(dataSetId);
    }
    private okhttp3.Call updateSingleCatalogEntryCall(UUID dataSetId, DataSetPatch dataSetPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSetPatch;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSingleCatalogEntryValidateBeforeCall(UUID dataSetId, DataSetPatch dataSetPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling updateSingleCatalogEntry(Async)");
        }

        // verify the required parameter 'dataSetPatch' is set
        if (dataSetPatch == null) {
            throw new ApiException("Missing the required parameter 'dataSetPatch' when calling updateSingleCatalogEntry(Async)");
        }

        return updateSingleCatalogEntryCall(dataSetId, dataSetPatch, _callback);

    }


    private ApiResponse<DataSet> updateSingleCatalogEntryWithHttpInfo(UUID dataSetId, DataSetPatch dataSetPatch) throws ApiException {
        okhttp3.Call localVarCall = updateSingleCatalogEntryValidateBeforeCall(dataSetId, dataSetPatch, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSingleCatalogEntryAsync(UUID dataSetId, DataSetPatch dataSetPatch, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSingleCatalogEntryValidateBeforeCall(dataSetId, dataSetPatch, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSingleCatalogEntryRequestBuilder {
        private final UUID dataSetId;
        private List<String> tags;
        private String summary;
        private String title;
        private String description;
        private List<String> alternativeTitles;
        private String scoringURI;
        private String endpointKey;
        private List<Object> derivedFrom;
        private String creator;
        private String dataReliability;
        private String license;
        private DataSetPatchLicence licence;
        private List<Resource> resources;
        private List<DataFormat> dataFormats;
        private String spatialCoverage;
        private Double spatialResolution;
        private DataSetPatchGeospatialExtent geospatialExtent;
        private String temporalCoverage;
        private DataSetPatchTemporalExtent temporalExtent;
        private String temporalResolution;
        private List<Topic> topics;
        private List<WorkflowKeywords> workflowKeywords;
        private List<TaxonomyKeywords> taxonomyKeywords;
        private String accrualPeriodicity;
        private String issued;
        private Double createdAt;
        private Double published;
        private PublishedStatus publishedStatus;
        private Double modified;
        private CategoryValue category;
        private String visibility;
        private String pricingDescription;
        private List<DataSetDistributionsInner> distributions;
        private Double approvalForAccessNumber;
        private String approvalForAccessStatus;
        private List<Contact> contacts;
        private DataSetPatchMetadataContact metadataContact;
        private String lineage;
        private String language;
        private String characterSet;
        private String hierarchyLevel;
        private String metadataLanguage;
        private String metadataCharacterSet;
        private String metadataStandardName;
        private String metadataStandardVersion;
        private String coordinateReferenceSystemId;
        private String spatialRepresentationType;

        private UpdateSingleCatalogEntryRequestBuilder(UUID dataSetId) {
            this.dataSetId = dataSetId;
        }

        /**
         * Set tags
         * @param tags List of tags on this data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set summary
         * @param summary Summary of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set title
         * @param title Title for the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description Description of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set alternativeTitles
         * @param alternativeTitles  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder alternativeTitles(List<String> alternativeTitles) {
            this.alternativeTitles = alternativeTitles;
            return this;
        }
        
        /**
         * Set scoringURI
         * @param scoringURI ScoringURI for the model. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder scoringURI(String scoringURI) {
            this.scoringURI = scoringURI;
            return this;
        }
        
        /**
         * Set endpointKey
         * @param endpointKey Endpoint key for the model. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder endpointKey(String endpointKey) {
            this.endpointKey = endpointKey;
            return this;
        }
        
        /**
         * Set derivedFrom
         * @param derivedFrom Data sets used to generate this data set. When updating a data set, use an array of IDs. When GETting the data set, the return type will be &#x60;BasicDataSetInfo&#x60;.  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder derivedFrom(List<Object> derivedFrom) {
            this.derivedFrom = derivedFrom;
            return this;
        }
        
        /**
         * Set creator
         * @param creator Creator of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder creator(String creator) {
            this.creator = creator;
            return this;
        }
        
        /**
         * Set dataReliability
         * @param dataReliability Free text description about the reliability of this dataset. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder dataReliability(String dataReliability) {
            this.dataReliability = dataReliability;
            return this;
        }
        
        /**
         * Set license
         * @param license License of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set licence
         * @param licence  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder licence(DataSetPatchLicence licence) {
            this.licence = licence;
            return this;
        }
        
        /**
         * Set resources
         * @param resources Links containing more information on the data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder resources(List<Resource> resources) {
            this.resources = resources;
            return this;
        }
        
        /**
         * Set dataFormats
         * @param dataFormats Format of the data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder dataFormats(List<DataFormat> dataFormats) {
            this.dataFormats = dataFormats;
            return this;
        }
        
        /**
         * Set spatialCoverage
         * @param spatialCoverage The geo spatial coverage of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder spatialCoverage(String spatialCoverage) {
            this.spatialCoverage = spatialCoverage;
            return this;
        }
        
        /**
         * Set spatialResolution
         * @param spatialResolution The resolution of data set in meters. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder spatialResolution(Double spatialResolution) {
            this.spatialResolution = spatialResolution;
            return this;
        }
        

        /**
         * Set spatialResolution
         * @param spatialResolution The resolution of data set in meters. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder spatialResolution(Integer spatialResolution) {
            this.spatialResolution = spatialResolution.doubleValue();
            return this;
        }
        
        /**
         * Set geospatialExtent
         * @param geospatialExtent  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder geospatialExtent(DataSetPatchGeospatialExtent geospatialExtent) {
            this.geospatialExtent = geospatialExtent;
            return this;
        }
        
        /**
         * Set temporalCoverage
         * @param temporalCoverage The time frame this data set covers. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder temporalCoverage(String temporalCoverage) {
            this.temporalCoverage = temporalCoverage;
            return this;
        }
        
        /**
         * Set temporalExtent
         * @param temporalExtent  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder temporalExtent(DataSetPatchTemporalExtent temporalExtent) {
            this.temporalExtent = temporalExtent;
            return this;
        }
        
        /**
         * Set temporalResolution
         * @param temporalResolution The sampling time period of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder temporalResolution(String temporalResolution) {
            this.temporalResolution = temporalResolution;
            return this;
        }
        
        /**
         * Set topics
         * @param topics  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder topics(List<Topic> topics) {
            this.topics = topics;
            return this;
        }
        
        /**
         * Set workflowKeywords
         * @param workflowKeywords List of workflow keywords on this data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder workflowKeywords(List<WorkflowKeywords> workflowKeywords) {
            this.workflowKeywords = workflowKeywords;
            return this;
        }
        
        /**
         * Set taxonomyKeywords
         * @param taxonomyKeywords List of keywords based on specific taxonomies (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder taxonomyKeywords(List<TaxonomyKeywords> taxonomyKeywords) {
            this.taxonomyKeywords = taxonomyKeywords;
            return this;
        }
        
        /**
         * Set accrualPeriodicity
         * @param accrualPeriodicity The frequency at which data set is published. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder accrualPeriodicity(String accrualPeriodicity) {
            this.accrualPeriodicity = accrualPeriodicity;
            return this;
        }
        
        /**
         * Set issued
         * @param issued The date when the data set was issued. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder issued(String issued) {
            this.issued = issued;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt Data set creation timestamp. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder createdAt(Double createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        

        /**
         * Set createdAt
         * @param createdAt Data set creation timestamp. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder createdAt(Integer createdAt) {
            this.createdAt = createdAt.doubleValue();
            return this;
        }
        
        /**
         * Set published
         * @param published Data set publication timestamp. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder published(Double published) {
            this.published = published;
            return this;
        }
        

        /**
         * Set published
         * @param published Data set publication timestamp. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder published(Integer published) {
            this.published = published.doubleValue();
            return this;
        }
        
        /**
         * Set publishedStatus
         * @param publishedStatus  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder publishedStatus(PublishedStatus publishedStatus) {
            this.publishedStatus = publishedStatus;
            return this;
        }
        
        /**
         * Set modified
         * @param modified An timestamp of when the data in this dataset was last updated (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder modified(Double modified) {
            this.modified = modified;
            return this;
        }
        

        /**
         * Set modified
         * @param modified An timestamp of when the data in this dataset was last updated (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder modified(Integer modified) {
            this.modified = modified.doubleValue();
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder category(CategoryValue category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility Whether or not this data set should be displayed in the index. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set pricingDescription
         * @param pricingDescription Pricing description of the data set. (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder pricingDescription(String pricingDescription) {
            this.pricingDescription = pricingDescription;
            return this;
        }
        
        /**
         * Set distributions
         * @param distributions  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder distributions(List<DataSetDistributionsInner> distributions) {
            this.distributions = distributions;
            return this;
        }
        
        /**
         * Set approvalForAccessNumber
         * @param approvalForAccessNumber Approval for access status number (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder approvalForAccessNumber(Double approvalForAccessNumber) {
            this.approvalForAccessNumber = approvalForAccessNumber;
            return this;
        }
        

        /**
         * Set approvalForAccessNumber
         * @param approvalForAccessNumber Approval for access status number (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder approvalForAccessNumber(Integer approvalForAccessNumber) {
            this.approvalForAccessNumber = approvalForAccessNumber.doubleValue();
            return this;
        }
        
        /**
         * Set approvalForAccessStatus
         * @param approvalForAccessStatus Approval for access status value (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder approvalForAccessStatus(String approvalForAccessStatus) {
            this.approvalForAccessStatus = approvalForAccessStatus;
            return this;
        }
        
        /**
         * Set contacts
         * @param contacts List of contacts for this data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder contacts(List<Contact> contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set metadataContact
         * @param metadataContact  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder metadataContact(DataSetPatchMetadataContact metadataContact) {
            this.metadataContact = metadataContact;
            return this;
        }
        
        /**
         * Set lineage
         * @param lineage Information about the creation and quality assurance process of the dataset (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder lineage(String lineage) {
            this.lineage = lineage;
            return this;
        }
        
        /**
         * Set language
         * @param language Language used on the data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set characterSet
         * @param characterSet Character set used on the data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder characterSet(String characterSet) {
            this.characterSet = characterSet;
            return this;
        }
        
        /**
         * Set hierarchyLevel
         * @param hierarchyLevel Hierarchy level of the data set (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder hierarchyLevel(String hierarchyLevel) {
            this.hierarchyLevel = hierarchyLevel;
            return this;
        }
        
        /**
         * Set metadataLanguage
         * @param metadataLanguage Language used on the metadata (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder metadataLanguage(String metadataLanguage) {
            this.metadataLanguage = metadataLanguage;
            return this;
        }
        
        /**
         * Set metadataCharacterSet
         * @param metadataCharacterSet Character set used on the metadata (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder metadataCharacterSet(String metadataCharacterSet) {
            this.metadataCharacterSet = metadataCharacterSet;
            return this;
        }
        
        /**
         * Set metadataStandardName
         * @param metadataStandardName  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder metadataStandardName(String metadataStandardName) {
            this.metadataStandardName = metadataStandardName;
            return this;
        }
        
        /**
         * Set metadataStandardVersion
         * @param metadataStandardVersion  (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder metadataStandardVersion(String metadataStandardVersion) {
            this.metadataStandardVersion = metadataStandardVersion;
            return this;
        }
        
        /**
         * Set coordinateReferenceSystemId
         * @param coordinateReferenceSystemId URL to the specification of the coordinate system used in the data (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder coordinateReferenceSystemId(String coordinateReferenceSystemId) {
            this.coordinateReferenceSystemId = coordinateReferenceSystemId;
            return this;
        }
        
        /**
         * Set spatialRepresentationType
         * @param spatialRepresentationType Type of the geospatial data (optional)
         * @return UpdateSingleCatalogEntryRequestBuilder
         */
        public UpdateSingleCatalogEntryRequestBuilder spatialRepresentationType(String spatialRepresentationType) {
            this.spatialRepresentationType = spatialRepresentationType;
            return this;
        }
        
        /**
         * Build call for updateSingleCatalogEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataSetPatch dataSetPatch = buildBodyParams();
            return updateSingleCatalogEntryCall(dataSetId, dataSetPatch, _callback);
        }

        private DataSetPatch buildBodyParams() {
            DataSetPatch dataSetPatch = new DataSetPatch();
            dataSetPatch.tags(this.tags);
            dataSetPatch.summary(this.summary);
            dataSetPatch.title(this.title);
            dataSetPatch.description(this.description);
            dataSetPatch.alternativeTitles(this.alternativeTitles);
            dataSetPatch.scoringURI(this.scoringURI);
            dataSetPatch.endpointKey(this.endpointKey);
            dataSetPatch.derivedFrom(this.derivedFrom);
            dataSetPatch.creator(this.creator);
            dataSetPatch.dataReliability(this.dataReliability);
            dataSetPatch.license(this.license);
            dataSetPatch.licence(this.licence);
            dataSetPatch.resources(this.resources);
            dataSetPatch.dataFormats(this.dataFormats);
            if (this.spatialCoverage != null)
            dataSetPatch.spatialCoverage(DataSetPatch.SpatialCoverageEnum.fromValue(this.spatialCoverage));
            dataSetPatch.spatialResolution(this.spatialResolution);
            dataSetPatch.geospatialExtent(this.geospatialExtent);
            dataSetPatch.temporalCoverage(this.temporalCoverage);
            dataSetPatch.temporalExtent(this.temporalExtent);
            if (this.temporalResolution != null)
            dataSetPatch.temporalResolution(DataSetPatch.TemporalResolutionEnum.fromValue(this.temporalResolution));
            dataSetPatch.topics(this.topics);
            dataSetPatch.workflowKeywords(this.workflowKeywords);
            dataSetPatch.taxonomyKeywords(this.taxonomyKeywords);
            if (this.accrualPeriodicity != null)
            dataSetPatch.accrualPeriodicity(DataSetPatch.AccrualPeriodicityEnum.fromValue(this.accrualPeriodicity));
            dataSetPatch.issued(this.issued);
            dataSetPatch.createdAt(this.createdAt);
            dataSetPatch.published(this.published);
            dataSetPatch.publishedStatus(this.publishedStatus);
            dataSetPatch.modified(this.modified);
            dataSetPatch.category(this.category);
            if (this.visibility != null)
            dataSetPatch.visibility(DataSetPatch.VisibilityEnum.fromValue(this.visibility));
            dataSetPatch.pricingDescription(this.pricingDescription);
            dataSetPatch.distributions(this.distributions);
            dataSetPatch.approvalForAccessNumber(this.approvalForAccessNumber);
            if (this.approvalForAccessStatus != null)
            dataSetPatch.approvalForAccessStatus(DataSetPatch.ApprovalForAccessStatusEnum.fromValue(this.approvalForAccessStatus));
            dataSetPatch.contacts(this.contacts);
            dataSetPatch.metadataContact(this.metadataContact);
            dataSetPatch.lineage(this.lineage);
            dataSetPatch.language(this.language);
            dataSetPatch.characterSet(this.characterSet);
            dataSetPatch.hierarchyLevel(this.hierarchyLevel);
            dataSetPatch.metadataLanguage(this.metadataLanguage);
            dataSetPatch.metadataCharacterSet(this.metadataCharacterSet);
            dataSetPatch.metadataStandardName(this.metadataStandardName);
            dataSetPatch.metadataStandardVersion(this.metadataStandardVersion);
            dataSetPatch.coordinateReferenceSystemId(this.coordinateReferenceSystemId);
            dataSetPatch.spatialRepresentationType(this.spatialRepresentationType);
            return dataSetPatch;
        }

        /**
         * Execute updateSingleCatalogEntry request
         * @return DataSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public DataSet execute() throws ApiException {
            DataSetPatch dataSetPatch = buildBodyParams();
            ApiResponse<DataSet> localVarResp = updateSingleCatalogEntryWithHttpInfo(dataSetId, dataSetPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSingleCatalogEntry request with HTTP info returned
         * @return ApiResponse&lt;DataSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSet> executeWithHttpInfo() throws ApiException {
            DataSetPatch dataSetPatch = buildBodyParams();
            return updateSingleCatalogEntryWithHttpInfo(dataSetId, dataSetPatch);
        }

        /**
         * Execute updateSingleCatalogEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSet> _callback) throws ApiException {
            DataSetPatch dataSetPatch = buildBodyParams();
            return updateSingleCatalogEntryAsync(dataSetId, dataSetPatch, _callback);
        }
    }

    /**
     * Update a single data set catalog entry.
     * Updates a single catalog entry.
     * @param dataSetId  (required)
     * @param dataSetPatch The updated data set information. (required)
     * @return UpdateSingleCatalogEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSingleCatalogEntryRequestBuilder updateSingleCatalogEntry(UUID dataSetId) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new UpdateSingleCatalogEntryRequestBuilder(dataSetId);
    }
    private okhttp3.Call updateSingleEntryCall(UUID dataSetId, DataSet dataSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSet;

        // create path and map variables
        String localVarPath = "/data-sets/{dataSetId}"
            .replace("{" + "dataSetId" + "}", localVarApiClient.escapeString(dataSetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSingleEntryValidateBeforeCall(UUID dataSetId, DataSet dataSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling updateSingleEntry(Async)");
        }

        // verify the required parameter 'dataSet' is set
        if (dataSet == null) {
            throw new ApiException("Missing the required parameter 'dataSet' when calling updateSingleEntry(Async)");
        }

        return updateSingleEntryCall(dataSetId, dataSet, _callback);

    }


    private ApiResponse<DataSet> updateSingleEntryWithHttpInfo(UUID dataSetId, DataSet dataSet) throws ApiException {
        okhttp3.Call localVarCall = updateSingleEntryValidateBeforeCall(dataSetId, dataSet, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSingleEntryAsync(UUID dataSetId, DataSet dataSet, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSingleEntryValidateBeforeCall(dataSetId, dataSet, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSingleEntryRequestBuilder {
        private final String title;
        private final String description;
        private final EntryType entryType;
        private final UUID dataSetId;
        private List<String> tags;
        private String summary;
        private UUID id;
        private Exchange exchange;
        private List<String> alternativeTitles;
        private String scoringURI;
        private String endpointKey;
        private Boolean isOwner;
        private String publisher;
        private Double createdAt;
        private Double published;
        private Double metadataModified;
        private List<BasicDataSetInfo> usedBy;
        private List<Object> derivedFrom;
        private List<Entitlement> entitlements;
        private Map<String, List<Entitlement>> entitlementsByIdentity;
        private String creator;
        private String dataReliability;
        private String license;
        private Licence licence;
        private String landingPage;
        private List<Resource> resources;
        private List<DataFormat> dataFormats;
        private String pricingDescription;
        private SpatialCoverage spatialCoverage;
        private Double spatialResolution;
        private GeospatialExtent geospatialExtent;
        private String temporalCoverage;
        private String temporalResolution;
        private AccrualPeriodicity accrualPeriodicity;
        private List<DataSetDistributionsInner> distributions;
        private String issued;
        private Double modified;
        private List<String> keywords;
        private List<Topic> topics;
        private List<WorkflowKeywords> workflowKeywords;
        private List<TaxonomyKeywords> taxonomyKeywords;
        private CategoryValue category;
        private String visibility;
        private List<String> concepts;
        private DataSetDataSet dataSet;
        private List<DataSetServicesInner> services;
        private DataSetSampleData sampleData;
        private ImageRepresentation image;
        private String coordinateReferenceSystemId;
        private String spatialRepresentationType;
        private String lineage;
        private String fromTemplate;
        private List<Contact> contacts;
        private Contact metadataContact;
        private PublicContact publicContact;
        private Double approvalForAccessNumber;
        private String approvalForAccessStatus;
        private String language;
        private String characterSet;
        private String hierarchyLevel;
        private String metadataLanguage;
        private String metadataCharacterSet;
        private String metadataStandardName;
        private String metadataStandardVersion;
        private DraftStatus draftStatus;
        private String draftNotes;
        private PublishedStatus publishedStatus;

        private UpdateSingleEntryRequestBuilder(String title, String description, EntryType entryType, UUID dataSetId) {
            this.title = title;
            this.description = description;
            this.entryType = entryType;
            this.dataSetId = dataSetId;
        }

        /**
         * Set tags
         * @param tags List of tags on this data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set summary
         * @param summary Summary of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set id
         * @param id The ID of a dataset in the catalog (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder id(UUID id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set exchange
         * @param exchange  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder exchange(Exchange exchange) {
            this.exchange = exchange;
            return this;
        }
        
        /**
         * Set alternativeTitles
         * @param alternativeTitles  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder alternativeTitles(List<String> alternativeTitles) {
            this.alternativeTitles = alternativeTitles;
            return this;
        }
        
        /**
         * Set scoringURI
         * @param scoringURI Scoring URI of the model. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder scoringURI(String scoringURI) {
            this.scoringURI = scoringURI;
            return this;
        }
        
        /**
         * Set endpointKey
         * @param endpointKey Endpoint key for the model. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder endpointKey(String endpointKey) {
            this.endpointKey = endpointKey;
            return this;
        }
        
        /**
         * Set isOwner
         * @param isOwner Whether the current user is the owner of this data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder isOwner(Boolean isOwner) {
            this.isOwner = isOwner;
            return this;
        }
        
        /**
         * Set publisher
         * @param publisher The ID of the publisher. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder publisher(String publisher) {
            this.publisher = publisher;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt Data set creation timestamp. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder createdAt(Double createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set published
         * @param published Data set publication timestamp. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder published(Double published) {
            this.published = published;
            return this;
        }
        
        /**
         * Set metadataModified
         * @param metadataModified Metadata last-modification timestmap. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataModified(Double metadataModified) {
            this.metadataModified = metadataModified;
            return this;
        }
        
        /**
         * Set usedBy
         * @param usedBy Other data sets using this data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder usedBy(List<BasicDataSetInfo> usedBy) {
            this.usedBy = usedBy;
            return this;
        }
        
        /**
         * Set derivedFrom
         * @param derivedFrom Data sets used to generate this data set. When updating a data set, use an array of IDs. When GETting the data set, the return type will be &#x60;BasicDataSetInfo&#x60;.  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder derivedFrom(List<Object> derivedFrom) {
            this.derivedFrom = derivedFrom;
            return this;
        }
        
        /**
         * Set entitlements
         * @param entitlements Entitlements for the current user. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder entitlements(List<Entitlement> entitlements) {
            this.entitlements = entitlements;
            return this;
        }
        
        /**
         * Set entitlementsByIdentity
         * @param entitlementsByIdentity Array of entitlements by user identity. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder entitlementsByIdentity(Map<String, List<Entitlement>> entitlementsByIdentity) {
            this.entitlementsByIdentity = entitlementsByIdentity;
            return this;
        }
        
        /**
         * Set creator
         * @param creator Creator of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder creator(String creator) {
            this.creator = creator;
            return this;
        }
        
        /**
         * Set dataReliability
         * @param dataReliability Free text description about the reliability of this dataset. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder dataReliability(String dataReliability) {
            this.dataReliability = dataReliability;
            return this;
        }
        
        /**
         * Set license
         * @param license License of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set licence
         * @param licence  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder licence(Licence licence) {
            this.licence = licence;
            return this;
        }
        
        /**
         * Set landingPage
         * @param landingPage DEPRECATED. This has been replaced with the resources attribute. Reference URI of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder landingPage(String landingPage) {
            this.landingPage = landingPage;
            return this;
        }
        
        /**
         * Set resources
         * @param resources Links containing more information on the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder resources(List<Resource> resources) {
            this.resources = resources;
            return this;
        }
        
        /**
         * Set dataFormats
         * @param dataFormats Format of the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder dataFormats(List<DataFormat> dataFormats) {
            this.dataFormats = dataFormats;
            return this;
        }
        
        /**
         * Set pricingDescription
         * @param pricingDescription Pricing description of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder pricingDescription(String pricingDescription) {
            this.pricingDescription = pricingDescription;
            return this;
        }
        
        /**
         * Set spatialCoverage
         * @param spatialCoverage  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder spatialCoverage(SpatialCoverage spatialCoverage) {
            this.spatialCoverage = spatialCoverage;
            return this;
        }
        
        /**
         * Set spatialResolution
         * @param spatialResolution The resolution of data set in meters. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder spatialResolution(Double spatialResolution) {
            this.spatialResolution = spatialResolution;
            return this;
        }
        
        /**
         * Set geospatialExtent
         * @param geospatialExtent  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder geospatialExtent(GeospatialExtent geospatialExtent) {
            this.geospatialExtent = geospatialExtent;
            return this;
        }
        
        /**
         * Set temporalCoverage
         * @param temporalCoverage The time frame this data set covers. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder temporalCoverage(String temporalCoverage) {
            this.temporalCoverage = temporalCoverage;
            return this;
        }
        
        /**
         * Set temporalResolution
         * @param temporalResolution The sampling time period of the data set. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder temporalResolution(String temporalResolution) {
            this.temporalResolution = temporalResolution;
            return this;
        }
        
        /**
         * Set accrualPeriodicity
         * @param accrualPeriodicity  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder accrualPeriodicity(AccrualPeriodicity accrualPeriodicity) {
            this.accrualPeriodicity = accrualPeriodicity;
            return this;
        }
        
        /**
         * Set distributions
         * @param distributions  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder distributions(List<DataSetDistributionsInner> distributions) {
            this.distributions = distributions;
            return this;
        }
        
        /**
         * Set issued
         * @param issued The date when the data set was issued. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder issued(String issued) {
            this.issued = issued;
            return this;
        }
        
        /**
         * Set modified
         * @param modified An timestamp of when the data in this dataset was last updated (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder modified(Double modified) {
            this.modified = modified;
            return this;
        }
        
        /**
         * Set keywords
         * @param keywords List of keywords on this data set. keywords is deprecated - use tags instead (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder keywords(List<String> keywords) {
            this.keywords = keywords;
            return this;
        }
        
        /**
         * Set topics
         * @param topics List of topics on this data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder topics(List<Topic> topics) {
            this.topics = topics;
            return this;
        }
        
        /**
         * Set workflowKeywords
         * @param workflowKeywords List of workflow keywords on this data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder workflowKeywords(List<WorkflowKeywords> workflowKeywords) {
            this.workflowKeywords = workflowKeywords;
            return this;
        }
        
        /**
         * Set taxonomyKeywords
         * @param taxonomyKeywords List of keywords based on specific taxonomies (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder taxonomyKeywords(List<TaxonomyKeywords> taxonomyKeywords) {
            this.taxonomyKeywords = taxonomyKeywords;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder category(CategoryValue category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set visibility
         * @param visibility Whether or not this data set should be displayed in the index. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Set concepts
         * @param concepts List of concepts on this data set. Check the concepts endpoint to see valid values. (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder concepts(List<String> concepts) {
            this.concepts = concepts;
            return this;
        }
        
        /**
         * Set dataSet
         * @param dataSet  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder dataSet(DataSetDataSet dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        
        /**
         * Set services
         * @param services List of services available on the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder services(List<DataSetServicesInner> services) {
            this.services = services;
            return this;
        }
        
        /**
         * Set sampleData
         * @param sampleData  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder sampleData(DataSetSampleData sampleData) {
            this.sampleData = sampleData;
            return this;
        }
        
        /**
         * Set image
         * @param image  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder image(ImageRepresentation image) {
            this.image = image;
            return this;
        }
        
        /**
         * Set coordinateReferenceSystemId
         * @param coordinateReferenceSystemId URL to the specification of the coordinate system used in the data (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder coordinateReferenceSystemId(String coordinateReferenceSystemId) {
            this.coordinateReferenceSystemId = coordinateReferenceSystemId;
            return this;
        }
        
        /**
         * Set spatialRepresentationType
         * @param spatialRepresentationType Type of the geospatial data (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder spatialRepresentationType(String spatialRepresentationType) {
            this.spatialRepresentationType = spatialRepresentationType;
            return this;
        }
        
        /**
         * Set lineage
         * @param lineage Information about the creation and quality assurance process of the dataset (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder lineage(String lineage) {
            this.lineage = lineage;
            return this;
        }
        
        /**
         * Set fromTemplate
         * @param fromTemplate Information about which template was used to create the dataset record (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder fromTemplate(String fromTemplate) {
            this.fromTemplate = fromTemplate;
            return this;
        }
        
        /**
         * Set contacts
         * @param contacts List of contacts for this data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder contacts(List<Contact> contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set metadataContact
         * @param metadataContact  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataContact(Contact metadataContact) {
            this.metadataContact = metadataContact;
            return this;
        }
        
        /**
         * Set publicContact
         * @param publicContact  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder publicContact(PublicContact publicContact) {
            this.publicContact = publicContact;
            return this;
        }
        
        /**
         * Set approvalForAccessNumber
         * @param approvalForAccessNumber Approval for access status number (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder approvalForAccessNumber(Double approvalForAccessNumber) {
            this.approvalForAccessNumber = approvalForAccessNumber;
            return this;
        }
        
        /**
         * Set approvalForAccessStatus
         * @param approvalForAccessStatus Approval for access status value (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder approvalForAccessStatus(String approvalForAccessStatus) {
            this.approvalForAccessStatus = approvalForAccessStatus;
            return this;
        }
        
        /**
         * Set language
         * @param language Language used on the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set characterSet
         * @param characterSet Character set used on the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder characterSet(String characterSet) {
            this.characterSet = characterSet;
            return this;
        }
        
        /**
         * Set hierarchyLevel
         * @param hierarchyLevel Hierarchy level of the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder hierarchyLevel(String hierarchyLevel) {
            this.hierarchyLevel = hierarchyLevel;
            return this;
        }
        
        /**
         * Set metadataLanguage
         * @param metadataLanguage Language used on the metadata (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataLanguage(String metadataLanguage) {
            this.metadataLanguage = metadataLanguage;
            return this;
        }
        
        /**
         * Set metadataCharacterSet
         * @param metadataCharacterSet Character set used on the metadata (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataCharacterSet(String metadataCharacterSet) {
            this.metadataCharacterSet = metadataCharacterSet;
            return this;
        }
        
        /**
         * Set metadataStandardName
         * @param metadataStandardName  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataStandardName(String metadataStandardName) {
            this.metadataStandardName = metadataStandardName;
            return this;
        }
        
        /**
         * Set metadataStandardVersion
         * @param metadataStandardVersion  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder metadataStandardVersion(String metadataStandardVersion) {
            this.metadataStandardVersion = metadataStandardVersion;
            return this;
        }
        
        /**
         * Set draftStatus
         * @param draftStatus  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder draftStatus(DraftStatus draftStatus) {
            this.draftStatus = draftStatus;
            return this;
        }
        
        /**
         * Set draftNotes
         * @param draftNotes Any notes added during review of the data set (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder draftNotes(String draftNotes) {
            this.draftNotes = draftNotes;
            return this;
        }
        
        /**
         * Set publishedStatus
         * @param publishedStatus  (optional)
         * @return UpdateSingleEntryRequestBuilder
         */
        public UpdateSingleEntryRequestBuilder publishedStatus(PublishedStatus publishedStatus) {
            this.publishedStatus = publishedStatus;
            return this;
        }
        
        /**
         * Build call for updateSingleEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataSet dataSet = buildBodyParams();
            return updateSingleEntryCall(dataSetId, dataSet, _callback);
        }

        private DataSet buildBodyParams() {
            DataSet dataSet = new DataSet();
            dataSet.tags(this.tags);
            dataSet.summary(this.summary);
            dataSet.title(this.title);
            dataSet.description(this.description);
            dataSet.id(this.id);
            dataSet.entryType(this.entryType);
            dataSet.exchange(this.exchange);
            dataSet.alternativeTitles(this.alternativeTitles);
            dataSet.scoringURI(this.scoringURI);
            dataSet.endpointKey(this.endpointKey);
            dataSet.isOwner(this.isOwner);
            dataSet.publisher(this.publisher);
            dataSet.createdAt(this.createdAt);
            dataSet.published(this.published);
            dataSet.metadataModified(this.metadataModified);
            dataSet.usedBy(this.usedBy);
            dataSet.derivedFrom(this.derivedFrom);
            dataSet.entitlements(this.entitlements);
            dataSet.entitlementsByIdentity(this.entitlementsByIdentity);
            dataSet.creator(this.creator);
            dataSet.dataReliability(this.dataReliability);
            dataSet.license(this.license);
            dataSet.licence(this.licence);
            dataSet.landingPage(this.landingPage);
            dataSet.resources(this.resources);
            dataSet.dataFormats(this.dataFormats);
            dataSet.pricingDescription(this.pricingDescription);
            dataSet.spatialCoverage(this.spatialCoverage);
            dataSet.spatialResolution(this.spatialResolution);
            dataSet.geospatialExtent(this.geospatialExtent);
            dataSet.temporalCoverage(this.temporalCoverage);
            if (this.temporalResolution != null)
            dataSet.temporalResolution(DataSet.TemporalResolutionEnum.fromValue(this.temporalResolution));
            dataSet.accrualPeriodicity(this.accrualPeriodicity);
            dataSet.distributions(this.distributions);
            dataSet.issued(this.issued);
            dataSet.modified(this.modified);
            dataSet.keywords(this.keywords);
            dataSet.topics(this.topics);
            dataSet.workflowKeywords(this.workflowKeywords);
            dataSet.taxonomyKeywords(this.taxonomyKeywords);
            dataSet.category(this.category);
            if (this.visibility != null)
            dataSet.visibility(DataSet.VisibilityEnum.fromValue(this.visibility));
            dataSet.concepts(this.concepts);
            dataSet.dataSet(this.dataSet);
            dataSet.services(this.services);
            dataSet.sampleData(this.sampleData);
            dataSet.image(this.image);
            dataSet.coordinateReferenceSystemId(this.coordinateReferenceSystemId);
            dataSet.spatialRepresentationType(this.spatialRepresentationType);
            dataSet.lineage(this.lineage);
            dataSet.fromTemplate(this.fromTemplate);
            dataSet.contacts(this.contacts);
            dataSet.metadataContact(this.metadataContact);
            dataSet.publicContact(this.publicContact);
            dataSet.approvalForAccessNumber(this.approvalForAccessNumber);
            if (this.approvalForAccessStatus != null)
            dataSet.approvalForAccessStatus(DataSet.ApprovalForAccessStatusEnum.fromValue(this.approvalForAccessStatus));
            dataSet.language(this.language);
            dataSet.characterSet(this.characterSet);
            dataSet.hierarchyLevel(this.hierarchyLevel);
            dataSet.metadataLanguage(this.metadataLanguage);
            dataSet.metadataCharacterSet(this.metadataCharacterSet);
            dataSet.metadataStandardName(this.metadataStandardName);
            dataSet.metadataStandardVersion(this.metadataStandardVersion);
            dataSet.draftStatus(this.draftStatus);
            dataSet.draftNotes(this.draftNotes);
            dataSet.publishedStatus(this.publishedStatus);
            return dataSet;
        }

        /**
         * Execute updateSingleEntry request
         * @return DataSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public DataSet execute() throws ApiException {
            DataSet dataSet = buildBodyParams();
            ApiResponse<DataSet> localVarResp = updateSingleEntryWithHttpInfo(dataSetId, dataSet);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSingleEntry request with HTTP info returned
         * @return ApiResponse&lt;DataSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSet> executeWithHttpInfo() throws ApiException {
            DataSet dataSet = buildBodyParams();
            return updateSingleEntryWithHttpInfo(dataSetId, dataSet);
        }

        /**
         * Execute updateSingleEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSet> _callback) throws ApiException {
            DataSet dataSet = buildBodyParams();
            return updateSingleEntryAsync(dataSetId, dataSet, _callback);
        }
    }

    /**
     * Update a single data set catalog entry.
     * Updates a single catalog entry.
     * @param dataSetId  (required)
     * @param dataSet The updated data set information. (required)
     * @return UpdateSingleEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a single catalog entry for a data set. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSingleEntryRequestBuilder updateSingleEntry(String title, String description, EntryType entryType, UUID dataSetId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (entryType == null) throw new IllegalArgumentException("\"entryType\" is required but got null");
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new UpdateSingleEntryRequestBuilder(title, description, entryType, dataSetId);
    }
}
