/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OgcapiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OgcapiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OgcapiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call featuresQueryCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresQueryValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling featuresQuery(Async)");
        }

        return featuresQueryCall(datasetId, _callback);

    }


    private ApiResponse<String> featuresQueryWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = featuresQueryValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuresQueryAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresQueryValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturesQueryRequestBuilder {
        private final UUID datasetId;

        private FeaturesQueryRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for featuresQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuresQueryCall(datasetId, _callback);
        }


        /**
         * Execute featuresQuery request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = featuresQueryWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuresQuery request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return featuresQueryWithHttpInfo(datasetId);
        }

        /**
         * Execute featuresQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return featuresQueryAsync(datasetId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @return FeaturesQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesQueryRequestBuilder featuresQuery(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new FeaturesQueryRequestBuilder(datasetId);
    }
    private okhttp3.Call featuresQueryConformanceCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/conformance"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresQueryConformanceValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling featuresQueryConformance(Async)");
        }

        return featuresQueryConformanceCall(datasetId, _callback);

    }


    private ApiResponse<String> featuresQueryConformanceWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = featuresQueryConformanceValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuresQueryConformanceAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresQueryConformanceValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturesQueryConformanceRequestBuilder {
        private final UUID datasetId;

        private FeaturesQueryConformanceRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for featuresQueryConformance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuresQueryConformanceCall(datasetId, _callback);
        }


        /**
         * Execute featuresQueryConformance request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = featuresQueryConformanceWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuresQueryConformance request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return featuresQueryConformanceWithHttpInfo(datasetId);
        }

        /**
         * Execute featuresQueryConformance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return featuresQueryConformanceAsync(datasetId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @return FeaturesQueryConformanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesQueryConformanceRequestBuilder featuresQueryConformance(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new FeaturesQueryConformanceRequestBuilder(datasetId);
    }
    private okhttp3.Call featuresQueryOgcCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresQueryOgcValidateBeforeCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling featuresQueryOgc(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling featuresQueryOgc(Async)");
        }

        return featuresQueryOgcCall(datasetId, collectionId, _callback);

    }


    private ApiResponse<String> featuresQueryOgcWithHttpInfo(UUID datasetId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = featuresQueryOgcValidateBeforeCall(datasetId, collectionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuresQueryOgcAsync(UUID datasetId, String collectionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresQueryOgcValidateBeforeCall(datasetId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturesQueryOgcRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;

        private FeaturesQueryOgcRequestBuilder(UUID datasetId, String collectionId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for featuresQueryOgc
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuresQueryOgcCall(datasetId, collectionId, _callback);
        }


        /**
         * Execute featuresQueryOgc request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = featuresQueryOgcWithHttpInfo(datasetId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuresQueryOgc request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return featuresQueryOgcWithHttpInfo(datasetId, collectionId);
        }

        /**
         * Execute featuresQueryOgc request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return featuresQueryOgcAsync(datasetId, collectionId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @return FeaturesQueryOgcRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesQueryOgcRequestBuilder featuresQueryOgc(UUID datasetId, String collectionId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new FeaturesQueryOgcRequestBuilder(datasetId, collectionId);
    }
    private okhttp3.Call featuresQuery_0Call(UUID datasetId, String collectionId, String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items/{featureId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()))
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresQuery_0ValidateBeforeCall(UUID datasetId, String collectionId, String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling featuresQuery_0(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling featuresQuery_0(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling featuresQuery_0(Async)");
        }

        return featuresQuery_0Call(datasetId, collectionId, featureId, _callback);

    }


    private ApiResponse<String> featuresQuery_0WithHttpInfo(UUID datasetId, String collectionId, String featureId) throws ApiException {
        okhttp3.Call localVarCall = featuresQuery_0ValidateBeforeCall(datasetId, collectionId, featureId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuresQuery_0Async(UUID datasetId, String collectionId, String featureId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresQuery_0ValidateBeforeCall(datasetId, collectionId, featureId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturesQuery0RequestBuilder {
        private final UUID datasetId;
        private final String collectionId;
        private final String featureId;

        private FeaturesQuery0RequestBuilder(UUID datasetId, String collectionId, String featureId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
            this.featureId = featureId;
        }

        /**
         * Build call for featuresQuery_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuresQuery_0Call(datasetId, collectionId, featureId, _callback);
        }


        /**
         * Execute featuresQuery_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = featuresQuery_0WithHttpInfo(datasetId, collectionId, featureId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuresQuery_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return featuresQuery_0WithHttpInfo(datasetId, collectionId, featureId);
        }

        /**
         * Execute featuresQuery_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return featuresQuery_0Async(datasetId, collectionId, featureId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @param featureId  (required)
     * @return FeaturesQuery0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesQuery0RequestBuilder featuresQuery_0(UUID datasetId, String collectionId, String featureId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        if (featureId == null) throw new IllegalArgumentException("\"featureId\" is required but got null");
            

        return new FeaturesQuery0RequestBuilder(datasetId, collectionId, featureId);
    }
    private okhttp3.Call featuresQueryablesCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/queryables"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresQueryablesValidateBeforeCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling featuresQueryables(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling featuresQueryables(Async)");
        }

        return featuresQueryablesCall(datasetId, collectionId, _callback);

    }


    private ApiResponse<String> featuresQueryablesWithHttpInfo(UUID datasetId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = featuresQueryablesValidateBeforeCall(datasetId, collectionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call featuresQueryablesAsync(UUID datasetId, String collectionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresQueryablesValidateBeforeCall(datasetId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FeaturesQueryablesRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;

        private FeaturesQueryablesRequestBuilder(UUID datasetId, String collectionId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for featuresQueryables
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return featuresQueryablesCall(datasetId, collectionId, _callback);
        }


        /**
         * Execute featuresQueryables request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = featuresQueryablesWithHttpInfo(datasetId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute featuresQueryables request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return featuresQueryablesWithHttpInfo(datasetId, collectionId);
        }

        /**
         * Execute featuresQueryables request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return featuresQueryablesAsync(datasetId, collectionId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @return FeaturesQueryablesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesQueryablesRequestBuilder featuresQueryables(UUID datasetId, String collectionId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new FeaturesQueryablesRequestBuilder(datasetId, collectionId);
    }
    private okhttp3.Call getStyleForCssFileCall(String cssFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/apicss/{cssFile}"
            .replace("{" + "cssFile" + "}", localVarApiClient.escapeString(cssFile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStyleForCssFileValidateBeforeCall(String cssFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cssFile' is set
        if (cssFile == null) {
            throw new ApiException("Missing the required parameter 'cssFile' when calling getStyleForCssFile(Async)");
        }

        return getStyleForCssFileCall(cssFile, _callback);

    }


    private ApiResponse<Void> getStyleForCssFileWithHttpInfo(String cssFile) throws ApiException {
        okhttp3.Call localVarCall = getStyleForCssFileValidateBeforeCall(cssFile, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getStyleForCssFileAsync(String cssFile, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStyleForCssFileValidateBeforeCall(cssFile, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetStyleForCssFileRequestBuilder {
        private final String cssFile;

        private GetStyleForCssFileRequestBuilder(String cssFile) {
            this.cssFile = cssFile;
        }

        /**
         * Build call for getStyleForCssFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStyleForCssFileCall(cssFile, _callback);
        }


        /**
         * Execute getStyleForCssFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getStyleForCssFileWithHttpInfo(cssFile);
        }

        /**
         * Execute getStyleForCssFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getStyleForCssFileWithHttpInfo(cssFile);
        }

        /**
         * Execute getStyleForCssFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getStyleForCssFileAsync(cssFile, _callback);
        }
    }

    /**
     * OGC-API CSS
     * Get CSS files
     * @param cssFile  (required)
     * @return GetStyleForCssFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetStyleForCssFileRequestBuilder getStyleForCssFile(String cssFile) throws IllegalArgumentException {
        if (cssFile == null) throw new IllegalArgumentException("\"cssFile\" is required but got null");
            

        return new GetStyleForCssFileRequestBuilder(cssFile);
    }
    private okhttp3.Call getSwaggerFileCall(String swaggerFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/swagger-ui/{swaggerFile}"
            .replace("{" + "swaggerFile" + "}", localVarApiClient.escapeString(swaggerFile.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSwaggerFileValidateBeforeCall(String swaggerFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'swaggerFile' is set
        if (swaggerFile == null) {
            throw new ApiException("Missing the required parameter 'swaggerFile' when calling getSwaggerFile(Async)");
        }

        return getSwaggerFileCall(swaggerFile, _callback);

    }


    private ApiResponse<Void> getSwaggerFileWithHttpInfo(String swaggerFile) throws ApiException {
        okhttp3.Call localVarCall = getSwaggerFileValidateBeforeCall(swaggerFile, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getSwaggerFileAsync(String swaggerFile, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSwaggerFileValidateBeforeCall(swaggerFile, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetSwaggerFileRequestBuilder {
        private final String swaggerFile;

        private GetSwaggerFileRequestBuilder(String swaggerFile) {
            this.swaggerFile = swaggerFile;
        }

        /**
         * Build call for getSwaggerFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSwaggerFileCall(swaggerFile, _callback);
        }


        /**
         * Execute getSwaggerFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getSwaggerFileWithHttpInfo(swaggerFile);
        }

        /**
         * Execute getSwaggerFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getSwaggerFileWithHttpInfo(swaggerFile);
        }

        /**
         * Execute getSwaggerFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getSwaggerFileAsync(swaggerFile, _callback);
        }
    }

    /**
     * OGC-API-Features Swagger
     * Get swagger files
     * @param swaggerFile  (required)
     * @return GetSwaggerFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSwaggerFileRequestBuilder getSwaggerFile(String swaggerFile) throws IllegalArgumentException {
        if (swaggerFile == null) throw new IllegalArgumentException("\"swaggerFile\" is required but got null");
            

        return new GetSwaggerFileRequestBuilder(swaggerFile);
    }
    private okhttp3.Call queryFeaturesCollectionCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/collections"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFeaturesCollectionValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryFeaturesCollection(Async)");
        }

        return queryFeaturesCollectionCall(datasetId, _callback);

    }


    private ApiResponse<String> queryFeaturesCollectionWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryFeaturesCollectionValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryFeaturesCollectionAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFeaturesCollectionValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryFeaturesCollectionRequestBuilder {
        private final UUID datasetId;

        private QueryFeaturesCollectionRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryFeaturesCollection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryFeaturesCollectionCall(datasetId, _callback);
        }


        /**
         * Execute queryFeaturesCollection request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryFeaturesCollectionWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryFeaturesCollection request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryFeaturesCollectionWithHttpInfo(datasetId);
        }

        /**
         * Execute queryFeaturesCollection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryFeaturesCollectionAsync(datasetId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @return QueryFeaturesCollectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryFeaturesCollectionRequestBuilder queryFeaturesCollection(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryFeaturesCollectionRequestBuilder(datasetId);
    }
    private okhttp3.Call queryFeaturesCollectionItemsCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "collectionId" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFeaturesCollectionItemsValidateBeforeCall(UUID datasetId, String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryFeaturesCollectionItems(Async)");
        }

        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling queryFeaturesCollectionItems(Async)");
        }

        return queryFeaturesCollectionItemsCall(datasetId, collectionId, _callback);

    }


    private ApiResponse<String> queryFeaturesCollectionItemsWithHttpInfo(UUID datasetId, String collectionId) throws ApiException {
        okhttp3.Call localVarCall = queryFeaturesCollectionItemsValidateBeforeCall(datasetId, collectionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryFeaturesCollectionItemsAsync(UUID datasetId, String collectionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFeaturesCollectionItemsValidateBeforeCall(datasetId, collectionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryFeaturesCollectionItemsRequestBuilder {
        private final UUID datasetId;
        private final String collectionId;

        private QueryFeaturesCollectionItemsRequestBuilder(UUID datasetId, String collectionId) {
            this.datasetId = datasetId;
            this.collectionId = collectionId;
        }

        /**
         * Build call for queryFeaturesCollectionItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryFeaturesCollectionItemsCall(datasetId, collectionId, _callback);
        }


        /**
         * Execute queryFeaturesCollectionItems request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryFeaturesCollectionItemsWithHttpInfo(datasetId, collectionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryFeaturesCollectionItems request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryFeaturesCollectionItemsWithHttpInfo(datasetId, collectionId);
        }

        /**
         * Execute queryFeaturesCollectionItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryFeaturesCollectionItemsAsync(datasetId, collectionId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @param collectionId  (required)
     * @return QueryFeaturesCollectionItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryFeaturesCollectionItemsRequestBuilder queryFeaturesCollectionItems(UUID datasetId, String collectionId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (collectionId == null) throw new IllegalArgumentException("\"collectionId\" is required but got null");
            

        return new QueryFeaturesCollectionItemsRequestBuilder(datasetId, collectionId);
    }
    private okhttp3.Call queryFeaturesFunctionCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/functions"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFeaturesFunctionValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryFeaturesFunction(Async)");
        }

        return queryFeaturesFunctionCall(datasetId, _callback);

    }


    private ApiResponse<String> queryFeaturesFunctionWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryFeaturesFunctionValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryFeaturesFunctionAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFeaturesFunctionValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryFeaturesFunctionRequestBuilder {
        private final UUID datasetId;

        private QueryFeaturesFunctionRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryFeaturesFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryFeaturesFunctionCall(datasetId, _callback);
        }


        /**
         * Execute queryFeaturesFunction request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryFeaturesFunctionWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryFeaturesFunction request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryFeaturesFunctionWithHttpInfo(datasetId);
        }

        /**
         * Execute queryFeaturesFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryFeaturesFunctionAsync(datasetId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @return QueryFeaturesFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryFeaturesFunctionRequestBuilder queryFeaturesFunction(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryFeaturesFunctionRequestBuilder(datasetId);
    }
    private okhttp3.Call queryFeaturesOpenapiCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/ogc/features/v1/openapi"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryFeaturesOpenapiValidateBeforeCall(UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling queryFeaturesOpenapi(Async)");
        }

        return queryFeaturesOpenapiCall(datasetId, _callback);

    }


    private ApiResponse<String> queryFeaturesOpenapiWithHttpInfo(UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = queryFeaturesOpenapiValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryFeaturesOpenapiAsync(UUID datasetId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryFeaturesOpenapiValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryFeaturesOpenapiRequestBuilder {
        private final UUID datasetId;

        private QueryFeaturesOpenapiRequestBuilder(UUID datasetId) {
            this.datasetId = datasetId;
        }

        /**
         * Build call for queryFeaturesOpenapi
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryFeaturesOpenapiCall(datasetId, _callback);
        }


        /**
         * Execute queryFeaturesOpenapi request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = queryFeaturesOpenapiWithHttpInfo(datasetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryFeaturesOpenapi request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return queryFeaturesOpenapiWithHttpInfo(datasetId);
        }

        /**
         * Execute queryFeaturesOpenapi request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return queryFeaturesOpenapiAsync(datasetId, _callback);
        }
    }

    /**
     * OGC-API-Features query
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @param datasetId  (required)
     * @return QueryFeaturesOpenapiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QueryFeaturesOpenapiRequestBuilder queryFeaturesOpenapi(UUID datasetId) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new QueryFeaturesOpenapiRequestBuilder(datasetId);
    }
}
