/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Billable;
import com.konfigthis.client.model.ManageDatasetIngestFileNewLayerRequest;
import com.konfigthis.client.model.ManageLayerIngestFileRequest;
import com.konfigthis.client.model.NewLayers;
import com.konfigthis.client.model.ServiceDefinition;
import com.konfigthis.client.model.ServiceDefinitionResponse;
import com.konfigthis.client.model.ServiceDefinitionUpdateExistingDefinitionRequest;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDefinitionCall(ServiceDefinition serviceDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceDefinition;

        // create path and map variables
        String localVarPath = "/serviceDefinition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDefinitionValidateBeforeCall(ServiceDefinition serviceDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceDefinition' is set
        if (serviceDefinition == null) {
            throw new ApiException("Missing the required parameter 'serviceDefinition' when calling createNewDefinition(Async)");
        }

        return createNewDefinitionCall(serviceDefinition, _callback);

    }


    private ApiResponse<ServiceDefinitionResponse> createNewDefinitionWithHttpInfo(ServiceDefinition serviceDefinition) throws ApiException {
        okhttp3.Call localVarCall = createNewDefinitionValidateBeforeCall(serviceDefinition, null);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDefinitionAsync(ServiceDefinition serviceDefinition, final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDefinitionValidateBeforeCall(serviceDefinition, _callback);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDefinitionRequestBuilder {
        private final String datasetId;
        private final String layerName;
        private final String service;
        private final String WFS;
        private final String WCS;
        private final String WMS;
        private final String WMTS;
        private final String ogCApiFeatures;
        private final String ogCApiTiles;
        private Boolean temporal;
        private String datastore;
        private String geoserverHostName;
        private String geometryField;
        private Billable billable;
        private Double defaultEPSGCode;

        private CreateNewDefinitionRequestBuilder(String datasetId, String layerName, String service, String WFS, String WCS, String WMS, String WMTS, String ogCApiFeatures, String ogCApiTiles) {
            this.datasetId = datasetId;
            this.layerName = layerName;
            this.service = service;
            this.WFS = WFS;
            this.WCS = WCS;
            this.WMS = WMS;
            this.WMTS = WMTS;
            this.ogCApiFeatures = ogCApiFeatures;
            this.ogCApiTiles = ogCApiTiles;
        }

        /**
         * Set temporal
         * @param temporal  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder temporal(Boolean temporal) {
            this.temporal = temporal;
            return this;
        }
        
        /**
         * Set datastore
         * @param datastore  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder datastore(String datastore) {
            this.datastore = datastore;
            return this;
        }
        
        /**
         * Set geoserverHostName
         * @param geoserverHostName  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder geoserverHostName(String geoserverHostName) {
            this.geoserverHostName = geoserverHostName;
            return this;
        }
        
        /**
         * Set geometryField
         * @param geometryField  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder geometryField(String geometryField) {
            this.geometryField = geometryField;
            return this;
        }
        
        /**
         * Set billable
         * @param billable  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder billable(Billable billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set defaultEPSGCode
         * @param defaultEPSGCode  (optional)
         * @return CreateNewDefinitionRequestBuilder
         */
        public CreateNewDefinitionRequestBuilder defaultEPSGCode(Double defaultEPSGCode) {
            this.defaultEPSGCode = defaultEPSGCode;
            return this;
        }
        
        /**
         * Build call for createNewDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Created new service definition. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceDefinition serviceDefinition = buildBodyParams();
            return createNewDefinitionCall(serviceDefinition, _callback);
        }

        private ServiceDefinition buildBodyParams() {
            ServiceDefinition serviceDefinition = new ServiceDefinition();
            serviceDefinition.datasetId(this.datasetId);
            serviceDefinition.layerName(this.layerName);
            if (this.service != null)
            serviceDefinition.service(ServiceDefinition.ServiceEnum.fromValue(this.service));
            if (this.WFS != null)
            serviceDefinition.WFS(ServiceDefinition.WFSEnum.fromValue(this.WFS));
            if (this.WCS != null)
            serviceDefinition.WCS(ServiceDefinition.WCSEnum.fromValue(this.WCS));
            if (this.WMS != null)
            serviceDefinition.WMS(ServiceDefinition.WMSEnum.fromValue(this.WMS));
            if (this.WMTS != null)
            serviceDefinition.WMTS(ServiceDefinition.WMTSEnum.fromValue(this.WMTS));
            if (this.ogCApiFeatures != null)
            serviceDefinition.ogCApiFeatures(ServiceDefinition.OgCApiFeaturesEnum.fromValue(this.ogCApiFeatures));
            if (this.ogCApiTiles != null)
            serviceDefinition.ogCApiTiles(ServiceDefinition.OgCApiTilesEnum.fromValue(this.ogCApiTiles));
            serviceDefinition.temporal(this.temporal);
            serviceDefinition.datastore(this.datastore);
            serviceDefinition.geoserverHostName(this.geoserverHostName);
            serviceDefinition.geometryField(this.geometryField);
            serviceDefinition.billable(this.billable);
            serviceDefinition.defaultEPSGCode(this.defaultEPSGCode);
            return serviceDefinition;
        }

        /**
         * Execute createNewDefinition request
         * @return ServiceDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Created new service definition. </td><td>  -  </td></tr>
         </table>
         */
        public ServiceDefinitionResponse execute() throws ApiException {
            ServiceDefinition serviceDefinition = buildBodyParams();
            ApiResponse<ServiceDefinitionResponse> localVarResp = createNewDefinitionWithHttpInfo(serviceDefinition);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDefinition request with HTTP info returned
         * @return ApiResponse&lt;ServiceDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Created new service definition. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ServiceDefinitionResponse> executeWithHttpInfo() throws ApiException {
            ServiceDefinition serviceDefinition = buildBodyParams();
            return createNewDefinitionWithHttpInfo(serviceDefinition);
        }

        /**
         * Execute createNewDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Created new service definition. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {
            ServiceDefinition serviceDefinition = buildBodyParams();
            return createNewDefinitionAsync(serviceDefinition, _callback);
        }
    }

    /**
     * Create new service definition
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
     * @param serviceDefinition  (required)
     * @return CreateNewDefinitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. Created new service definition. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDefinitionRequestBuilder createNewDefinition(String datasetId, String layerName, String service, String WFS, String WCS, String WMS, String WMTS, String ogCApiFeatures, String ogCApiTiles) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (layerName == null) throw new IllegalArgumentException("\"layerName\" is required but got null");
            

        if (service == null) throw new IllegalArgumentException("\"service\" is required but got null");
            

        if (WFS == null) throw new IllegalArgumentException("\"WFS\" is required but got null");
            

        if (WCS == null) throw new IllegalArgumentException("\"WCS\" is required but got null");
            

        if (WMS == null) throw new IllegalArgumentException("\"WMS\" is required but got null");
            

        if (WMTS == null) throw new IllegalArgumentException("\"WMTS\" is required but got null");
            

        if (ogCApiFeatures == null) throw new IllegalArgumentException("\"ogCApiFeatures\" is required but got null");
            

        if (ogCApiTiles == null) throw new IllegalArgumentException("\"ogCApiTiles\" is required but got null");
            

        return new CreateNewDefinitionRequestBuilder(datasetId, layerName, service, WFS, WCS, WMS, WMTS, ogCApiFeatures, ogCApiTiles);
    }
    private okhttp3.Call deleteByIdCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceDefinition/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling deleteById(Async)");
        }

        return deleteByIdCall(layerId, _callback);

    }


    private ApiResponse<Void> deleteByIdWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(layerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdAsync(UUID layerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(layerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final UUID layerId;

        private DeleteByIdRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(layerId, _callback);
        }


        /**
         * Execute deleteById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdWithHttpInfo(layerId);
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(layerId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdAsync(layerId, _callback);
        }
    }

    /**
     * Delete service definition
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
     * @param layerId  (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new DeleteByIdRequestBuilder(layerId);
    }
    private okhttp3.Call deleteLayerCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLayerValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling deleteLayer(Async)");
        }

        return deleteLayerCall(layerId, _callback);

    }


    private ApiResponse<Void> deleteLayerWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = deleteLayerValidateBeforeCall(layerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLayerAsync(UUID layerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLayerValidateBeforeCall(layerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLayerRequestBuilder {
        private final UUID layerId;

        private DeleteLayerRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for deleteLayer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLayerCall(layerId, _callback);
        }


        /**
         * Execute deleteLayer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLayerWithHttpInfo(layerId);
        }

        /**
         * Execute deleteLayer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLayerWithHttpInfo(layerId);
        }

        /**
         * Execute deleteLayer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLayerAsync(layerId, _callback);
        }
    }

    /**
     * Delete layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
     * @param layerId  (required)
     * @return DeleteLayerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. Layer Deleted. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLayerRequestBuilder deleteLayer(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new DeleteLayerRequestBuilder(layerId);
    }
    private okhttp3.Call getByLayerIdCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/serviceDefinition/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLayerIdValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling getByLayerId(Async)");
        }

        return getByLayerIdCall(layerId, _callback);

    }


    private ApiResponse<ServiceDefinitionResponse> getByLayerIdWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = getByLayerIdValidateBeforeCall(layerId, null);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByLayerIdAsync(UUID layerId, final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLayerIdValidateBeforeCall(layerId, _callback);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByLayerIdRequestBuilder {
        private final UUID layerId;

        private GetByLayerIdRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for getByLayerId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByLayerIdCall(layerId, _callback);
        }


        /**
         * Execute getByLayerId request
         * @return ServiceDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
         </table>
         */
        public ServiceDefinitionResponse execute() throws ApiException {
            ApiResponse<ServiceDefinitionResponse> localVarResp = getByLayerIdWithHttpInfo(layerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByLayerId request with HTTP info returned
         * @return ApiResponse&lt;ServiceDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ServiceDefinitionResponse> executeWithHttpInfo() throws ApiException {
            return getByLayerIdWithHttpInfo(layerId);
        }

        /**
         * Execute getByLayerId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {
            return getByLayerIdAsync(layerId, _callback);
        }
    }

    /**
     * Get service definition
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
     * @param layerId  (required)
     * @return GetByLayerIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public GetByLayerIdRequestBuilder getByLayerId(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new GetByLayerIdRequestBuilder(layerId);
    }
    private okhttp3.Call ingestFileCall(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageLayerIngestFileRequest;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/ingest"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestFileValidateBeforeCall(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling ingestFile(Async)");
        }

        // verify the required parameter 'manageLayerIngestFileRequest' is set
        if (manageLayerIngestFileRequest == null) {
            throw new ApiException("Missing the required parameter 'manageLayerIngestFileRequest' when calling ingestFile(Async)");
        }

        return ingestFileCall(layerId, manageLayerIngestFileRequest, _callback);

    }


    private ApiResponse<Void> ingestFileWithHttpInfo(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest) throws ApiException {
        okhttp3.Call localVarCall = ingestFileValidateBeforeCall(layerId, manageLayerIngestFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call ingestFileAsync(UUID layerId, ManageLayerIngestFileRequest manageLayerIngestFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestFileValidateBeforeCall(layerId, manageLayerIngestFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class IngestFileRequestBuilder {
        private final String fileId;
        private final UUID layerId;
        private String fileName;
        private String datetime;

        private IngestFileRequestBuilder(String fileId, UUID layerId) {
            this.fileId = fileId;
            this.layerId = layerId;
        }

        /**
         * Set fileName
         * @param fileName  (optional)
         * @return IngestFileRequestBuilder
         */
        public IngestFileRequestBuilder fileName(String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        /**
         * Set datetime
         * @param datetime  (optional)
         * @return IngestFileRequestBuilder
         */
        public IngestFileRequestBuilder datetime(String datetime) {
            this.datetime = datetime;
            return this;
        }
        
        /**
         * Build call for ingestFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileCall(layerId, manageLayerIngestFileRequest, _callback);
        }

        private ManageLayerIngestFileRequest buildBodyParams() {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = new ManageLayerIngestFileRequest();
            manageLayerIngestFileRequest.fileId(this.fileId);
            manageLayerIngestFileRequest.fileName(this.fileName);
            manageLayerIngestFileRequest.datetime(this.datetime);
            return manageLayerIngestFileRequest;
        }

        /**
         * Execute ingestFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            ingestFileWithHttpInfo(layerId, manageLayerIngestFileRequest);
        }

        /**
         * Execute ingestFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileWithHttpInfo(layerId, manageLayerIngestFileRequest);
        }

        /**
         * Execute ingestFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ManageLayerIngestFileRequest manageLayerIngestFileRequest = buildBodyParams();
            return ingestFileAsync(layerId, manageLayerIngestFileRequest, _callback);
        }
    }

    /**
     * Ingest a file to a layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
     * @param layerId  (required)
     * @param manageLayerIngestFileRequest  (required)
     * @return IngestFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Tile ingested correctly. </td><td>  -  </td></tr>
     </table>
     */
    public IngestFileRequestBuilder ingestFile(String fileId, UUID layerId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new IngestFileRequestBuilder(fileId, layerId);
    }
    private okhttp3.Call ingestFileNewLayerCall(UUID datasetId, ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageDatasetIngestFileNewLayerRequest;

        // create path and map variables
        String localVarPath = "/datasets/{datasetId}/layers"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestFileNewLayerValidateBeforeCall(UUID datasetId, ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling ingestFileNewLayer(Async)");
        }

        // verify the required parameter 'manageDatasetIngestFileNewLayerRequest' is set
        if (manageDatasetIngestFileNewLayerRequest == null) {
            throw new ApiException("Missing the required parameter 'manageDatasetIngestFileNewLayerRequest' when calling ingestFileNewLayer(Async)");
        }

        return ingestFileNewLayerCall(datasetId, manageDatasetIngestFileNewLayerRequest, _callback);

    }


    private ApiResponse<NewLayers> ingestFileNewLayerWithHttpInfo(UUID datasetId, ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest) throws ApiException {
        okhttp3.Call localVarCall = ingestFileNewLayerValidateBeforeCall(datasetId, manageDatasetIngestFileNewLayerRequest, null);
        Type localVarReturnType = new TypeToken<NewLayers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ingestFileNewLayerAsync(UUID datasetId, ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest, final ApiCallback<NewLayers> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestFileNewLayerValidateBeforeCall(datasetId, manageDatasetIngestFileNewLayerRequest, _callback);
        Type localVarReturnType = new TypeToken<NewLayers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IngestFileNewLayerRequestBuilder {
        private final String fileUri;
        private final UUID datasetId;

        private IngestFileNewLayerRequestBuilder(String fileUri, UUID datasetId) {
            this.fileUri = fileUri;
            this.datasetId = datasetId;
        }

        /**
         * Build call for ingestFileNewLayer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Layer Created. File ingested correctly and new layer created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest = buildBodyParams();
            return ingestFileNewLayerCall(datasetId, manageDatasetIngestFileNewLayerRequest, _callback);
        }

        private ManageDatasetIngestFileNewLayerRequest buildBodyParams() {
            ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest = new ManageDatasetIngestFileNewLayerRequest();
            manageDatasetIngestFileNewLayerRequest.fileUri(this.fileUri);
            return manageDatasetIngestFileNewLayerRequest;
        }

        /**
         * Execute ingestFileNewLayer request
         * @return NewLayers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Layer Created. File ingested correctly and new layer created. </td><td>  -  </td></tr>
         </table>
         */
        public NewLayers execute() throws ApiException {
            ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest = buildBodyParams();
            ApiResponse<NewLayers> localVarResp = ingestFileNewLayerWithHttpInfo(datasetId, manageDatasetIngestFileNewLayerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute ingestFileNewLayer request with HTTP info returned
         * @return ApiResponse&lt;NewLayers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Layer Created. File ingested correctly and new layer created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NewLayers> executeWithHttpInfo() throws ApiException {
            ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest = buildBodyParams();
            return ingestFileNewLayerWithHttpInfo(datasetId, manageDatasetIngestFileNewLayerRequest);
        }

        /**
         * Execute ingestFileNewLayer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successful. Layer Created. File ingested correctly and new layer created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewLayers> _callback) throws ApiException {
            ManageDatasetIngestFileNewLayerRequest manageDatasetIngestFileNewLayerRequest = buildBodyParams();
            return ingestFileNewLayerAsync(datasetId, manageDatasetIngestFileNewLayerRequest, _callback);
        }
    }

    /**
     * Ingest file to new layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
     * @param datasetId  (required)
     * @param manageDatasetIngestFileNewLayerRequest  (required)
     * @return IngestFileNewLayerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful. Layer Created. File ingested correctly and new layer created. </td><td>  -  </td></tr>
     </table>
     */
    public IngestFileNewLayerRequestBuilder ingestFileNewLayer(String fileUri, UUID datasetId) throws IllegalArgumentException {
        if (fileUri == null) throw new IllegalArgumentException("\"fileUri\" is required but got null");
            

        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        return new IngestFileNewLayerRequestBuilder(fileUri, datasetId);
    }
    private okhttp3.Call removeFileCall(UUID layerId, URI fileUri, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/files"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileUri", fileUri));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileValidateBeforeCall(UUID layerId, URI fileUri, String filename, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling removeFile(Async)");
        }

        return removeFileCall(layerId, fileUri, filename, _callback);

    }


    private ApiResponse<Void> removeFileWithHttpInfo(UUID layerId, URI fileUri, String filename) throws ApiException {
        okhttp3.Call localVarCall = removeFileValidateBeforeCall(layerId, fileUri, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileAsync(UUID layerId, URI fileUri, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileValidateBeforeCall(layerId, fileUri, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileRequestBuilder {
        private final UUID layerId;
        private URI fileUri;
        private String filename;

        private RemoveFileRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set fileUri
         * @param fileUri  (optional)
         * @return RemoveFileRequestBuilder
         */
        public RemoveFileRequestBuilder fileUri(URI fileUri) {
            this.fileUri = fileUri;
            return this;
        }
        
        /**
         * Set filename
         * @param filename  (optional)
         * @return RemoveFileRequestBuilder
         */
        public RemoveFileRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for removeFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileCall(layerId, fileUri, filename, _callback);
        }


        /**
         * Execute removeFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileWithHttpInfo(layerId, fileUri, filename);
        }

        /**
         * Execute removeFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileWithHttpInfo(layerId, fileUri, filename);
        }

        /**
         * Execute removeFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileAsync(layerId, fileUri, filename, _callback);
        }
    }

    /**
     * Delete a file from a layer
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
     * @param layerId  (required)
     * @return RemoveFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileRequestBuilder removeFile(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new RemoveFileRequestBuilder(layerId);
    }
    private okhttp3.Call updateExistingDefinitionCall(UUID layerId, ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceDefinitionUpdateExistingDefinitionRequest;

        // create path and map variables
        String localVarPath = "/serviceDefinition/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingDefinitionValidateBeforeCall(UUID layerId, ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling updateExistingDefinition(Async)");
        }

        return updateExistingDefinitionCall(layerId, serviceDefinitionUpdateExistingDefinitionRequest, _callback);

    }


    private ApiResponse<ServiceDefinitionResponse> updateExistingDefinitionWithHttpInfo(UUID layerId, ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateExistingDefinitionValidateBeforeCall(layerId, serviceDefinitionUpdateExistingDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingDefinitionAsync(UUID layerId, ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest, final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingDefinitionValidateBeforeCall(layerId, serviceDefinitionUpdateExistingDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingDefinitionRequestBuilder {
        private final UUID layerId;
        private Billable billable;
        private Double defaultEPSGCode;

        private UpdateExistingDefinitionRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set billable
         * @param billable  (optional)
         * @return UpdateExistingDefinitionRequestBuilder
         */
        public UpdateExistingDefinitionRequestBuilder billable(Billable billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set defaultEPSGCode
         * @param defaultEPSGCode  (optional)
         * @return UpdateExistingDefinitionRequestBuilder
         */
        public UpdateExistingDefinitionRequestBuilder defaultEPSGCode(Double defaultEPSGCode) {
            this.defaultEPSGCode = defaultEPSGCode;
            return this;
        }
        
        /**
         * Build call for updateExistingDefinition
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Edited service definition. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest = buildBodyParams();
            return updateExistingDefinitionCall(layerId, serviceDefinitionUpdateExistingDefinitionRequest, _callback);
        }

        private ServiceDefinitionUpdateExistingDefinitionRequest buildBodyParams() {
            ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest = new ServiceDefinitionUpdateExistingDefinitionRequest();
            serviceDefinitionUpdateExistingDefinitionRequest.billable(this.billable);
            serviceDefinitionUpdateExistingDefinitionRequest.defaultEPSGCode(this.defaultEPSGCode);
            return serviceDefinitionUpdateExistingDefinitionRequest;
        }

        /**
         * Execute updateExistingDefinition request
         * @return ServiceDefinitionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Edited service definition. </td><td>  -  </td></tr>
         </table>
         */
        public ServiceDefinitionResponse execute() throws ApiException {
            ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest = buildBodyParams();
            ApiResponse<ServiceDefinitionResponse> localVarResp = updateExistingDefinitionWithHttpInfo(layerId, serviceDefinitionUpdateExistingDefinitionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingDefinition request with HTTP info returned
         * @return ApiResponse&lt;ServiceDefinitionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Edited service definition. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ServiceDefinitionResponse> executeWithHttpInfo() throws ApiException {
            ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest = buildBodyParams();
            return updateExistingDefinitionWithHttpInfo(layerId, serviceDefinitionUpdateExistingDefinitionRequest);
        }

        /**
         * Execute updateExistingDefinition request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Edited service definition. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ServiceDefinitionResponse> _callback) throws ApiException {
            ServiceDefinitionUpdateExistingDefinitionRequest serviceDefinitionUpdateExistingDefinitionRequest = buildBodyParams();
            return updateExistingDefinitionAsync(layerId, serviceDefinitionUpdateExistingDefinitionRequest, _callback);
        }
    }

    /**
     * Update service definition
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
     * @param layerId  (required)
     * @return UpdateExistingDefinitionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Edited service definition. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingDefinitionRequestBuilder updateExistingDefinition(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new UpdateExistingDefinitionRequestBuilder(layerId);
    }
}
