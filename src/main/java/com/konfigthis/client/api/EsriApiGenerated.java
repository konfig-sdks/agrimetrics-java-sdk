/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EsriApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EsriApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EsriApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call restServiceQueryCall(UUID datasetId, String paramOne, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/services/{datasetId}/{paramOne}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "paramOne" + "}", localVarApiClient.escapeString(paramOne.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restServiceQueryValidateBeforeCall(UUID datasetId, String paramOne, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling restServiceQuery(Async)");
        }

        // verify the required parameter 'paramOne' is set
        if (paramOne == null) {
            throw new ApiException("Missing the required parameter 'paramOne' when calling restServiceQuery(Async)");
        }

        return restServiceQueryCall(datasetId, paramOne, _callback);

    }


    private ApiResponse<String> restServiceQueryWithHttpInfo(UUID datasetId, String paramOne) throws ApiException {
        okhttp3.Call localVarCall = restServiceQueryValidateBeforeCall(datasetId, paramOne, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restServiceQueryAsync(UUID datasetId, String paramOne, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = restServiceQueryValidateBeforeCall(datasetId, paramOne, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestServiceQueryRequestBuilder {
        private final UUID datasetId;
        private final String paramOne;

        private RestServiceQueryRequestBuilder(UUID datasetId, String paramOne) {
            this.datasetId = datasetId;
            this.paramOne = paramOne;
        }

        /**
         * Build call for restServiceQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restServiceQueryCall(datasetId, paramOne, _callback);
        }


        /**
         * Execute restServiceQuery request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = restServiceQueryWithHttpInfo(datasetId, paramOne);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restServiceQuery request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return restServiceQueryWithHttpInfo(datasetId, paramOne);
        }

        /**
         * Execute restServiceQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return restServiceQueryAsync(datasetId, paramOne, _callback);
        }
    }

    /**
     * ESRI REST Service query
     * Query the given dataset using ESRI Rest Services 
     * @param datasetId  (required)
     * @param paramOne Additional path element (required)
     * @return RestServiceQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestServiceQueryRequestBuilder restServiceQuery(UUID datasetId, String paramOne) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (paramOne == null) throw new IllegalArgumentException("\"paramOne\" is required but got null");
            

        return new RestServiceQueryRequestBuilder(datasetId, paramOne);
    }
    private okhttp3.Call restServiceQuery_0Call(UUID datasetId, String paramOne, String paramTwo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/services/{datasetId}/{paramOne}/{paramTwo}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "paramOne" + "}", localVarApiClient.escapeString(paramOne.toString()))
            .replace("{" + "paramTwo" + "}", localVarApiClient.escapeString(paramTwo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restServiceQuery_0ValidateBeforeCall(UUID datasetId, String paramOne, String paramTwo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling restServiceQuery_0(Async)");
        }

        // verify the required parameter 'paramOne' is set
        if (paramOne == null) {
            throw new ApiException("Missing the required parameter 'paramOne' when calling restServiceQuery_0(Async)");
        }

        // verify the required parameter 'paramTwo' is set
        if (paramTwo == null) {
            throw new ApiException("Missing the required parameter 'paramTwo' when calling restServiceQuery_0(Async)");
        }

        return restServiceQuery_0Call(datasetId, paramOne, paramTwo, _callback);

    }


    private ApiResponse<String> restServiceQuery_0WithHttpInfo(UUID datasetId, String paramOne, String paramTwo) throws ApiException {
        okhttp3.Call localVarCall = restServiceQuery_0ValidateBeforeCall(datasetId, paramOne, paramTwo, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restServiceQuery_0Async(UUID datasetId, String paramOne, String paramTwo, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = restServiceQuery_0ValidateBeforeCall(datasetId, paramOne, paramTwo, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestServiceQuery0RequestBuilder {
        private final UUID datasetId;
        private final String paramOne;
        private final String paramTwo;

        private RestServiceQuery0RequestBuilder(UUID datasetId, String paramOne, String paramTwo) {
            this.datasetId = datasetId;
            this.paramOne = paramOne;
            this.paramTwo = paramTwo;
        }

        /**
         * Build call for restServiceQuery_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restServiceQuery_0Call(datasetId, paramOne, paramTwo, _callback);
        }


        /**
         * Execute restServiceQuery_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = restServiceQuery_0WithHttpInfo(datasetId, paramOne, paramTwo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restServiceQuery_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return restServiceQuery_0WithHttpInfo(datasetId, paramOne, paramTwo);
        }

        /**
         * Execute restServiceQuery_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return restServiceQuery_0Async(datasetId, paramOne, paramTwo, _callback);
        }
    }

    /**
     * ESRI REST Service query
     * Query the given dataset using ESRI Rest Services 
     * @param datasetId  (required)
     * @param paramOne Additional path element (required)
     * @param paramTwo Additional path element (required)
     * @return RestServiceQuery0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestServiceQuery0RequestBuilder restServiceQuery_0(UUID datasetId, String paramOne, String paramTwo) throws IllegalArgumentException {
        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (paramOne == null) throw new IllegalArgumentException("\"paramOne\" is required but got null");
            

        if (paramTwo == null) throw new IllegalArgumentException("\"paramTwo\" is required but got null");
            

        return new RestServiceQuery0RequestBuilder(datasetId, paramOne, paramTwo);
    }
}
