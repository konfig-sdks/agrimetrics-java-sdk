/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BatchIdentityInputEntitlementsInner;
import com.konfigthis.client.model.DataSetPatch;
import com.konfigthis.client.model.DataSetTemplateEntity;
import com.konfigthis.client.model.DataSetTemplateMetadata;
import com.konfigthis.client.model.DataSetTemplatePatchMetadata;
import com.konfigthis.client.model.Entitlements;
import com.konfigthis.client.model.EntryUpdateResponse;
import com.konfigthis.client.model.Exchange;
import com.konfigthis.client.model.TemplateListPermissionsToViewResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCatalogEntryCall(DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSetTemplateMetadata;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCatalogEntryValidateBeforeCall(DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback _callback) throws ApiException {
        return createCatalogEntryCall(dataSetTemplateMetadata, _callback);

    }


    private ApiResponse<EntryUpdateResponse> createCatalogEntryWithHttpInfo(DataSetTemplateMetadata dataSetTemplateMetadata) throws ApiException {
        okhttp3.Call localVarCall = createCatalogEntryValidateBeforeCall(dataSetTemplateMetadata, null);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCatalogEntryAsync(DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCatalogEntryValidateBeforeCall(dataSetTemplateMetadata, _callback);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCatalogEntryRequestBuilder {
        private final String name;
        private String description;
        private DataSetPatch dataSet;
        private List<BatchIdentityInputEntitlementsInner> entitlements;
        private Entitlements creatorEntitlements;
        private Exchange exchange;

        private CreateCatalogEntryRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateCatalogEntryRequestBuilder
         */
        public CreateCatalogEntryRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set dataSet
         * @param dataSet  (optional)
         * @return CreateCatalogEntryRequestBuilder
         */
        public CreateCatalogEntryRequestBuilder dataSet(DataSetPatch dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        
        /**
         * Set entitlements
         * @param entitlements  (optional)
         * @return CreateCatalogEntryRequestBuilder
         */
        public CreateCatalogEntryRequestBuilder entitlements(List<BatchIdentityInputEntitlementsInner> entitlements) {
            this.entitlements = entitlements;
            return this;
        }
        
        /**
         * Set creatorEntitlements
         * @param creatorEntitlements  (optional)
         * @return CreateCatalogEntryRequestBuilder
         */
        public CreateCatalogEntryRequestBuilder creatorEntitlements(Entitlements creatorEntitlements) {
            this.creatorEntitlements = creatorEntitlements;
            return this;
        }
        
        /**
         * Set exchange
         * @param exchange  (optional)
         * @return CreateCatalogEntryRequestBuilder
         */
        public CreateCatalogEntryRequestBuilder exchange(Exchange exchange) {
            this.exchange = exchange;
            return this;
        }
        
        /**
         * Build call for createCatalogEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return createCatalogEntryCall(dataSetTemplateMetadata, _callback);
        }

        private DataSetTemplateMetadata buildBodyParams() {
            DataSetTemplateMetadata dataSetTemplateMetadata = new DataSetTemplateMetadata();
            dataSetTemplateMetadata.description(this.description);
            dataSetTemplateMetadata.name(this.name);
            dataSetTemplateMetadata.dataSet(this.dataSet);
            dataSetTemplateMetadata.entitlements(this.entitlements);
            dataSetTemplateMetadata.creatorEntitlements(this.creatorEntitlements);
            dataSetTemplateMetadata.exchange(this.exchange);
            return dataSetTemplateMetadata;
        }

        /**
         * Execute createCatalogEntry request
         * @return EntryUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a template. </td><td>  -  </td></tr>
         </table>
         */
        public EntryUpdateResponse execute() throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            ApiResponse<EntryUpdateResponse> localVarResp = createCatalogEntryWithHttpInfo(dataSetTemplateMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCatalogEntry request with HTTP info returned
         * @return ApiResponse&lt;EntryUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a template. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntryUpdateResponse> executeWithHttpInfo() throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return createCatalogEntryWithHttpInfo(dataSetTemplateMetadata);
        }

        /**
         * Execute createCatalogEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Creates a single catalog entry for a template. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return createCatalogEntryAsync(dataSetTemplateMetadata, _callback);
        }
    }

    /**
     * Create a new template for creating catalogue entries.
     * Creates a single template that can be used to create similar catalogue entries.
     * @return CreateCatalogEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creates a single catalog entry for a template. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCatalogEntryRequestBuilder createCatalogEntry(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateCatalogEntryRequestBuilder(name);
    }
    private okhttp3.Call deleteSpecificTemplateCall(UUID templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpecificTemplateValidateBeforeCall(UUID templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteSpecificTemplate(Async)");
        }

        return deleteSpecificTemplateCall(templateId, _callback);

    }


    private ApiResponse<EntryUpdateResponse> deleteSpecificTemplateWithHttpInfo(UUID templateId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpecificTemplateValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSpecificTemplateAsync(UUID templateId, final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpecificTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<EntryUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSpecificTemplateRequestBuilder {
        private final UUID templateId;

        private DeleteSpecificTemplateRequestBuilder(UUID templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for deleteSpecificTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSpecificTemplateCall(templateId, _callback);
        }


        /**
         * Execute deleteSpecificTemplate request
         * @return EntryUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public EntryUpdateResponse execute() throws ApiException {
            ApiResponse<EntryUpdateResponse> localVarResp = deleteSpecificTemplateWithHttpInfo(templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSpecificTemplate request with HTTP info returned
         * @return ApiResponse&lt;EntryUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntryUpdateResponse> executeWithHttpInfo() throws ApiException {
            return deleteSpecificTemplateWithHttpInfo(templateId);
        }

        /**
         * Execute deleteSpecificTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntryUpdateResponse> _callback) throws ApiException {
            return deleteSpecificTemplateAsync(templateId, _callback);
        }
    }

    /**
     * Delete a specific template
     * 
     * @param templateId  (required)
     * @return DeleteSpecificTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creates a single catalog entry for a data set. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSpecificTemplateRequestBuilder deleteSpecificTemplate(UUID templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new DeleteSpecificTemplateRequestBuilder(templateId);
    }
    private okhttp3.Call getSpecificTemplateCall(UUID templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificTemplateValidateBeforeCall(UUID templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getSpecificTemplate(Async)");
        }

        return getSpecificTemplateCall(templateId, _callback);

    }


    private ApiResponse<DataSetTemplateEntity> getSpecificTemplateWithHttpInfo(UUID templateId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificTemplateValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificTemplateAsync(UUID templateId, final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificTemplateRequestBuilder {
        private final UUID templateId;

        private GetSpecificTemplateRequestBuilder(UUID templateId) {
            this.templateId = templateId;
        }

        /**
         * Build call for getSpecificTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificTemplateCall(templateId, _callback);
        }


        /**
         * Execute getSpecificTemplate request
         * @return DataSetTemplateEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get template </td><td>  -  </td></tr>
         </table>
         */
        public DataSetTemplateEntity execute() throws ApiException {
            ApiResponse<DataSetTemplateEntity> localVarResp = getSpecificTemplateWithHttpInfo(templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificTemplate request with HTTP info returned
         * @return ApiResponse&lt;DataSetTemplateEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSetTemplateEntity> executeWithHttpInfo() throws ApiException {
            return getSpecificTemplateWithHttpInfo(templateId);
        }

        /**
         * Execute getSpecificTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {
            return getSpecificTemplateAsync(templateId, _callback);
        }
    }

    /**
     * Get a specific template
     * 
     * @param templateId  (required)
     * @return GetSpecificTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get template </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificTemplateRequestBuilder getSpecificTemplate(UUID templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GetSpecificTemplateRequestBuilder(templateId);
    }
    private okhttp3.Call listPermissionsToViewCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPermissionsToViewValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listPermissionsToViewCall(_callback);

    }


    private ApiResponse<TemplateListPermissionsToViewResponse> listPermissionsToViewWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listPermissionsToViewValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TemplateListPermissionsToViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPermissionsToViewAsync(final ApiCallback<TemplateListPermissionsToViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPermissionsToViewValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TemplateListPermissionsToViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPermissionsToViewRequestBuilder {

        private ListPermissionsToViewRequestBuilder() {
        }

        /**
         * Build call for listPermissionsToView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The template result set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPermissionsToViewCall(_callback);
        }


        /**
         * Execute listPermissionsToView request
         * @return TemplateListPermissionsToViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The template result set. </td><td>  -  </td></tr>
         </table>
         */
        public TemplateListPermissionsToViewResponse execute() throws ApiException {
            ApiResponse<TemplateListPermissionsToViewResponse> localVarResp = listPermissionsToViewWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPermissionsToView request with HTTP info returned
         * @return ApiResponse&lt;TemplateListPermissionsToViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The template result set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateListPermissionsToViewResponse> executeWithHttpInfo() throws ApiException {
            return listPermissionsToViewWithHttpInfo();
        }

        /**
         * Execute listPermissionsToView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The template result set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateListPermissionsToViewResponse> _callback) throws ApiException {
            return listPermissionsToViewAsync(_callback);
        }
    }

    /**
     * List all templates you have permission to view.
     * List all templates you have permission to view.
     * @return ListPermissionsToViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The template result set. </td><td>  -  </td></tr>
     </table>
     */
    public ListPermissionsToViewRequestBuilder listPermissionsToView() throws IllegalArgumentException {
        return new ListPermissionsToViewRequestBuilder();
    }
    private okhttp3.Call updateTemplateItemCall(UUID templateId, DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSetTemplateMetadata;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateItemValidateBeforeCall(UUID templateId, DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateTemplateItem(Async)");
        }

        return updateTemplateItemCall(templateId, dataSetTemplateMetadata, _callback);

    }


    private ApiResponse<DataSetTemplateEntity> updateTemplateItemWithHttpInfo(UUID templateId, DataSetTemplateMetadata dataSetTemplateMetadata) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateItemValidateBeforeCall(templateId, dataSetTemplateMetadata, null);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateItemAsync(UUID templateId, DataSetTemplateMetadata dataSetTemplateMetadata, final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateItemValidateBeforeCall(templateId, dataSetTemplateMetadata, _callback);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateItemRequestBuilder {
        private final String name;
        private final UUID templateId;
        private String description;
        private DataSetPatch dataSet;
        private List<BatchIdentityInputEntitlementsInner> entitlements;
        private Entitlements creatorEntitlements;
        private Exchange exchange;

        private UpdateTemplateItemRequestBuilder(String name, UUID templateId) {
            this.name = name;
            this.templateId = templateId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateTemplateItemRequestBuilder
         */
        public UpdateTemplateItemRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set dataSet
         * @param dataSet  (optional)
         * @return UpdateTemplateItemRequestBuilder
         */
        public UpdateTemplateItemRequestBuilder dataSet(DataSetPatch dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        
        /**
         * Set entitlements
         * @param entitlements  (optional)
         * @return UpdateTemplateItemRequestBuilder
         */
        public UpdateTemplateItemRequestBuilder entitlements(List<BatchIdentityInputEntitlementsInner> entitlements) {
            this.entitlements = entitlements;
            return this;
        }
        
        /**
         * Set creatorEntitlements
         * @param creatorEntitlements  (optional)
         * @return UpdateTemplateItemRequestBuilder
         */
        public UpdateTemplateItemRequestBuilder creatorEntitlements(Entitlements creatorEntitlements) {
            this.creatorEntitlements = creatorEntitlements;
            return this;
        }
        
        /**
         * Set exchange
         * @param exchange  (optional)
         * @return UpdateTemplateItemRequestBuilder
         */
        public UpdateTemplateItemRequestBuilder exchange(Exchange exchange) {
            this.exchange = exchange;
            return this;
        }
        
        /**
         * Build call for updateTemplateItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return updateTemplateItemCall(templateId, dataSetTemplateMetadata, _callback);
        }

        private DataSetTemplateMetadata buildBodyParams() {
            DataSetTemplateMetadata dataSetTemplateMetadata = new DataSetTemplateMetadata();
            dataSetTemplateMetadata.description(this.description);
            dataSetTemplateMetadata.name(this.name);
            dataSetTemplateMetadata.dataSet(this.dataSet);
            dataSetTemplateMetadata.entitlements(this.entitlements);
            dataSetTemplateMetadata.creatorEntitlements(this.creatorEntitlements);
            dataSetTemplateMetadata.exchange(this.exchange);
            return dataSetTemplateMetadata;
        }

        /**
         * Execute updateTemplateItem request
         * @return DataSetTemplateEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public DataSetTemplateEntity execute() throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            ApiResponse<DataSetTemplateEntity> localVarResp = updateTemplateItemWithHttpInfo(templateId, dataSetTemplateMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplateItem request with HTTP info returned
         * @return ApiResponse&lt;DataSetTemplateEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSetTemplateEntity> executeWithHttpInfo() throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return updateTemplateItemWithHttpInfo(templateId, dataSetTemplateMetadata);
        }

        /**
         * Execute updateTemplateItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {
            DataSetTemplateMetadata dataSetTemplateMetadata = buildBodyParams();
            return updateTemplateItemAsync(templateId, dataSetTemplateMetadata, _callback);
        }
    }

    /**
     * Update a template
     * 
     * @param templateId  (required)
     * @return UpdateTemplateItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateItemRequestBuilder updateTemplateItem(String name, UUID templateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateTemplateItemRequestBuilder(name, templateId);
    }
    private okhttp3.Call updateTemplateItem_0Call(UUID templateId, DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSetTemplatePatchMetadata;

        // create path and map variables
        String localVarPath = "/templates/{templateId}"
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateItem_0ValidateBeforeCall(UUID templateId, DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateTemplateItem_0(Async)");
        }

        return updateTemplateItem_0Call(templateId, dataSetTemplatePatchMetadata, _callback);

    }


    private ApiResponse<DataSetTemplateEntity> updateTemplateItem_0WithHttpInfo(UUID templateId, DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateItem_0ValidateBeforeCall(templateId, dataSetTemplatePatchMetadata, null);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateItem_0Async(UUID templateId, DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata, final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateItem_0ValidateBeforeCall(templateId, dataSetTemplatePatchMetadata, _callback);
        Type localVarReturnType = new TypeToken<DataSetTemplateEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateItem0RequestBuilder {
        private final UUID templateId;
        private String description;
        private String name;
        private DataSetPatch dataSet;
        private List<BatchIdentityInputEntitlementsInner> entitlements;
        private Entitlements creatorEntitlements;

        private UpdateTemplateItem0RequestBuilder(UUID templateId) {
            this.templateId = templateId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateTemplateItem0RequestBuilder
         */
        public UpdateTemplateItem0RequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateTemplateItem0RequestBuilder
         */
        public UpdateTemplateItem0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set dataSet
         * @param dataSet  (optional)
         * @return UpdateTemplateItem0RequestBuilder
         */
        public UpdateTemplateItem0RequestBuilder dataSet(DataSetPatch dataSet) {
            this.dataSet = dataSet;
            return this;
        }
        
        /**
         * Set entitlements
         * @param entitlements  (optional)
         * @return UpdateTemplateItem0RequestBuilder
         */
        public UpdateTemplateItem0RequestBuilder entitlements(List<BatchIdentityInputEntitlementsInner> entitlements) {
            this.entitlements = entitlements;
            return this;
        }
        
        /**
         * Set creatorEntitlements
         * @param creatorEntitlements  (optional)
         * @return UpdateTemplateItem0RequestBuilder
         */
        public UpdateTemplateItem0RequestBuilder creatorEntitlements(Entitlements creatorEntitlements) {
            this.creatorEntitlements = creatorEntitlements;
            return this;
        }
        
        /**
         * Build call for updateTemplateItem_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata = buildBodyParams();
            return updateTemplateItem_0Call(templateId, dataSetTemplatePatchMetadata, _callback);
        }

        private DataSetTemplatePatchMetadata buildBodyParams() {
            DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata = new DataSetTemplatePatchMetadata();
            dataSetTemplatePatchMetadata.description(this.description);
            dataSetTemplatePatchMetadata.name(this.name);
            dataSetTemplatePatchMetadata.dataSet(this.dataSet);
            dataSetTemplatePatchMetadata.entitlements(this.entitlements);
            dataSetTemplatePatchMetadata.creatorEntitlements(this.creatorEntitlements);
            return dataSetTemplatePatchMetadata;
        }

        /**
         * Execute updateTemplateItem_0 request
         * @return DataSetTemplateEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public DataSetTemplateEntity execute() throws ApiException {
            DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata = buildBodyParams();
            ApiResponse<DataSetTemplateEntity> localVarResp = updateTemplateItem_0WithHttpInfo(templateId, dataSetTemplatePatchMetadata);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplateItem_0 request with HTTP info returned
         * @return ApiResponse&lt;DataSetTemplateEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataSetTemplateEntity> executeWithHttpInfo() throws ApiException {
            DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata = buildBodyParams();
            return updateTemplateItem_0WithHttpInfo(templateId, dataSetTemplatePatchMetadata);
        }

        /**
         * Execute updateTemplateItem_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataSetTemplateEntity> _callback) throws ApiException {
            DataSetTemplatePatchMetadata dataSetTemplatePatchMetadata = buildBodyParams();
            return updateTemplateItem_0Async(templateId, dataSetTemplatePatchMetadata, _callback);
        }
    }

    /**
     * Update a template
     * 
     * @param templateId  (required)
     * @return UpdateTemplateItem0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a Template entry </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateItem0RequestBuilder updateTemplateItem_0(UUID templateId) throws IllegalArgumentException {
        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateTemplateItem0RequestBuilder(templateId);
    }
}
