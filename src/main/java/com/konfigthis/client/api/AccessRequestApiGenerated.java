/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessRequestCreateNewRequestRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccessRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccessRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRequestCall(AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessRequestCreateNewRequestRequest;

        // create path and map variables
        String localVarPath = "/access-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRequestValidateBeforeCall(AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest, final ApiCallback _callback) throws ApiException {
        return createNewRequestCall(accessRequestCreateNewRequestRequest, _callback);

    }


    private ApiResponse<Void> createNewRequestWithHttpInfo(AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewRequestValidateBeforeCall(accessRequestCreateNewRequestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewRequestAsync(AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRequestValidateBeforeCall(accessRequestCreateNewRequestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewRequestRequestBuilder {
        private final UUID dataSetId;
        private final String requestingEntityId;
        private final String requestMessage;
        private String requesterName;
        private String requesterEmail;

        private CreateNewRequestRequestBuilder(UUID dataSetId, String requestingEntityId, String requestMessage) {
            this.dataSetId = dataSetId;
            this.requestingEntityId = requestingEntityId;
            this.requestMessage = requestMessage;
        }

        /**
         * Set requesterName
         * @param requesterName Name of the user who requested access. (optional)
         * @return CreateNewRequestRequestBuilder
         */
        public CreateNewRequestRequestBuilder requesterName(String requesterName) {
            this.requesterName = requesterName;
            return this;
        }
        
        /**
         * Set requesterEmail
         * @param requesterEmail Contact email address for the user who requested access. (optional)
         * @return CreateNewRequestRequestBuilder
         */
        public CreateNewRequestRequestBuilder requesterEmail(String requesterEmail) {
            this.requesterEmail = requesterEmail;
            return this;
        }
        
        /**
         * Build call for createNewRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> This request is not supported </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = buildBodyParams();
            return createNewRequestCall(accessRequestCreateNewRequestRequest, _callback);
        }

        private AccessRequestCreateNewRequestRequest buildBodyParams() {
            AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = new AccessRequestCreateNewRequestRequest();
            accessRequestCreateNewRequestRequest.dataSetId(this.dataSetId);
            accessRequestCreateNewRequestRequest.requestingEntityId(this.requestingEntityId);
            accessRequestCreateNewRequestRequest.requesterName(this.requesterName);
            accessRequestCreateNewRequestRequest.requesterEmail(this.requesterEmail);
            accessRequestCreateNewRequestRequest.requestMessage(this.requestMessage);
            return accessRequestCreateNewRequestRequest;
        }

        /**
         * Execute createNewRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> This request is not supported </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = buildBodyParams();
            createNewRequestWithHttpInfo(accessRequestCreateNewRequestRequest);
        }

        /**
         * Execute createNewRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> This request is not supported </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = buildBodyParams();
            return createNewRequestWithHttpInfo(accessRequestCreateNewRequestRequest);
        }

        /**
         * Execute createNewRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> This request is not supported </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = buildBodyParams();
            return createNewRequestAsync(accessRequestCreateNewRequestRequest, _callback);
        }
    }

    /**
     * 
     * 
     * @return CreateNewRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> This request is not supported </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestRequestBuilder createNewRequest(UUID dataSetId, String requestingEntityId, String requestMessage) throws IllegalArgumentException {
        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        if (requestingEntityId == null) throw new IllegalArgumentException("\"requestingEntityId\" is required but got null");
            

        if (requestMessage == null) throw new IllegalArgumentException("\"requestMessage\" is required but got null");
            

        return new CreateNewRequestRequestBuilder(dataSetId, requestingEntityId, requestMessage);
    }
    private okhttp3.Call deleteRequestByIdCall(String requestId, UUID dataSetId, Boolean accepted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSetId", dataSetId));
        }

        if (accepted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepted", accepted));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRequestByIdValidateBeforeCall(String requestId, UUID dataSetId, Boolean accepted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling deleteRequestById(Async)");
        }

        // verify the required parameter 'dataSetId' is set
        if (dataSetId == null) {
            throw new ApiException("Missing the required parameter 'dataSetId' when calling deleteRequestById(Async)");
        }

        return deleteRequestByIdCall(requestId, dataSetId, accepted, _callback);

    }


    private ApiResponse<Void> deleteRequestByIdWithHttpInfo(String requestId, UUID dataSetId, Boolean accepted) throws ApiException {
        okhttp3.Call localVarCall = deleteRequestByIdValidateBeforeCall(requestId, dataSetId, accepted, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRequestByIdAsync(String requestId, UUID dataSetId, Boolean accepted, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRequestByIdValidateBeforeCall(requestId, dataSetId, accepted, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestByIdRequestBuilder {
        private final String requestId;
        private final UUID dataSetId;
        private Boolean accepted;

        private DeleteRequestByIdRequestBuilder(String requestId, UUID dataSetId) {
            this.requestId = requestId;
            this.dataSetId = dataSetId;
        }

        /**
         * Set accepted
         * @param accepted  (optional)
         * @return DeleteRequestByIdRequestBuilder
         */
        public DeleteRequestByIdRequestBuilder accepted(Boolean accepted) {
            this.accepted = accepted;
            return this;
        }
        
        /**
         * Build call for deleteRequestById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dismiss access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRequestByIdCall(requestId, dataSetId, accepted, _callback);
        }


        /**
         * Execute deleteRequestById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dismiss access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRequestByIdWithHttpInfo(requestId, dataSetId, accepted);
        }

        /**
         * Execute deleteRequestById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dismiss access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRequestByIdWithHttpInfo(requestId, dataSetId, accepted);
        }

        /**
         * Execute deleteRequestById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Dismiss access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRequestByIdAsync(requestId, dataSetId, accepted, _callback);
        }
    }

    /**
     * 
     * 
     * @param requestId  (required)
     * @param dataSetId  (required)
     * @return DeleteRequestByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dismiss access requests for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestByIdRequestBuilder deleteRequestById(String requestId, UUID dataSetId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        if (dataSetId == null) throw new IllegalArgumentException("\"dataSetId\" is required but got null");
            

        return new DeleteRequestByIdRequestBuilder(requestId, dataSetId);
    }
    private okhttp3.Call listCall(UUID dataSetId, String requestingEntityId, List<String> entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataSetId", dataSetId));
        }

        if (requestingEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestingEntityId", requestingEntityId));
        }

        if (entityId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entityId", entityId));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID dataSetId, String requestingEntityId, List<String> entityId, final ApiCallback _callback) throws ApiException {
        return listCall(dataSetId, requestingEntityId, entityId, _callback);

    }


    private ApiResponse<Void> listWithHttpInfo(UUID dataSetId, String requestingEntityId, List<String> entityId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(dataSetId, requestingEntityId, entityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call listAsync(UUID dataSetId, String requestingEntityId, List<String> entityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(dataSetId, requestingEntityId, entityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID dataSetId;
        private String requestingEntityId;
        private List<String> entityId;

        private ListRequestBuilder() {
        }

        /**
         * Set dataSetId
         * @param dataSetId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dataSetId(UUID dataSetId) {
            this.dataSetId = dataSetId;
            return this;
        }
        
        /**
         * Set requestingEntityId
         * @param requestingEntityId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder requestingEntityId(String requestingEntityId) {
            this.requestingEntityId = requestingEntityId;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder entityId(List<String> entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(dataSetId, requestingEntityId, entityId, _callback);
        }


        /**
         * Execute list request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            listWithHttpInfo(dataSetId, requestingEntityId, entityId);
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(dataSetId, requestingEntityId, entityId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return listAsync(dataSetId, requestingEntityId, entityId, _callback);
        }
    }

    /**
     * 
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The outstanding access requests for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
