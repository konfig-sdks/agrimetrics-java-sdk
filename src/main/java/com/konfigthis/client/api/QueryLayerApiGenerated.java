/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CostSummary;
import java.io.File;
import com.konfigthis.client.model.GeoJSONPolygon;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.QueryLayerCalculateStatisticsWithinGeometryRequest;
import com.konfigthis.client.model.QueryLayerMetadataResponse;
import com.konfigthis.client.model.Statistics;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QueryLayerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryLayerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QueryLayerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateCostCall(UUID layerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/search/cost"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateCostValidateBeforeCall(UUID layerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling calculateCost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling calculateCost(Async)");
        }

        return calculateCostCall(layerId, body, _callback);

    }


    private ApiResponse<CostSummary> calculateCostWithHttpInfo(UUID layerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = calculateCostValidateBeforeCall(layerId, body, null);
        Type localVarReturnType = new TypeToken<CostSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateCostAsync(UUID layerId, Object body, final ApiCallback<CostSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateCostValidateBeforeCall(layerId, body, _callback);
        Type localVarReturnType = new TypeToken<CostSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateCostRequestBuilder {
        private final UUID layerId;
        private Object body;

        private CalculateCostRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CalculateCostRequestBuilder
         */
        public CalculateCostRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for calculateCost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return calculateCostCall(layerId, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute calculateCost request
         * @return CostSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public CostSummary execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<CostSummary> localVarResp = calculateCostWithHttpInfo(layerId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateCost request with HTTP info returned
         * @return ApiResponse&lt;CostSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostSummary> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return calculateCostWithHttpInfo(layerId, body);
        }

        /**
         * Execute calculateCost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostSummary> _callback) throws ApiException {
            Object body = buildBodyParams();
            return calculateCostAsync(layerId, body, _callback);
        }
    }

    /**
     * Calculate query cost
     * Find out the cost of searching a specific geometry within a layer. 
     * @param layerId  (required)
     * @param body  (required)
     * @return CalculateCostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
     </table>
     */
    public CalculateCostRequestBuilder calculateCost(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new CalculateCostRequestBuilder(layerId);
    }
    private okhttp3.Call calculateStatisticsWithinGeometryCall(UUID layerId, QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryLayerCalculateStatisticsWithinGeometryRequest;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/search/statistics"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateStatisticsWithinGeometryValidateBeforeCall(UUID layerId, QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling calculateStatisticsWithinGeometry(Async)");
        }

        // verify the required parameter 'queryLayerCalculateStatisticsWithinGeometryRequest' is set
        if (queryLayerCalculateStatisticsWithinGeometryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryLayerCalculateStatisticsWithinGeometryRequest' when calling calculateStatisticsWithinGeometry(Async)");
        }

        return calculateStatisticsWithinGeometryCall(layerId, queryLayerCalculateStatisticsWithinGeometryRequest, _callback);

    }


    private ApiResponse<Statistics> calculateStatisticsWithinGeometryWithHttpInfo(UUID layerId, QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest) throws ApiException {
        okhttp3.Call localVarCall = calculateStatisticsWithinGeometryValidateBeforeCall(layerId, queryLayerCalculateStatisticsWithinGeometryRequest, null);
        Type localVarReturnType = new TypeToken<Statistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateStatisticsWithinGeometryAsync(UUID layerId, QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest, final ApiCallback<Statistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateStatisticsWithinGeometryValidateBeforeCall(layerId, queryLayerCalculateStatisticsWithinGeometryRequest, _callback);
        Type localVarReturnType = new TypeToken<Statistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateStatisticsWithinGeometryRequestBuilder {
        private final Object geometry;
        private final UUID layerId;
        private OffsetDateTime time;

        private CalculateStatisticsWithinGeometryRequestBuilder(Object geometry, UUID layerId) {
            this.geometry = geometry;
            this.layerId = layerId;
        }

        /**
         * Set time
         * @param time  (optional)
         * @return CalculateStatisticsWithinGeometryRequestBuilder
         */
        public CalculateStatisticsWithinGeometryRequestBuilder time(OffsetDateTime time) {
            this.time = time;
            return this;
        }
        
        /**
         * Build call for calculateStatisticsWithinGeometry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested statistics for the specified geometry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest = buildBodyParams();
            return calculateStatisticsWithinGeometryCall(layerId, queryLayerCalculateStatisticsWithinGeometryRequest, _callback);
        }

        private QueryLayerCalculateStatisticsWithinGeometryRequest buildBodyParams() {
            QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest = new QueryLayerCalculateStatisticsWithinGeometryRequest();
            queryLayerCalculateStatisticsWithinGeometryRequest.geometry(this.geometry);
            queryLayerCalculateStatisticsWithinGeometryRequest.time(this.time);
            return queryLayerCalculateStatisticsWithinGeometryRequest;
        }

        /**
         * Execute calculateStatisticsWithinGeometry request
         * @return Statistics
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested statistics for the specified geometry </td><td>  -  </td></tr>
         </table>
         */
        public Statistics execute() throws ApiException {
            QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest = buildBodyParams();
            ApiResponse<Statistics> localVarResp = calculateStatisticsWithinGeometryWithHttpInfo(layerId, queryLayerCalculateStatisticsWithinGeometryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateStatisticsWithinGeometry request with HTTP info returned
         * @return ApiResponse&lt;Statistics&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested statistics for the specified geometry </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Statistics> executeWithHttpInfo() throws ApiException {
            QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest = buildBodyParams();
            return calculateStatisticsWithinGeometryWithHttpInfo(layerId, queryLayerCalculateStatisticsWithinGeometryRequest);
        }

        /**
         * Execute calculateStatisticsWithinGeometry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested statistics for the specified geometry </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Statistics> _callback) throws ApiException {
            QueryLayerCalculateStatisticsWithinGeometryRequest queryLayerCalculateStatisticsWithinGeometryRequest = buildBodyParams();
            return calculateStatisticsWithinGeometryAsync(layerId, queryLayerCalculateStatisticsWithinGeometryRequest, _callback);
        }
    }

    /**
     * Get layer statistics
     * &gt; :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
     * @param layerId  (required)
     * @param queryLayerCalculateStatisticsWithinGeometryRequest  (required)
     * @return CalculateStatisticsWithinGeometryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Retrieved the requested statistics for the specified geometry </td><td>  -  </td></tr>
     </table>
     */
    public CalculateStatisticsWithinGeometryRequestBuilder calculateStatisticsWithinGeometry(Object geometry, UUID layerId) throws IllegalArgumentException {
        
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new CalculateStatisticsWithinGeometryRequestBuilder(geometry, layerId);
    }
    private okhttp3.Call cutShapeBoundaryAndRetrieveCall(List<UUID> layer, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (layer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "layer", layer));
        }

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/gml+xml; version=3.2",
            "application/vnd.google-earth.kml+xml",
            "application/zipped-shapefile",
            "application/x.gdb+zip",
            "application/x.mid-mif+zip",
            "application/x.tab+zip",
            "application/dxf",
            "application/dxf+zip",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/geo+json",
            "application/zipped-shapefile"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cutShapeBoundaryAndRetrieveValidateBeforeCall(List<UUID> layer, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layer' is set
        if (layer == null) {
            throw new ApiException("Missing the required parameter 'layer' when calling cutShapeBoundaryAndRetrieve(Async)");
        }

        return cutShapeBoundaryAndRetrieveCall(layer, body, _callback);

    }


    private ApiResponse<File> cutShapeBoundaryAndRetrieveWithHttpInfo(List<UUID> layer, Object body) throws ApiException {
        okhttp3.Call localVarCall = cutShapeBoundaryAndRetrieveValidateBeforeCall(layer, body, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cutShapeBoundaryAndRetrieveAsync(List<UUID> layer, Object body, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cutShapeBoundaryAndRetrieveValidateBeforeCall(layer, body, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CutShapeBoundaryAndRetrieveRequestBuilder {
        private final List<UUID> layer;

        private CutShapeBoundaryAndRetrieveRequestBuilder(List<UUID> layer) {
            this.layer = layer;
        }

        /**
         * Build call for cutShapeBoundaryAndRetrieve
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return cutShapeBoundaryAndRetrieveCall(layer, body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute cutShapeBoundaryAndRetrieve request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<File> localVarResp = cutShapeBoundaryAndRetrieveWithHttpInfo(layer, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cutShapeBoundaryAndRetrieve request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return cutShapeBoundaryAndRetrieveWithHttpInfo(layer, body);
        }

        /**
         * Execute cutShapeBoundaryAndRetrieve request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            Object body = buildBodyParams();
            return cutShapeBoundaryAndRetrieveAsync(layer, body, _callback);
        }
    }

    /**
     * Query and download sections of one or more layers
     * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
     * @param layer A layer to query (required)
     * @return CutShapeBoundaryAndRetrieveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public CutShapeBoundaryAndRetrieveRequestBuilder cutShapeBoundaryAndRetrieve(List<UUID> layer) throws IllegalArgumentException {
        if (layer == null) throw new IllegalArgumentException("\"layer\" is required but got null");
        return new CutShapeBoundaryAndRetrieveRequestBuilder(layer);
    }
    private okhttp3.Call metadataCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/layers/{layerId}"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataValidateBeforeCall(UUID layerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling metadata(Async)");
        }

        return metadataCall(layerId, _callback);

    }


    private ApiResponse<QueryLayerMetadataResponse> metadataWithHttpInfo(UUID layerId) throws ApiException {
        okhttp3.Call localVarCall = metadataValidateBeforeCall(layerId, null);
        Type localVarReturnType = new TypeToken<QueryLayerMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call metadataAsync(UUID layerId, final ApiCallback<QueryLayerMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataValidateBeforeCall(layerId, _callback);
        Type localVarReturnType = new TypeToken<QueryLayerMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MetadataRequestBuilder {
        private final UUID layerId;

        private MetadataRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Build call for metadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retreived the geospatial and temporal descriptions of the layer </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return metadataCall(layerId, _callback);
        }


        /**
         * Execute metadata request
         * @return QueryLayerMetadataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retreived the geospatial and temporal descriptions of the layer </td><td>  -  </td></tr>
         </table>
         */
        public QueryLayerMetadataResponse execute() throws ApiException {
            ApiResponse<QueryLayerMetadataResponse> localVarResp = metadataWithHttpInfo(layerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute metadata request with HTTP info returned
         * @return ApiResponse&lt;QueryLayerMetadataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retreived the geospatial and temporal descriptions of the layer </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QueryLayerMetadataResponse> executeWithHttpInfo() throws ApiException {
            return metadataWithHttpInfo(layerId);
        }

        /**
         * Execute metadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retreived the geospatial and temporal descriptions of the layer </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QueryLayerMetadataResponse> _callback) throws ApiException {
            return metadataAsync(layerId, _callback);
        }
    }

    /**
     * Get layer metadata
     * Get the metadata for a given layer, including the geospatial extent. 
     * @param layerId  (required)
     * @return MetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Retreived the geospatial and temporal descriptions of the layer </td><td>  -  </td></tr>
     </table>
     */
    public MetadataRequestBuilder metadata(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new MetadataRequestBuilder(layerId);
    }
    private okhttp3.Call searchGeometryCall(UUID layerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/layers/{layerId}/search"
            .replace("{" + "layerId" + "}", localVarApiClient.escapeString(layerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGeometryValidateBeforeCall(UUID layerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'layerId' is set
        if (layerId == null) {
            throw new ApiException("Missing the required parameter 'layerId' when calling searchGeometry(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchGeometry(Async)");
        }

        return searchGeometryCall(layerId, body, _callback);

    }


    private ApiResponse<File> searchGeometryWithHttpInfo(UUID layerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = searchGeometryValidateBeforeCall(layerId, body, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchGeometryAsync(UUID layerId, Object body, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGeometryValidateBeforeCall(layerId, body, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchGeometryRequestBuilder {
        private final UUID layerId;
        private Object body;

        private SearchGeometryRequestBuilder(UUID layerId) {
            this.layerId = layerId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return SearchGeometryRequestBuilder
         */
        public SearchGeometryRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for searchGeometry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return searchGeometryCall(layerId, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute searchGeometry request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<File> localVarResp = searchGeometryWithHttpInfo(layerId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchGeometry request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return searchGeometryWithHttpInfo(layerId, body);
        }

        /**
         * Execute searchGeometry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            Object body = buildBodyParams();
            return searchGeometryAsync(layerId, body, _callback);
        }
    }

    /**
     * Search within layer
     * &gt; :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
     * @param layerId  (required)
     * @param body  (required)
     * @return SearchGeometryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. Retrieved the requested geometry in the default/specified format. </td><td>  -  </td></tr>
     </table>
     */
    public SearchGeometryRequestBuilder searchGeometry(UUID layerId) throws IllegalArgumentException {
        if (layerId == null) throw new IllegalArgumentException("\"layerId\" is required but got null");
            

        return new SearchGeometryRequestBuilder(layerId);
    }
}
