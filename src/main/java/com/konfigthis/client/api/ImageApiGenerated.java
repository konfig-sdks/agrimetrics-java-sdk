/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ImageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRawImageCall(String imageType, String imageId, String thumbnail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{imageType}/{imageId}"
            .replace("{" + "imageType" + "}", localVarApiClient.escapeString(imageType.toString()))
            .replace("{" + "imageId" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (thumbnail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("thumbnail", thumbnail));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawImageValidateBeforeCall(String imageType, String imageId, String thumbnail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageType' is set
        if (imageType == null) {
            throw new ApiException("Missing the required parameter 'imageType' when calling getRawImage(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling getRawImage(Async)");
        }

        return getRawImageCall(imageType, imageId, thumbnail, _callback);

    }


    private ApiResponse<Void> getRawImageWithHttpInfo(String imageType, String imageId, String thumbnail) throws ApiException {
        okhttp3.Call localVarCall = getRawImageValidateBeforeCall(imageType, imageId, thumbnail, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRawImageAsync(String imageType, String imageId, String thumbnail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawImageValidateBeforeCall(imageType, imageId, thumbnail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetRawImageRequestBuilder {
        private final String imageType;
        private final String imageId;
        private String thumbnail;

        private GetRawImageRequestBuilder(String imageType, String imageId) {
            this.imageType = imageType;
            this.imageId = imageId;
        }

        /**
         * Set thumbnail
         * @param thumbnail Whether to provide a thumbnail image. If set to true and no thumbnail exists, the full image will be returned (optional, default to false)
         * @return GetRawImageRequestBuilder
         */
        public GetRawImageRequestBuilder thumbnail(String thumbnail) {
            this.thumbnail = thumbnail;
            return this;
        }
        
        /**
         * Build call for getRawImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRawImageCall(imageType, imageId, thumbnail, _callback);
        }


        /**
         * Execute getRawImage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRawImageWithHttpInfo(imageType, imageId, thumbnail);
        }

        /**
         * Execute getRawImage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRawImageWithHttpInfo(imageType, imageId, thumbnail);
        }

        /**
         * Execute getRawImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRawImageAsync(imageType, imageId, thumbnail, _callback);
        }
    }

    /**
     * Get an image used in the catalogue.
     * Get an image referenced on a data set. This will always return the raw image data.
     * @param imageType  (required)
     * @param imageId  (required)
     * @return GetRawImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The image for the data set. </td><td>  -  </td></tr>
     </table>
     */
    public GetRawImageRequestBuilder getRawImage(String imageType, String imageId) throws IllegalArgumentException {
        if (imageType == null) throw new IllegalArgumentException("\"imageType\" is required but got null");
            

        if (imageId == null) throw new IllegalArgumentException("\"imageId\" is required but got null");
            

        return new GetRawImageRequestBuilder(imageType, imageId);
    }
}
