/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DataRequest;
import com.konfigthis.client.model.DataRequestCreateSingleAccessRequestResponse;
import com.konfigthis.client.model.DataRequestDetailsInner;
import com.konfigthis.client.model.DataRequestResponseInner;
import com.konfigthis.client.model.DataRequestUpdateRequestRequest;
import com.konfigthis.client.model.DataRequestUpdateRequestResponse;
import java.io.File;
import com.konfigthis.client.model.GeoJSONPolygon;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DataRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DataRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSingleAccessRequestCall(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat, String geoJsonAOI, File shapefileAOI, DataRequest dataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataRequest;

        // create path and map variables
        String localVarPath = "/data-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectName != null) {
            localVarFormParams.put("projectName", projectName);
        }

        if (projectManagerName != null) {
            localVarFormParams.put("projectManagerName", projectManagerName);
        }

        if (projectManagerEmail != null) {
            localVarFormParams.put("projectManagerEmail", projectManagerEmail);
        }

        if (datasetId != null) {
            localVarFormParams.put("datasetId", datasetId);
        }

        if (datasetName != null) {
            localVarFormParams.put("datasetName", datasetName);
        }

        if (geoJsonAOI != null) {
            localVarFormParams.put("geoJsonAOI", geoJsonAOI);
        }

        if (shapefileAOI != null) {
            localVarFormParams.put("shapefileAOI", shapefileAOI);
        }

        if (requestedFormat != null) {
            localVarFormParams.put("requestedFormat", requestedFormat);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSingleAccessRequestValidateBeforeCall(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat, String geoJsonAOI, File shapefileAOI, DataRequest dataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling createSingleAccessRequest(Async)");
        }

        // verify the required parameter 'projectManagerName' is set
        if (projectManagerName == null) {
            throw new ApiException("Missing the required parameter 'projectManagerName' when calling createSingleAccessRequest(Async)");
        }

        // verify the required parameter 'projectManagerEmail' is set
        if (projectManagerEmail == null) {
            throw new ApiException("Missing the required parameter 'projectManagerEmail' when calling createSingleAccessRequest(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling createSingleAccessRequest(Async)");
        }

        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling createSingleAccessRequest(Async)");
        }

        // verify the required parameter 'requestedFormat' is set
        if (requestedFormat == null) {
            throw new ApiException("Missing the required parameter 'requestedFormat' when calling createSingleAccessRequest(Async)");
        }

        return createSingleAccessRequestCall(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest, _callback);

    }


    private ApiResponse<DataRequestCreateSingleAccessRequestResponse> createSingleAccessRequestWithHttpInfo(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat, String geoJsonAOI, File shapefileAOI, DataRequest dataRequest) throws ApiException {
        okhttp3.Call localVarCall = createSingleAccessRequestValidateBeforeCall(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest, null);
        Type localVarReturnType = new TypeToken<DataRequestCreateSingleAccessRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSingleAccessRequestAsync(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat, String geoJsonAOI, File shapefileAOI, DataRequest dataRequest, final ApiCallback<DataRequestCreateSingleAccessRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSingleAccessRequestValidateBeforeCall(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest, _callback);
        Type localVarReturnType = new TypeToken<DataRequestCreateSingleAccessRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSingleAccessRequestRequestBuilder {
        private final String projectName;
        private final String projectManagerName;
        private final String projectManagerEmail;
        private final UUID datasetId;
        private final String datasetName;
        private final String requestedFormat;
        private String geoJsonAOI;
        private File shapefileAOI;

        private CreateSingleAccessRequestRequestBuilder(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat) {
            this.projectName = projectName;
            this.projectManagerName = projectManagerName;
            this.projectManagerEmail = projectManagerEmail;
            this.datasetId = datasetId;
            this.datasetName = datasetName;
            this.requestedFormat = requestedFormat;
        }

        /**
         * Set geoJsonAOI
         * @param geoJsonAOI The area of interest that the user is requesting access to as a stringified GeoJSON (optional)
         * @return CreateSingleAccessRequestRequestBuilder
         */
        public CreateSingleAccessRequestRequestBuilder geoJsonAOI(String geoJsonAOI) {
            this.geoJsonAOI = geoJsonAOI;
            return this;
        }
        
        /**
         * Set shapefileAOI
         * @param shapefileAOI The area of interest that the user is requesting access to as a zipped shapefile (optional)
         * @return CreateSingleAccessRequestRequestBuilder
         */
        public CreateSingleAccessRequestRequestBuilder shapefileAOI(File shapefileAOI) {
            this.shapefileAOI = shapefileAOI;
            return this;
        }
        
        /**
         * Build call for createSingleAccessRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataRequest dataRequest = buildBodyParams();
            return createSingleAccessRequestCall(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest, _callback);
        }

        private DataRequest buildBodyParams() {
            DataRequest dataRequest = new DataRequest();
            dataRequest.projectName(this.projectName);
            dataRequest.projectManagerName(this.projectManagerName);
            dataRequest.projectManagerEmail(this.projectManagerEmail);
            dataRequest.datasetId(this.datasetId);
            dataRequest.datasetName(this.datasetName);
            dataRequest.geoJsonAOI(this.geoJsonAOI);
            dataRequest.shapefileAOI(this.shapefileAOI);
            if (this.requestedFormat != null)
            dataRequest.requestedFormat(DataRequest.RequestedFormatEnum.fromValue(this.requestedFormat));
            return dataRequest;
        }

        /**
         * Execute createSingleAccessRequest request
         * @return DataRequestCreateSingleAccessRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DataRequestCreateSingleAccessRequestResponse execute() throws ApiException {
            DataRequest dataRequest = buildBodyParams();
            ApiResponse<DataRequestCreateSingleAccessRequestResponse> localVarResp = createSingleAccessRequestWithHttpInfo(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSingleAccessRequest request with HTTP info returned
         * @return ApiResponse&lt;DataRequestCreateSingleAccessRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataRequestCreateSingleAccessRequestResponse> executeWithHttpInfo() throws ApiException {
            DataRequest dataRequest = buildBodyParams();
            return createSingleAccessRequestWithHttpInfo(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest);
        }

        /**
         * Execute createSingleAccessRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataRequestCreateSingleAccessRequestResponse> _callback) throws ApiException {
            DataRequest dataRequest = buildBodyParams();
            return createSingleAccessRequestAsync(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat, geoJsonAOI, shapefileAOI, dataRequest, _callback);
        }
    }

    /**
     * create a single access request
     * Create a single access request for an authenticated user
     * @param projectName The name of the project the data is for (required)
     * @param projectManagerName The name of the project manager who can approve the request (required)
     * @param projectManagerEmail The email address of the project manager who can approve the request (required)
     * @param datasetId The ID of the dataset that the data request relates to (required)
     * @param datasetName The name of the dataset that the data request relates to (required)
     * @param requestedFormat The format the user would like the data to be provided in (required)
     * @return CreateSingleAccessRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateSingleAccessRequestRequestBuilder createSingleAccessRequest(String projectName, String projectManagerName, String projectManagerEmail, UUID datasetId, String datasetName, String requestedFormat) throws IllegalArgumentException {
        if (projectName == null) throw new IllegalArgumentException("\"projectName\" is required but got null");
            

        if (projectManagerName == null) throw new IllegalArgumentException("\"projectManagerName\" is required but got null");
            

        if (projectManagerEmail == null) throw new IllegalArgumentException("\"projectManagerEmail\" is required but got null");
            

        if (datasetId == null) throw new IllegalArgumentException("\"datasetId\" is required but got null");
            

        if (datasetName == null) throw new IllegalArgumentException("\"datasetName\" is required but got null");
            

        if (requestedFormat == null) throw new IllegalArgumentException("\"requestedFormat\" is required but got null");
            

        return new CreateSingleAccessRequestRequestBuilder(projectName, projectManagerName, projectManagerEmail, datasetId, datasetName, requestedFormat);
    }
    private okhttp3.Call getGeoJsonGeometryCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests/{uniqueLinkId}/geometry"
            .replace("{" + "uniqueLinkId" + "}", localVarApiClient.escapeString(uniqueLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeoJsonGeometryValidateBeforeCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uniqueLinkId' is set
        if (uniqueLinkId == null) {
            throw new ApiException("Missing the required parameter 'uniqueLinkId' when calling getGeoJsonGeometry(Async)");
        }

        return getGeoJsonGeometryCall(uniqueLinkId, _callback);

    }


    private ApiResponse<GeoJSONPolygon> getGeoJsonGeometryWithHttpInfo(String uniqueLinkId) throws ApiException {
        okhttp3.Call localVarCall = getGeoJsonGeometryValidateBeforeCall(uniqueLinkId, null);
        Type localVarReturnType = new TypeToken<GeoJSONPolygon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGeoJsonGeometryAsync(String uniqueLinkId, final ApiCallback<GeoJSONPolygon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeoJsonGeometryValidateBeforeCall(uniqueLinkId, _callback);
        Type localVarReturnType = new TypeToken<GeoJSONPolygon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGeoJsonGeometryRequestBuilder {
        private final String uniqueLinkId;

        private GetGeoJsonGeometryRequestBuilder(String uniqueLinkId) {
            this.uniqueLinkId = uniqueLinkId;
        }

        /**
         * Build call for getGeoJsonGeometry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> GeoJSON Polygon </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGeoJsonGeometryCall(uniqueLinkId, _callback);
        }


        /**
         * Execute getGeoJsonGeometry request
         * @return GeoJSONPolygon
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> GeoJSON Polygon </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public GeoJSONPolygon execute() throws ApiException {
            ApiResponse<GeoJSONPolygon> localVarResp = getGeoJsonGeometryWithHttpInfo(uniqueLinkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGeoJsonGeometry request with HTTP info returned
         * @return ApiResponse&lt;GeoJSONPolygon&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> GeoJSON Polygon </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GeoJSONPolygon> executeWithHttpInfo() throws ApiException {
            return getGeoJsonGeometryWithHttpInfo(uniqueLinkId);
        }

        /**
         * Execute getGeoJsonGeometry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> GeoJSON Polygon </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GeoJSONPolygon> _callback) throws ApiException {
            return getGeoJsonGeometryAsync(uniqueLinkId, _callback);
        }
    }

    /**
     * Get geometry for data request as GeoJSON
     * Returns the geometry of the data request as GeoJSON
     * @param uniqueLinkId  (required)
     * @return GetGeoJsonGeometryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> GeoJSON Polygon </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
     </table>
     */
    public GetGeoJsonGeometryRequestBuilder getGeoJsonGeometry(String uniqueLinkId) throws IllegalArgumentException {
        if (uniqueLinkId == null) throw new IllegalArgumentException("\"uniqueLinkId\" is required but got null");
            

        return new GetGeoJsonGeometryRequestBuilder(uniqueLinkId);
    }
    private okhttp3.Call getRequestedDataCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestedDataValidateBeforeCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getRequestedData(Async)");
        }

        return getRequestedDataCall(requestId, _callback);

    }


    private ApiResponse<List<DataRequestDetailsInner>> getRequestedDataWithHttpInfo(UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = getRequestedDataValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<List<DataRequestDetailsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestedDataAsync(UUID requestId, final ApiCallback<List<DataRequestDetailsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestedDataValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<List<DataRequestDetailsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestedDataRequestBuilder {
        private final UUID requestId;

        private GetRequestedDataRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Build call for getRequestedData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestedDataCall(requestId, _callback);
        }


        /**
         * Execute getRequestedData request
         * @return List&lt;DataRequestDetailsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public List<DataRequestDetailsInner> execute() throws ApiException {
            ApiResponse<List<DataRequestDetailsInner>> localVarResp = getRequestedDataWithHttpInfo(requestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequestedData request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DataRequestDetailsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DataRequestDetailsInner>> executeWithHttpInfo() throws ApiException {
            return getRequestedDataWithHttpInfo(requestId);
        }

        /**
         * Execute getRequestedData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DataRequestDetailsInner>> _callback) throws ApiException {
            return getRequestedDataAsync(requestId, _callback);
        }
    }

    /**
     * gets the data for the approved request
     * Returns the users requested data
     * @param requestId  (required)
     * @return GetRequestedDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestedDataRequestBuilder getRequestedData(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new GetRequestedDataRequestBuilder(requestId);
    }
    private okhttp3.Call getResultsCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests/{requestId}/download"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/gml+xml; version=3.2",
            "application/vnd.google-earth.kml+xml",
            "application/zipped-shapefile",
            "application/x.gdb+zip",
            "application/x.mid-mif+zip",
            "application/x.tab+zip",
            "application/dxf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResultsValidateBeforeCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getResults(Async)");
        }

        return getResultsCall(requestId, _callback);

    }


    private ApiResponse<File> getResultsWithHttpInfo(UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = getResultsValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getResultsAsync(UUID requestId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResultsValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetResultsRequestBuilder {
        private final UUID requestId;

        private GetResultsRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Build call for getResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication required. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The request has not been approved yet OR it has been rejected OR you are not authorised for this data access request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No request found by that ID. </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> This data access request has expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResultsCall(requestId, _callback);
        }


        /**
         * Execute getResults request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication required. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The request has not been approved yet OR it has been rejected OR you are not authorised for this data access request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No request found by that ID. </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> This data access request has expired. </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getResultsWithHttpInfo(requestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getResults request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication required. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The request has not been approved yet OR it has been rejected OR you are not authorised for this data access request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No request found by that ID. </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> This data access request has expired. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getResultsWithHttpInfo(requestId);
        }

        /**
         * Execute getResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Authentication required. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> The request has not been approved yet OR it has been rejected OR you are not authorised for this data access request. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No request found by that ID. </td><td>  -  </td></tr>
            <tr><td> 410 </td><td> This data access request has expired. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getResultsAsync(requestId, _callback);
        }
    }

    /**
     * Get the results of your data request
     * Once a data access request has been approved, this endpoint returns the data requested.
     * @param requestId  (required)
     * @return GetResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request has not been approved yet OR it has been rejected OR you are not authorised for this data access request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No request found by that ID. </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> This data access request has expired. </td><td>  -  </td></tr>
     </table>
     */
    public GetResultsRequestBuilder getResults(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new GetResultsRequestBuilder(requestId);
    }
    private okhttp3.Call grantUserAccessCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests/{uniqueLinkId}/approve"
            .replace("{" + "uniqueLinkId" + "}", localVarApiClient.escapeString(uniqueLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantUserAccessValidateBeforeCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uniqueLinkId' is set
        if (uniqueLinkId == null) {
            throw new ApiException("Missing the required parameter 'uniqueLinkId' when calling grantUserAccess(Async)");
        }

        return grantUserAccessCall(uniqueLinkId, _callback);

    }


    private ApiResponse<Void> grantUserAccessWithHttpInfo(String uniqueLinkId) throws ApiException {
        okhttp3.Call localVarCall = grantUserAccessValidateBeforeCall(uniqueLinkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call grantUserAccessAsync(String uniqueLinkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantUserAccessValidateBeforeCall(uniqueLinkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GrantUserAccessRequestBuilder {
        private final String uniqueLinkId;

        private GrantUserAccessRequestBuilder(String uniqueLinkId) {
            this.uniqueLinkId = uniqueLinkId;
        }

        /**
         * Build call for grantUserAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return grantUserAccessCall(uniqueLinkId, _callback);
        }


        /**
         * Execute grantUserAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            grantUserAccessWithHttpInfo(uniqueLinkId);
        }

        /**
         * Execute grantUserAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return grantUserAccessWithHttpInfo(uniqueLinkId);
        }

        /**
         * Execute grantUserAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return grantUserAccessAsync(uniqueLinkId, _callback);
        }
    }

    /**
     * approve data access
     * Grants access to a user on a given data request
     * @param uniqueLinkId  (required)
     * @return GrantUserAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
     </table>
     */
    public GrantUserAccessRequestBuilder grantUserAccess(String uniqueLinkId) throws IllegalArgumentException {
        if (uniqueLinkId == null) throw new IllegalArgumentException("\"uniqueLinkId\" is required but got null");
            

        return new GrantUserAccessRequestBuilder(uniqueLinkId);
    }
    private okhttp3.Call listUserAccessRequestsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserAccessRequestsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listUserAccessRequestsCall(_callback);

    }


    private ApiResponse<List<DataRequestResponseInner>> listUserAccessRequestsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listUserAccessRequestsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DataRequestResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserAccessRequestsAsync(final ApiCallback<List<DataRequestResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserAccessRequestsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DataRequestResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserAccessRequestsRequestBuilder {

        private ListUserAccessRequestsRequestBuilder() {
        }

        /**
         * Build call for listUserAccessRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserAccessRequestsCall(_callback);
        }


        /**
         * Execute listUserAccessRequests request
         * @return List&lt;DataRequestResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<DataRequestResponseInner> execute() throws ApiException {
            ApiResponse<List<DataRequestResponseInner>> localVarResp = listUserAccessRequestsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserAccessRequests request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DataRequestResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DataRequestResponseInner>> executeWithHttpInfo() throws ApiException {
            return listUserAccessRequestsWithHttpInfo();
        }

        /**
         * Execute listUserAccessRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DataRequestResponseInner>> _callback) throws ApiException {
            return listUserAccessRequestsAsync(_callback);
        }
    }

    /**
     * lists a users data requests
     * Query the given users data access requests 
     * @return ListUserAccessRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUserAccessRequestsRequestBuilder listUserAccessRequests() throws IllegalArgumentException {
        return new ListUserAccessRequestsRequestBuilder();
    }
    private okhttp3.Call rejectUserAccessCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data-requests/{uniqueLinkId}/reject"
            .replace("{" + "uniqueLinkId" + "}", localVarApiClient.escapeString(uniqueLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectUserAccessValidateBeforeCall(String uniqueLinkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uniqueLinkId' is set
        if (uniqueLinkId == null) {
            throw new ApiException("Missing the required parameter 'uniqueLinkId' when calling rejectUserAccess(Async)");
        }

        return rejectUserAccessCall(uniqueLinkId, _callback);

    }


    private ApiResponse<Void> rejectUserAccessWithHttpInfo(String uniqueLinkId) throws ApiException {
        okhttp3.Call localVarCall = rejectUserAccessValidateBeforeCall(uniqueLinkId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call rejectUserAccessAsync(String uniqueLinkId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectUserAccessValidateBeforeCall(uniqueLinkId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RejectUserAccessRequestBuilder {
        private final String uniqueLinkId;

        private RejectUserAccessRequestBuilder(String uniqueLinkId) {
            this.uniqueLinkId = uniqueLinkId;
        }

        /**
         * Build call for rejectUserAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rejectUserAccessCall(uniqueLinkId, _callback);
        }


        /**
         * Execute rejectUserAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            rejectUserAccessWithHttpInfo(uniqueLinkId);
        }

        /**
         * Execute rejectUserAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return rejectUserAccessWithHttpInfo(uniqueLinkId);
        }

        /**
         * Execute rejectUserAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return rejectUserAccessAsync(uniqueLinkId, _callback);
        }
    }

    /**
     * reject data access
     * Rejects access to a user on a given data request
     * @param uniqueLinkId  (required)
     * @return RejectUserAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Data Access request not found </td><td>  -  </td></tr>
     </table>
     */
    public RejectUserAccessRequestBuilder rejectUserAccess(String uniqueLinkId) throws IllegalArgumentException {
        if (uniqueLinkId == null) throw new IllegalArgumentException("\"uniqueLinkId\" is required but got null");
            

        return new RejectUserAccessRequestBuilder(uniqueLinkId);
    }
    private okhttp3.Call updateRequestCall(UUID requestId, DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataRequestUpdateRequestRequest;

        // create path and map variables
        String localVarPath = "/data-requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRequestValidateBeforeCall(UUID requestId, DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling updateRequest(Async)");
        }

        return updateRequestCall(requestId, dataRequestUpdateRequestRequest, _callback);

    }


    private ApiResponse<DataRequestUpdateRequestResponse> updateRequestWithHttpInfo(UUID requestId, DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRequestValidateBeforeCall(requestId, dataRequestUpdateRequestRequest, null);
        Type localVarReturnType = new TypeToken<DataRequestUpdateRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRequestAsync(UUID requestId, DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest, final ApiCallback<DataRequestUpdateRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRequestValidateBeforeCall(requestId, dataRequestUpdateRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<DataRequestUpdateRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestRequestBuilder {
        private final UUID requestId;
        private String status;

        private UpdateRequestRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Set status
         * @param status The status of the data request (optional)
         * @return UpdateRequestRequestBuilder
         */
        public UpdateRequestRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest = buildBodyParams();
            return updateRequestCall(requestId, dataRequestUpdateRequestRequest, _callback);
        }

        private DataRequestUpdateRequestRequest buildBodyParams() {
            DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest = new DataRequestUpdateRequestRequest();
            if (this.status != null)
            dataRequestUpdateRequestRequest.status(DataRequestUpdateRequestRequest.StatusEnum.fromValue(this.status));
            return dataRequestUpdateRequestRequest;
        }

        /**
         * Execute updateRequest request
         * @return DataRequestUpdateRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public DataRequestUpdateRequestResponse execute() throws ApiException {
            DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest = buildBodyParams();
            ApiResponse<DataRequestUpdateRequestResponse> localVarResp = updateRequestWithHttpInfo(requestId, dataRequestUpdateRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRequest request with HTTP info returned
         * @return ApiResponse&lt;DataRequestUpdateRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataRequestUpdateRequestResponse> executeWithHttpInfo() throws ApiException {
            DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest = buildBodyParams();
            return updateRequestWithHttpInfo(requestId, dataRequestUpdateRequestRequest);
        }

        /**
         * Execute updateRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataRequestUpdateRequestResponse> _callback) throws ApiException {
            DataRequestUpdateRequestRequest dataRequestUpdateRequestRequest = buildBodyParams();
            return updateRequestAsync(requestId, dataRequestUpdateRequestRequest, _callback);
        }
    }

    /**
     * updates a data request
     * Allows updating of the given data request | - For example: cancelling the request 
     * @param requestId  (required)
     * @return UpdateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRequestRequestBuilder updateRequest(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new UpdateRequestRequestBuilder(requestId);
    }
}
