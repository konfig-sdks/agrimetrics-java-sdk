/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * topic value
 */
@JsonAdapter(Topic.Adapter.class)public enum Topic {
  
  FARMING("farming"),
  
  BIOTA("biota"),
  
  BOUNDARIES("boundaries"),
  
  CLIMATOLOGYMETEOROLOGYATMOSPHERE("climatologyMeteorologyAtmosphere"),
  
  ECONOMY("economy"),
  
  ELEVATION("elevation"),
  
  ENVIRONMENT("environment"),
  
  GEOSCIENTIFICINFORMATION("geoscientificInformation"),
  
  HEALTH("health"),
  
  IMAGERYBASEMAPSEARTHCOVER("imageryBaseMapsEarthCover"),
  
  INTELLIGENCEMILITARY("intelligenceMilitary"),
  
  INLANDWATERS("inlandWaters"),
  
  LOCATION("location"),
  
  OCEANS("oceans"),
  
  PLANNINGCADASTRE("planningCadastre"),
  
  SOCIETY("society"),
  
  STRUCTURE("structure"),
  
  TRANSPORTATION("transportation"),
  
  UTILITIESCOMMUNICATION("utilitiesCommunication");

  private String value;

  Topic(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Topic fromValue(String value) {
    for (Topic b : Topic.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Topic> {
    @Override
    public void write(final JsonWriter jsonWriter, final Topic enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Topic read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Topic.fromValue(value);
    }
  }
}

