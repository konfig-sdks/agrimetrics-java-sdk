/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BoundingBoxCoordinates
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BoundingBoxCoordinates {
  public static final String SERIALIZED_NAME_MINLAT = "minlat";
  @SerializedName(SERIALIZED_NAME_MINLAT)
  private Double minlat;

  public static final String SERIALIZED_NAME_MINLON = "minlon";
  @SerializedName(SERIALIZED_NAME_MINLON)
  private Double minlon;

  public static final String SERIALIZED_NAME_MAXLAT = "maxlat";
  @SerializedName(SERIALIZED_NAME_MAXLAT)
  private Double maxlat;

  public static final String SERIALIZED_NAME_MAXLON = "maxlon";
  @SerializedName(SERIALIZED_NAME_MAXLON)
  private Double maxlon;

  public BoundingBoxCoordinates() {
  }

  public BoundingBoxCoordinates minlat(Double minlat) {
    if (minlat != null && minlat < -90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be greater than or equal to -90.");
    }
    if (minlat != null && minlat > 90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be less than or equal to 90.");
    }
    
    
    this.minlat = minlat;
    return this;
  }

  public BoundingBoxCoordinates minlat(Integer minlat) {
    if (minlat != null && minlat < -90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be greater than or equal to -90.");
    }
    if (minlat != null && minlat > 90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be less than or equal to 90.");
    }
    
    
    this.minlat = minlat.doubleValue();
    return this;
  }

   /**
   * Get minlat
   * minimum: -90
   * maximum: 90
   * @return minlat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-1.1234234", required = true, value = "")

  public Double getMinlat() {
    return minlat;
  }


  public void setMinlat(Double minlat) {
    if (minlat != null && minlat < -90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be greater than or equal to -90.");
    }
    if (minlat != null && minlat > 90) {
      throw new IllegalArgumentException("Invalid value for minlat. Must be less than or equal to 90.");
    }
    
    this.minlat = minlat;
  }


  public BoundingBoxCoordinates minlon(Double minlon) {
    if (minlon != null && minlon < -180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be greater than or equal to -180.");
    }
    if (minlon != null && minlon > 180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be less than or equal to 180.");
    }
    
    
    this.minlon = minlon;
    return this;
  }

  public BoundingBoxCoordinates minlon(Integer minlon) {
    if (minlon != null && minlon < -180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be greater than or equal to -180.");
    }
    if (minlon != null && minlon > 180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be less than or equal to 180.");
    }
    
    
    this.minlon = minlon.doubleValue();
    return this;
  }

   /**
   * Get minlon
   * minimum: -180
   * maximum: 180
   * @return minlon
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2.1234234", required = true, value = "")

  public Double getMinlon() {
    return minlon;
  }


  public void setMinlon(Double minlon) {
    if (minlon != null && minlon < -180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be greater than or equal to -180.");
    }
    if (minlon != null && minlon > 180) {
      throw new IllegalArgumentException("Invalid value for minlon. Must be less than or equal to 180.");
    }
    
    this.minlon = minlon;
  }


  public BoundingBoxCoordinates maxlat(Double maxlat) {
    if (maxlat != null && maxlat < -90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be greater than or equal to -90.");
    }
    if (maxlat != null && maxlat > 90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be less than or equal to 90.");
    }
    
    
    this.maxlat = maxlat;
    return this;
  }

  public BoundingBoxCoordinates maxlat(Integer maxlat) {
    if (maxlat != null && maxlat < -90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be greater than or equal to -90.");
    }
    if (maxlat != null && maxlat > 90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be less than or equal to 90.");
    }
    
    
    this.maxlat = maxlat.doubleValue();
    return this;
  }

   /**
   * Get maxlat
   * minimum: -90
   * maximum: 90
   * @return maxlat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-1.1234234", required = true, value = "")

  public Double getMaxlat() {
    return maxlat;
  }


  public void setMaxlat(Double maxlat) {
    if (maxlat != null && maxlat < -90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be greater than or equal to -90.");
    }
    if (maxlat != null && maxlat > 90) {
      throw new IllegalArgumentException("Invalid value for maxlat. Must be less than or equal to 90.");
    }
    
    this.maxlat = maxlat;
  }


  public BoundingBoxCoordinates maxlon(Double maxlon) {
    if (maxlon != null && maxlon < -180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be greater than or equal to -180.");
    }
    if (maxlon != null && maxlon > 180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be less than or equal to 180.");
    }
    
    
    this.maxlon = maxlon;
    return this;
  }

  public BoundingBoxCoordinates maxlon(Integer maxlon) {
    if (maxlon != null && maxlon < -180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be greater than or equal to -180.");
    }
    if (maxlon != null && maxlon > 180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be less than or equal to 180.");
    }
    
    
    this.maxlon = maxlon.doubleValue();
    return this;
  }

   /**
   * Get maxlon
   * minimum: -180
   * maximum: 180
   * @return maxlon
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2.1234234", required = true, value = "")

  public Double getMaxlon() {
    return maxlon;
  }


  public void setMaxlon(Double maxlon) {
    if (maxlon != null && maxlon < -180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be greater than or equal to -180.");
    }
    if (maxlon != null && maxlon > 180) {
      throw new IllegalArgumentException("Invalid value for maxlon. Must be less than or equal to 180.");
    }
    
    this.maxlon = maxlon;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BoundingBoxCoordinates instance itself
   */
  public BoundingBoxCoordinates putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoundingBoxCoordinates boundingBoxCoordinates = (BoundingBoxCoordinates) o;
    return Objects.equals(this.minlat, boundingBoxCoordinates.minlat) &&
        Objects.equals(this.minlon, boundingBoxCoordinates.minlon) &&
        Objects.equals(this.maxlat, boundingBoxCoordinates.maxlat) &&
        Objects.equals(this.maxlon, boundingBoxCoordinates.maxlon)&&
        Objects.equals(this.additionalProperties, boundingBoxCoordinates.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minlat, minlon, maxlat, maxlon, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoundingBoxCoordinates {\n");
    sb.append("    minlat: ").append(toIndentedString(minlat)).append("\n");
    sb.append("    minlon: ").append(toIndentedString(minlon)).append("\n");
    sb.append("    maxlat: ").append(toIndentedString(maxlat)).append("\n");
    sb.append("    maxlon: ").append(toIndentedString(maxlon)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minlat");
    openapiFields.add("minlon");
    openapiFields.add("maxlat");
    openapiFields.add("maxlon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("minlat");
    openapiRequiredFields.add("minlon");
    openapiRequiredFields.add("maxlat");
    openapiRequiredFields.add("maxlon");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BoundingBoxCoordinates
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BoundingBoxCoordinates.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoundingBoxCoordinates is not found in the empty JSON string", BoundingBoxCoordinates.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BoundingBoxCoordinates.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoundingBoxCoordinates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoundingBoxCoordinates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoundingBoxCoordinates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoundingBoxCoordinates.class));

       return (TypeAdapter<T>) new TypeAdapter<BoundingBoxCoordinates>() {
           @Override
           public void write(JsonWriter out, BoundingBoxCoordinates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BoundingBoxCoordinates read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BoundingBoxCoordinates instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BoundingBoxCoordinates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BoundingBoxCoordinates
  * @throws IOException if the JSON string is invalid with respect to BoundingBoxCoordinates
  */
  public static BoundingBoxCoordinates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoundingBoxCoordinates.class);
  }

 /**
  * Convert an instance of BoundingBoxCoordinates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

