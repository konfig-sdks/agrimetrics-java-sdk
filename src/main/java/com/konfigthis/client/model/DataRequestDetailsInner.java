/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DataRequestDetailsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DataRequestDetailsInner {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private UUID datasetId;

  public static final String SERIALIZED_NAME_DATASET_NAME = "datasetName";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  private String datasetName;

  /**
   * The status of the data request
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("pending"),
    
    APPROVED("approved"),
    
    DENIED("denied"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_REQUESTED_DATE = "requestedDate";
  @SerializedName(SERIALIZED_NAME_REQUESTED_DATE)
  private String requestedDate;

  public static final String SERIALIZED_NAME_REVIEWED_DATE = "reviewedDate";
  @SerializedName(SERIALIZED_NAME_REVIEWED_DATE)
  private Object reviewedDate = null;

  /**
   * The format the user would like the data to be provided in
   */
  @JsonAdapter(RequestedFormatEnum.Adapter.class)
 public enum RequestedFormatEnum {
    APPLICATION_GEO_JSON("application/geo+json"),
    
    APPLICATION_GML_XML_VERSION_3_2("application/gml+xml; version=3.2"),
    
    APPLICATION_VND_GOOGLE_EARTH_KML_XML("application/vnd.google-earth.kml+xml"),
    
    APPLICATION_ZIPPED_SHAPEFILE("application/zipped-shapefile"),
    
    APPLICATION_X_GDB_ZIP("application/x.gdb+zip"),
    
    APPLICATION_X_MID_MIF_ZIP("application/x.mid-mif+zip"),
    
    APPLICATION_X_TAB_ZIP("application/x.tab+zip"),
    
    APPLICATION_DXF("application/dxf"),
    
    IMAGE_TIFF("image/tiff");

    private String value;

    RequestedFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestedFormatEnum fromValue(String value) {
      for (RequestedFormatEnum b : RequestedFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestedFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestedFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestedFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestedFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUESTED_FORMAT = "requestedFormat";
  @SerializedName(SERIALIZED_NAME_REQUESTED_FORMAT)
  private RequestedFormatEnum requestedFormat;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "projectName";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_PROJECT_MANAGER_NAME = "projectManagerName";
  @SerializedName(SERIALIZED_NAME_PROJECT_MANAGER_NAME)
  private String projectManagerName;

  public static final String SERIALIZED_NAME_PROJECT_MANAGER_EMAIL = "projectManagerEmail";
  @SerializedName(SERIALIZED_NAME_PROJECT_MANAGER_EMAIL)
  private String projectManagerEmail;

  public static final String SERIALIZED_NAME_REQUESTER_EMAIL = "requesterEmail";
  @SerializedName(SERIALIZED_NAME_REQUESTER_EMAIL)
  private String requesterEmail;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_UNIQUE_LINK_ID = "uniqueLinkId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_LINK_ID)
  private String uniqueLinkId;

  public DataRequestDetailsInner() {
  }

  public DataRequestDetailsInner requestId(UUID requestId) {
    
    
    
    
    this.requestId = requestId;
    return this;
  }

   /**
   * The ID of the data request
   * @return requestId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the data request")

  public UUID getRequestId() {
    return requestId;
  }


  public void setRequestId(UUID requestId) {
    
    
    
    this.requestId = requestId;
  }


  public DataRequestDetailsInner datasetId(UUID datasetId) {
    
    
    
    
    this.datasetId = datasetId;
    return this;
  }

   /**
   * The ID of the dataset that the data request relates to
   * @return datasetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID of the dataset that the data request relates to")

  public UUID getDatasetId() {
    return datasetId;
  }


  public void setDatasetId(UUID datasetId) {
    
    
    
    this.datasetId = datasetId;
  }


  public DataRequestDetailsInner datasetName(String datasetName) {
    
    
    
    
    this.datasetName = datasetName;
    return this;
  }

   /**
   * The name of the dataset that the data request relates to
   * @return datasetName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the dataset that the data request relates to")

  public String getDatasetName() {
    return datasetName;
  }


  public void setDatasetName(String datasetName) {
    
    
    
    this.datasetName = datasetName;
  }


  public DataRequestDetailsInner status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The status of the data request
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The status of the data request")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public DataRequestDetailsInner requestedDate(String requestedDate) {
    
    
    
    
    this.requestedDate = requestedDate;
    return this;
  }

   /**
   * The date the data request was made
   * @return requestedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The date the data request was made")

  public String getRequestedDate() {
    return requestedDate;
  }


  public void setRequestedDate(String requestedDate) {
    
    
    
    this.requestedDate = requestedDate;
  }


  public DataRequestDetailsInner reviewedDate(Object reviewedDate) {
    
    
    
    
    this.reviewedDate = reviewedDate;
    return this;
  }

   /**
   * The date the data request was approved or rejected
   * @return reviewedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the data request was approved or rejected")

  public Object getReviewedDate() {
    return reviewedDate;
  }


  public void setReviewedDate(Object reviewedDate) {
    
    
    
    this.reviewedDate = reviewedDate;
  }


  public DataRequestDetailsInner requestedFormat(RequestedFormatEnum requestedFormat) {
    
    
    
    
    this.requestedFormat = requestedFormat;
    return this;
  }

   /**
   * The format the user would like the data to be provided in
   * @return requestedFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The format the user would like the data to be provided in")

  public RequestedFormatEnum getRequestedFormat() {
    return requestedFormat;
  }


  public void setRequestedFormat(RequestedFormatEnum requestedFormat) {
    
    
    
    this.requestedFormat = requestedFormat;
  }


  public DataRequestDetailsInner projectName(String projectName) {
    
    
    
    
    this.projectName = projectName;
    return this;
  }

   /**
   * The name of the project the data is for
   * @return projectName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the project the data is for")

  public String getProjectName() {
    return projectName;
  }


  public void setProjectName(String projectName) {
    
    
    
    this.projectName = projectName;
  }


  public DataRequestDetailsInner projectManagerName(String projectManagerName) {
    
    
    
    
    this.projectManagerName = projectManagerName;
    return this;
  }

   /**
   * The name of the project manager who can approve the request
   * @return projectManagerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the project manager who can approve the request")

  public String getProjectManagerName() {
    return projectManagerName;
  }


  public void setProjectManagerName(String projectManagerName) {
    
    
    
    this.projectManagerName = projectManagerName;
  }


  public DataRequestDetailsInner projectManagerEmail(String projectManagerEmail) {
    
    
    
    
    this.projectManagerEmail = projectManagerEmail;
    return this;
  }

   /**
   * The email address of the project manager who can approve the request
   * @return projectManagerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address of the project manager who can approve the request")

  public String getProjectManagerEmail() {
    return projectManagerEmail;
  }


  public void setProjectManagerEmail(String projectManagerEmail) {
    
    
    
    this.projectManagerEmail = projectManagerEmail;
  }


  public DataRequestDetailsInner requesterEmail(String requesterEmail) {
    
    
    
    
    this.requesterEmail = requesterEmail;
    return this;
  }

   /**
   * The email of the person who made the data request
   * @return requesterEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email of the person who made the data request")

  public String getRequesterEmail() {
    return requesterEmail;
  }


  public void setRequesterEmail(String requesterEmail) {
    
    
    
    this.requesterEmail = requesterEmail;
  }


  public DataRequestDetailsInner expiryDate(String expiryDate) {
    
    
    
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * The date until which the data from an approved request can be downloaded
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date until which the data from an approved request can be downloaded")

  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    
    
    
    this.expiryDate = expiryDate;
  }


  public DataRequestDetailsInner uniqueLinkId(String uniqueLinkId) {
    
    
    
    
    this.uniqueLinkId = uniqueLinkId;
    return this;
  }

   /**
   * Get uniqueLinkId
   * @return uniqueLinkId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUniqueLinkId() {
    return uniqueLinkId;
  }


  public void setUniqueLinkId(String uniqueLinkId) {
    
    
    
    this.uniqueLinkId = uniqueLinkId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataRequestDetailsInner instance itself
   */
  public DataRequestDetailsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataRequestDetailsInner dataRequestDetailsInner = (DataRequestDetailsInner) o;
    return Objects.equals(this.requestId, dataRequestDetailsInner.requestId) &&
        Objects.equals(this.datasetId, dataRequestDetailsInner.datasetId) &&
        Objects.equals(this.datasetName, dataRequestDetailsInner.datasetName) &&
        Objects.equals(this.status, dataRequestDetailsInner.status) &&
        Objects.equals(this.requestedDate, dataRequestDetailsInner.requestedDate) &&
        Objects.equals(this.reviewedDate, dataRequestDetailsInner.reviewedDate) &&
        Objects.equals(this.requestedFormat, dataRequestDetailsInner.requestedFormat) &&
        Objects.equals(this.projectName, dataRequestDetailsInner.projectName) &&
        Objects.equals(this.projectManagerName, dataRequestDetailsInner.projectManagerName) &&
        Objects.equals(this.projectManagerEmail, dataRequestDetailsInner.projectManagerEmail) &&
        Objects.equals(this.requesterEmail, dataRequestDetailsInner.requesterEmail) &&
        Objects.equals(this.expiryDate, dataRequestDetailsInner.expiryDate) &&
        Objects.equals(this.uniqueLinkId, dataRequestDetailsInner.uniqueLinkId)&&
        Objects.equals(this.additionalProperties, dataRequestDetailsInner.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, datasetId, datasetName, status, requestedDate, reviewedDate, requestedFormat, projectName, projectManagerName, projectManagerEmail, requesterEmail, expiryDate, uniqueLinkId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataRequestDetailsInner {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    requestedDate: ").append(toIndentedString(requestedDate)).append("\n");
    sb.append("    reviewedDate: ").append(toIndentedString(reviewedDate)).append("\n");
    sb.append("    requestedFormat: ").append(toIndentedString(requestedFormat)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectManagerName: ").append(toIndentedString(projectManagerName)).append("\n");
    sb.append("    projectManagerEmail: ").append(toIndentedString(projectManagerEmail)).append("\n");
    sb.append("    requesterEmail: ").append(toIndentedString(requesterEmail)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    uniqueLinkId: ").append(toIndentedString(uniqueLinkId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("datasetId");
    openapiFields.add("datasetName");
    openapiFields.add("status");
    openapiFields.add("requestedDate");
    openapiFields.add("reviewedDate");
    openapiFields.add("requestedFormat");
    openapiFields.add("projectName");
    openapiFields.add("projectManagerName");
    openapiFields.add("projectManagerEmail");
    openapiFields.add("requesterEmail");
    openapiFields.add("expiryDate");
    openapiFields.add("uniqueLinkId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("datasetId");
    openapiRequiredFields.add("datasetName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("requestedDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataRequestDetailsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DataRequestDetailsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataRequestDetailsInner is not found in the empty JSON string", DataRequestDetailsInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataRequestDetailsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if (!jsonObj.get("datasetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetName").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("requestedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedDate").toString()));
      }
      if ((jsonObj.get("requestedFormat") != null && !jsonObj.get("requestedFormat").isJsonNull()) && !jsonObj.get("requestedFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedFormat").toString()));
      }
      if ((jsonObj.get("projectName") != null && !jsonObj.get("projectName").isJsonNull()) && !jsonObj.get("projectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectName").toString()));
      }
      if ((jsonObj.get("projectManagerName") != null && !jsonObj.get("projectManagerName").isJsonNull()) && !jsonObj.get("projectManagerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectManagerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectManagerName").toString()));
      }
      if ((jsonObj.get("projectManagerEmail") != null && !jsonObj.get("projectManagerEmail").isJsonNull()) && !jsonObj.get("projectManagerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectManagerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectManagerEmail").toString()));
      }
      if ((jsonObj.get("requesterEmail") != null && !jsonObj.get("requesterEmail").isJsonNull()) && !jsonObj.get("requesterEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requesterEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requesterEmail").toString()));
      }
      if ((jsonObj.get("expiryDate") != null && !jsonObj.get("expiryDate").isJsonNull()) && !jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
      if ((jsonObj.get("uniqueLinkId") != null && !jsonObj.get("uniqueLinkId").isJsonNull()) && !jsonObj.get("uniqueLinkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueLinkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueLinkId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataRequestDetailsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataRequestDetailsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataRequestDetailsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataRequestDetailsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DataRequestDetailsInner>() {
           @Override
           public void write(JsonWriter out, DataRequestDetailsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataRequestDetailsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DataRequestDetailsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataRequestDetailsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataRequestDetailsInner
  * @throws IOException if the JSON string is invalid with respect to DataRequestDetailsInner
  */
  public static DataRequestDetailsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataRequestDetailsInner.class);
  }

 /**
  * Convert an instance of DataRequestDetailsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

