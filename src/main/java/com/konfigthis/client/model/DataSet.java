/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AccrualPeriodicity;
import com.konfigthis.client.model.BasicDataSetInfo;
import com.konfigthis.client.model.CategoryValue;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.DataFormat;
import com.konfigthis.client.model.DataSetDataSet;
import com.konfigthis.client.model.DataSetDistributionsInner;
import com.konfigthis.client.model.DataSetSampleData;
import com.konfigthis.client.model.DataSetServicesInner;
import com.konfigthis.client.model.DraftStatus;
import com.konfigthis.client.model.Entitlement;
import com.konfigthis.client.model.EntryType;
import com.konfigthis.client.model.Exchange;
import com.konfigthis.client.model.GeospatialExtent;
import com.konfigthis.client.model.ImageRepresentation;
import com.konfigthis.client.model.Licence;
import com.konfigthis.client.model.PublicContact;
import com.konfigthis.client.model.PublishedStatus;
import com.konfigthis.client.model.Resource;
import com.konfigthis.client.model.SpatialCoverage;
import com.konfigthis.client.model.TaxonomyKeywords;
import com.konfigthis.client.model.Topic;
import com.konfigthis.client.model.WorkflowKeywords;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DataSet
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DataSet {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ENTRY_TYPE = "entryType";
  @SerializedName(SERIALIZED_NAME_ENTRY_TYPE)
  private EntryType entryType;

  public static final String SERIALIZED_NAME_EXCHANGE = "exchange";
  @SerializedName(SERIALIZED_NAME_EXCHANGE)
  private Exchange exchange;

  public static final String SERIALIZED_NAME_ALTERNATIVE_TITLES = "alternativeTitles";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_TITLES)
  private List<String> alternativeTitles = null;

  public static final String SERIALIZED_NAME_SCORING_U_R_I = "scoringURI";
  @SerializedName(SERIALIZED_NAME_SCORING_U_R_I)
  private String scoringURI;

  public static final String SERIALIZED_NAME_ENDPOINT_KEY = "endpointKey";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_KEY)
  private String endpointKey;

  public static final String SERIALIZED_NAME_IS_OWNER = "isOwner";
  @SerializedName(SERIALIZED_NAME_IS_OWNER)
  private Boolean isOwner;

  public static final String SERIALIZED_NAME_PUBLISHER = "publisher";
  @SerializedName(SERIALIZED_NAME_PUBLISHER)
  private String publisher;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Double createdAt;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Double published;

  public static final String SERIALIZED_NAME_METADATA_MODIFIED = "metadataModified";
  @SerializedName(SERIALIZED_NAME_METADATA_MODIFIED)
  private Double metadataModified;

  public static final String SERIALIZED_NAME_USED_BY = "usedBy";
  @SerializedName(SERIALIZED_NAME_USED_BY)
  private List<BasicDataSetInfo> usedBy = null;

  public static final String SERIALIZED_NAME_DERIVED_FROM = "derivedFrom";
  @SerializedName(SERIALIZED_NAME_DERIVED_FROM)
  private List<Object> derivedFrom = null;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<Entitlement> entitlements = null;

  public static final String SERIALIZED_NAME_ENTITLEMENTS_BY_IDENTITY = "entitlementsByIdentity";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS_BY_IDENTITY)
  private Map<String, List<Entitlement>> entitlementsByIdentity = null;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DATA_RELIABILITY = "dataReliability";
  @SerializedName(SERIALIZED_NAME_DATA_RELIABILITY)
  private String dataReliability;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_LICENCE = "licence";
  @SerializedName(SERIALIZED_NAME_LICENCE)
  private Licence licence;

  public static final String SERIALIZED_NAME_LANDING_PAGE = "landingPage";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE)
  private String landingPage;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<Resource> resources = null;

  public static final String SERIALIZED_NAME_DATA_FORMATS = "dataFormats";
  @SerializedName(SERIALIZED_NAME_DATA_FORMATS)
  private List<DataFormat> dataFormats = null;

  public static final String SERIALIZED_NAME_PRICING_DESCRIPTION = "pricingDescription";
  @SerializedName(SERIALIZED_NAME_PRICING_DESCRIPTION)
  private String pricingDescription;

  public static final String SERIALIZED_NAME_SPATIAL_COVERAGE = "spatialCoverage";
  @SerializedName(SERIALIZED_NAME_SPATIAL_COVERAGE)
  private SpatialCoverage spatialCoverage;

  public static final String SERIALIZED_NAME_SPATIAL_RESOLUTION = "spatialResolution";
  @SerializedName(SERIALIZED_NAME_SPATIAL_RESOLUTION)
  private Double spatialResolution;

  public static final String SERIALIZED_NAME_GEOSPATIAL_EXTENT = "geospatialExtent";
  @SerializedName(SERIALIZED_NAME_GEOSPATIAL_EXTENT)
  private GeospatialExtent geospatialExtent;

  public static final String SERIALIZED_NAME_TEMPORAL_COVERAGE = "temporalCoverage";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_COVERAGE)
  private String temporalCoverage;

  /**
   * The sampling time period of the data set.
   */
  @JsonAdapter(TemporalResolutionEnum.Adapter.class)
 public enum TemporalResolutionEnum {
    P1Y("P1Y"),
    
    P1M("P1M"),
    
    P1D("P1D"),
    
    PT1H("PT1H"),
    
    PT1M("PT1M"),
    
    PT1S("PT1S");

    private String value;

    TemporalResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemporalResolutionEnum fromValue(String value) {
      for (TemporalResolutionEnum b : TemporalResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemporalResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemporalResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemporalResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemporalResolutionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEMPORAL_RESOLUTION = "temporalResolution";
  @SerializedName(SERIALIZED_NAME_TEMPORAL_RESOLUTION)
  private TemporalResolutionEnum temporalResolution;

  public static final String SERIALIZED_NAME_ACCRUAL_PERIODICITY = "accrualPeriodicity";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_PERIODICITY)
  private AccrualPeriodicity accrualPeriodicity;

  public static final String SERIALIZED_NAME_DISTRIBUTIONS = "distributions";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTIONS)
  private List<DataSetDistributionsInner> distributions = null;

  public static final String SERIALIZED_NAME_ISSUED = "issued";
  @SerializedName(SERIALIZED_NAME_ISSUED)
  private String issued;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private Double modified;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = null;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Topic> topics = null;

  public static final String SERIALIZED_NAME_WORKFLOW_KEYWORDS = "workflowKeywords";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_KEYWORDS)
  private List<WorkflowKeywords> workflowKeywords = null;

  public static final String SERIALIZED_NAME_TAXONOMY_KEYWORDS = "taxonomyKeywords";
  @SerializedName(SERIALIZED_NAME_TAXONOMY_KEYWORDS)
  private List<TaxonomyKeywords> taxonomyKeywords = null;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryValue category;

  /**
   * Whether or not this data set should be displayed in the index.
   */
  @JsonAdapter(VisibilityEnum.Adapter.class)
 public enum VisibilityEnum {
    VISIBLE("visible"),
    
    HIDDEN("hidden");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityEnum visibility;

  public static final String SERIALIZED_NAME_CONCEPTS = "concepts";
  @SerializedName(SERIALIZED_NAME_CONCEPTS)
  private List<String> concepts = null;

  public static final String SERIALIZED_NAME_DATA_SET = "dataSet";
  @SerializedName(SERIALIZED_NAME_DATA_SET)
  private DataSetDataSet dataSet;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<DataSetServicesInner> services = null;

  public static final String SERIALIZED_NAME_SAMPLE_DATA = "sampleData";
  @SerializedName(SERIALIZED_NAME_SAMPLE_DATA)
  private DataSetSampleData sampleData;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ImageRepresentation image;

  public static final String SERIALIZED_NAME_COORDINATE_REFERENCE_SYSTEM_ID = "coordinateReferenceSystemId";
  @SerializedName(SERIALIZED_NAME_COORDINATE_REFERENCE_SYSTEM_ID)
  private String coordinateReferenceSystemId;

  public static final String SERIALIZED_NAME_SPATIAL_REPRESENTATION_TYPE = "spatialRepresentationType";
  @SerializedName(SERIALIZED_NAME_SPATIAL_REPRESENTATION_TYPE)
  private String spatialRepresentationType;

  public static final String SERIALIZED_NAME_LINEAGE = "lineage";
  @SerializedName(SERIALIZED_NAME_LINEAGE)
  private String lineage;

  public static final String SERIALIZED_NAME_FROM_TEMPLATE = "fromTemplate";
  @SerializedName(SERIALIZED_NAME_FROM_TEMPLATE)
  private String fromTemplate;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private List<Contact> contacts = null;

  public static final String SERIALIZED_NAME_METADATA_CONTACT = "metadataContact";
  @SerializedName(SERIALIZED_NAME_METADATA_CONTACT)
  private Contact metadataContact;

  public static final String SERIALIZED_NAME_PUBLIC_CONTACT = "publicContact";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CONTACT)
  private PublicContact publicContact;

  public static final String SERIALIZED_NAME_APPROVAL_FOR_ACCESS_NUMBER = "approvalForAccessNumber";
  @SerializedName(SERIALIZED_NAME_APPROVAL_FOR_ACCESS_NUMBER)
  private Double approvalForAccessNumber;

  /**
   * Approval for access status value
   */
  @JsonAdapter(ApprovalForAccessStatusEnum.Adapter.class)
 public enum ApprovalForAccessStatusEnum {
    AFA_INFORMATION_REQUESTS_ONLY_("AfA (Information Requests only)"),
    
    AFA_PUBLIC_REGISTER_("AfA (Public Register)"),
    
    AFA_PUBLICATION_SCHEME_AND_INFORMATION_FOR_RE_USE_REGISTER_("AfA (Publication Scheme and Information for Re-Use Register)"),
    
    AFA_PUBLICATION_SCHEME_("AfA (Publication Scheme)"),
    
    NOT_AFA_TO_BE_ASSESSESSED_WITH_GUIDANCE_("Not AfA (To be Assessessed with Guidance)"),
    
    NOT_AFA_TO_BE_ASSESSED_("Not AfA (To be Assessed)"),
    
    NOT_APPLICABLE_THIRD_PARTY_DATASET("Not Applicable - Third Party Dataset"),
    
    OPEN_DATA_RISK_ASSESSMENT("Open Data Risk Assessment");

    private String value;

    ApprovalForAccessStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalForAccessStatusEnum fromValue(String value) {
      for (ApprovalForAccessStatusEnum b : ApprovalForAccessStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalForAccessStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalForAccessStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalForAccessStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalForAccessStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL_FOR_ACCESS_STATUS = "approvalForAccessStatus";
  @SerializedName(SERIALIZED_NAME_APPROVAL_FOR_ACCESS_STATUS)
  private ApprovalForAccessStatusEnum approvalForAccessStatus;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_CHARACTER_SET = "characterSet";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SET)
  private String characterSet;

  public static final String SERIALIZED_NAME_HIERARCHY_LEVEL = "hierarchyLevel";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_LEVEL)
  private String hierarchyLevel;

  public static final String SERIALIZED_NAME_METADATA_LANGUAGE = "metadataLanguage";
  @SerializedName(SERIALIZED_NAME_METADATA_LANGUAGE)
  private String metadataLanguage;

  public static final String SERIALIZED_NAME_METADATA_CHARACTER_SET = "metadataCharacterSet";
  @SerializedName(SERIALIZED_NAME_METADATA_CHARACTER_SET)
  private String metadataCharacterSet;

  public static final String SERIALIZED_NAME_METADATA_STANDARD_NAME = "metadataStandardName";
  @SerializedName(SERIALIZED_NAME_METADATA_STANDARD_NAME)
  private String metadataStandardName;

  public static final String SERIALIZED_NAME_METADATA_STANDARD_VERSION = "metadataStandardVersion";
  @SerializedName(SERIALIZED_NAME_METADATA_STANDARD_VERSION)
  private String metadataStandardVersion;

  public static final String SERIALIZED_NAME_DRAFT_STATUS = "draftStatus";
  @SerializedName(SERIALIZED_NAME_DRAFT_STATUS)
  private DraftStatus draftStatus;

  public static final String SERIALIZED_NAME_DRAFT_NOTES = "draftNotes";
  @SerializedName(SERIALIZED_NAME_DRAFT_NOTES)
  private String draftNotes;

  public static final String SERIALIZED_NAME_PUBLISHED_STATUS = "publishedStatus";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_STATUS)
  private PublishedStatus publishedStatus;

  public DataSet() {
  }

  public DataSet tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public DataSet addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * List of tags on this data set.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tags on this data set.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public DataSet summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * Summary of the data set.
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Summary of the data set.")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public DataSet title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title for the data set.
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Title for the data set.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public DataSet description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the data set.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Description of the data set.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DataSet id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of a dataset in the catalog
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "97130f06-6242-463f-bf19-0dd6f5a58cfb", value = "The ID of a dataset in the catalog")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public DataSet entryType(EntryType entryType) {
    
    
    
    
    this.entryType = entryType;
    return this;
  }

   /**
   * Get entryType
   * @return entryType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EntryType getEntryType() {
    return entryType;
  }


  public void setEntryType(EntryType entryType) {
    
    
    
    this.entryType = entryType;
  }


  public DataSet exchange(Exchange exchange) {
    
    
    
    
    this.exchange = exchange;
    return this;
  }

   /**
   * Get exchange
   * @return exchange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Exchange getExchange() {
    return exchange;
  }


  public void setExchange(Exchange exchange) {
    
    
    
    this.exchange = exchange;
  }


  public DataSet alternativeTitles(List<String> alternativeTitles) {
    
    
    
    
    this.alternativeTitles = alternativeTitles;
    return this;
  }

  public DataSet addAlternativeTitlesItem(String alternativeTitlesItem) {
    if (this.alternativeTitles == null) {
      this.alternativeTitles = new ArrayList<>();
    }
    this.alternativeTitles.add(alternativeTitlesItem);
    return this;
  }

   /**
   * Get alternativeTitles
   * @return alternativeTitles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAlternativeTitles() {
    return alternativeTitles;
  }


  public void setAlternativeTitles(List<String> alternativeTitles) {
    
    
    
    this.alternativeTitles = alternativeTitles;
  }


  public DataSet scoringURI(String scoringURI) {
    
    
    
    
    this.scoringURI = scoringURI;
    return this;
  }

   /**
   * Scoring URI of the model.
   * @return scoringURI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Scoring URI of the model.")

  public String getScoringURI() {
    return scoringURI;
  }


  public void setScoringURI(String scoringURI) {
    
    
    
    this.scoringURI = scoringURI;
  }


  public DataSet endpointKey(String endpointKey) {
    
    
    
    
    this.endpointKey = endpointKey;
    return this;
  }

   /**
   * Endpoint key for the model.
   * @return endpointKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Endpoint key for the model.")

  public String getEndpointKey() {
    return endpointKey;
  }


  public void setEndpointKey(String endpointKey) {
    
    
    
    this.endpointKey = endpointKey;
  }


  public DataSet isOwner(Boolean isOwner) {
    
    
    
    
    this.isOwner = isOwner;
    return this;
  }

   /**
   * Whether the current user is the owner of this data set.
   * @return isOwner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the current user is the owner of this data set.")

  public Boolean getIsOwner() {
    return isOwner;
  }


  public void setIsOwner(Boolean isOwner) {
    
    
    
    this.isOwner = isOwner;
  }


  public DataSet publisher(String publisher) {
    
    
    
    
    this.publisher = publisher;
    return this;
  }

   /**
   * The ID of the publisher.
   * @return publisher
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the publisher.")

  public String getPublisher() {
    return publisher;
  }


  public void setPublisher(String publisher) {
    
    
    
    this.publisher = publisher;
  }


  public DataSet createdAt(Double createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

  public DataSet createdAt(Integer createdAt) {
    
    
    
    
    this.createdAt = createdAt.doubleValue();
    return this;
  }

   /**
   * Data set creation timestamp.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Data set creation timestamp.")

  public Double getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Double createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public DataSet published(Double published) {
    
    
    
    
    this.published = published;
    return this;
  }

  public DataSet published(Integer published) {
    
    
    
    
    this.published = published.doubleValue();
    return this;
  }

   /**
   * Data set publication timestamp.
   * @return published
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Data set publication timestamp.")

  public Double getPublished() {
    return published;
  }


  public void setPublished(Double published) {
    
    
    
    this.published = published;
  }


  public DataSet metadataModified(Double metadataModified) {
    
    
    
    
    this.metadataModified = metadataModified;
    return this;
  }

  public DataSet metadataModified(Integer metadataModified) {
    
    
    
    
    this.metadataModified = metadataModified.doubleValue();
    return this;
  }

   /**
   * Metadata last-modification timestmap.
   * @return metadataModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata last-modification timestmap.")

  public Double getMetadataModified() {
    return metadataModified;
  }


  public void setMetadataModified(Double metadataModified) {
    
    
    
    this.metadataModified = metadataModified;
  }


  public DataSet usedBy(List<BasicDataSetInfo> usedBy) {
    
    
    
    
    this.usedBy = usedBy;
    return this;
  }

  public DataSet addUsedByItem(BasicDataSetInfo usedByItem) {
    if (this.usedBy == null) {
      this.usedBy = new ArrayList<>();
    }
    this.usedBy.add(usedByItem);
    return this;
  }

   /**
   * Other data sets using this data set.
   * @return usedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Other data sets using this data set.")

  public List<BasicDataSetInfo> getUsedBy() {
    return usedBy;
  }


  public void setUsedBy(List<BasicDataSetInfo> usedBy) {
    
    
    
    this.usedBy = usedBy;
  }


  public DataSet derivedFrom(List<Object> derivedFrom) {
    
    
    
    
    this.derivedFrom = derivedFrom;
    return this;
  }

  public DataSet addDerivedFromItem(Object derivedFromItem) {
    if (this.derivedFrom == null) {
      this.derivedFrom = new ArrayList<>();
    }
    this.derivedFrom.add(derivedFromItem);
    return this;
  }

   /**
   * Data sets used to generate this data set. When updating a data set, use an array of IDs. When GETting the data set, the return type will be &#x60;BasicDataSetInfo&#x60;. 
   * @return derivedFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Data sets used to generate this data set. When updating a data set, use an array of IDs. When GETting the data set, the return type will be `BasicDataSetInfo`. ")

  public List<Object> getDerivedFrom() {
    return derivedFrom;
  }


  public void setDerivedFrom(List<Object> derivedFrom) {
    
    
    
    this.derivedFrom = derivedFrom;
  }


  public DataSet entitlements(List<Entitlement> entitlements) {
    
    
    
    
    this.entitlements = entitlements;
    return this;
  }

  public DataSet addEntitlementsItem(Entitlement entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

   /**
   * Entitlements for the current user.
   * @return entitlements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entitlements for the current user.")

  public List<Entitlement> getEntitlements() {
    return entitlements;
  }


  public void setEntitlements(List<Entitlement> entitlements) {
    
    
    
    this.entitlements = entitlements;
  }


  public DataSet entitlementsByIdentity(Map<String, List<Entitlement>> entitlementsByIdentity) {
    
    
    
    
    this.entitlementsByIdentity = entitlementsByIdentity;
    return this;
  }

  public DataSet putEntitlementsByIdentityItem(String key, List<Entitlement> entitlementsByIdentityItem) {
    if (this.entitlementsByIdentity == null) {
      this.entitlementsByIdentity = new HashMap<>();
    }
    this.entitlementsByIdentity.put(key, entitlementsByIdentityItem);
    return this;
  }

   /**
   * Array of entitlements by user identity.
   * @return entitlementsByIdentity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of entitlements by user identity.")

  public Map<String, List<Entitlement>> getEntitlementsByIdentity() {
    return entitlementsByIdentity;
  }


  public void setEntitlementsByIdentity(Map<String, List<Entitlement>> entitlementsByIdentity) {
    
    
    
    this.entitlementsByIdentity = entitlementsByIdentity;
  }


  public DataSet creator(String creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

   /**
   * Creator of the data set.
   * @return creator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creator of the data set.")

  public String getCreator() {
    return creator;
  }


  public void setCreator(String creator) {
    
    
    
    this.creator = creator;
  }


  public DataSet dataReliability(String dataReliability) {
    
    
    
    
    this.dataReliability = dataReliability;
    return this;
  }

   /**
   * Free text description about the reliability of this dataset.
   * @return dataReliability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Free text description about the reliability of this dataset.")

  public String getDataReliability() {
    return dataReliability;
  }


  public void setDataReliability(String dataReliability) {
    
    
    
    this.dataReliability = dataReliability;
  }


  public DataSet license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * License of the data set.
   * @return license
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "License of the data set.")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public DataSet licence(Licence licence) {
    
    
    
    
    this.licence = licence;
    return this;
  }

   /**
   * Get licence
   * @return licence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Licence getLicence() {
    return licence;
  }


  public void setLicence(Licence licence) {
    
    
    
    this.licence = licence;
  }


  public DataSet landingPage(String landingPage) {
    
    
    
    
    this.landingPage = landingPage;
    return this;
  }

   /**
   * DEPRECATED. This has been replaced with the resources attribute. Reference URI of the data set.
   * @return landingPage
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DEPRECATED. This has been replaced with the resources attribute. Reference URI of the data set.")

  public String getLandingPage() {
    return landingPage;
  }


  public void setLandingPage(String landingPage) {
    
    
    
    this.landingPage = landingPage;
  }


  public DataSet resources(List<Resource> resources) {
    
    
    
    
    this.resources = resources;
    return this;
  }

  public DataSet addResourcesItem(Resource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Links containing more information on the data set
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Links containing more information on the data set")

  public List<Resource> getResources() {
    return resources;
  }


  public void setResources(List<Resource> resources) {
    
    
    
    this.resources = resources;
  }


  public DataSet dataFormats(List<DataFormat> dataFormats) {
    
    
    
    
    this.dataFormats = dataFormats;
    return this;
  }

  public DataSet addDataFormatsItem(DataFormat dataFormatsItem) {
    if (this.dataFormats == null) {
      this.dataFormats = new ArrayList<>();
    }
    this.dataFormats.add(dataFormatsItem);
    return this;
  }

   /**
   * Format of the data set
   * @return dataFormats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Format of the data set")

  public List<DataFormat> getDataFormats() {
    return dataFormats;
  }


  public void setDataFormats(List<DataFormat> dataFormats) {
    
    
    
    this.dataFormats = dataFormats;
  }


  public DataSet pricingDescription(String pricingDescription) {
    
    
    
    
    this.pricingDescription = pricingDescription;
    return this;
  }

   /**
   * Pricing description of the data set.
   * @return pricingDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pricing description of the data set.")

  public String getPricingDescription() {
    return pricingDescription;
  }


  public void setPricingDescription(String pricingDescription) {
    
    
    
    this.pricingDescription = pricingDescription;
  }


  public DataSet spatialCoverage(SpatialCoverage spatialCoverage) {
    
    
    
    
    this.spatialCoverage = spatialCoverage;
    return this;
  }

   /**
   * Get spatialCoverage
   * @return spatialCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SpatialCoverage getSpatialCoverage() {
    return spatialCoverage;
  }


  public void setSpatialCoverage(SpatialCoverage spatialCoverage) {
    
    
    
    this.spatialCoverage = spatialCoverage;
  }


  public DataSet spatialResolution(Double spatialResolution) {
    
    
    
    
    this.spatialResolution = spatialResolution;
    return this;
  }

  public DataSet spatialResolution(Integer spatialResolution) {
    
    
    
    
    this.spatialResolution = spatialResolution.doubleValue();
    return this;
  }

   /**
   * The resolution of data set in meters.
   * @return spatialResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The resolution of data set in meters.")

  public Double getSpatialResolution() {
    return spatialResolution;
  }


  public void setSpatialResolution(Double spatialResolution) {
    
    
    
    this.spatialResolution = spatialResolution;
  }


  public DataSet geospatialExtent(GeospatialExtent geospatialExtent) {
    
    
    
    
    this.geospatialExtent = geospatialExtent;
    return this;
  }

   /**
   * Get geospatialExtent
   * @return geospatialExtent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GeospatialExtent getGeospatialExtent() {
    return geospatialExtent;
  }


  public void setGeospatialExtent(GeospatialExtent geospatialExtent) {
    
    
    
    this.geospatialExtent = geospatialExtent;
  }


  public DataSet temporalCoverage(String temporalCoverage) {
    
    
    
    
    this.temporalCoverage = temporalCoverage;
    return this;
  }

   /**
   * The time frame this data set covers.
   * @return temporalCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time frame this data set covers.")

  public String getTemporalCoverage() {
    return temporalCoverage;
  }


  public void setTemporalCoverage(String temporalCoverage) {
    
    
    
    this.temporalCoverage = temporalCoverage;
  }


  public DataSet temporalResolution(TemporalResolutionEnum temporalResolution) {
    
    
    
    
    this.temporalResolution = temporalResolution;
    return this;
  }

   /**
   * The sampling time period of the data set.
   * @return temporalResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sampling time period of the data set.")

  public TemporalResolutionEnum getTemporalResolution() {
    return temporalResolution;
  }


  public void setTemporalResolution(TemporalResolutionEnum temporalResolution) {
    
    
    
    this.temporalResolution = temporalResolution;
  }


  public DataSet accrualPeriodicity(AccrualPeriodicity accrualPeriodicity) {
    
    
    
    
    this.accrualPeriodicity = accrualPeriodicity;
    return this;
  }

   /**
   * Get accrualPeriodicity
   * @return accrualPeriodicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AccrualPeriodicity getAccrualPeriodicity() {
    return accrualPeriodicity;
  }


  public void setAccrualPeriodicity(AccrualPeriodicity accrualPeriodicity) {
    
    
    
    this.accrualPeriodicity = accrualPeriodicity;
  }


  public DataSet distributions(List<DataSetDistributionsInner> distributions) {
    
    
    
    
    this.distributions = distributions;
    return this;
  }

  public DataSet addDistributionsItem(DataSetDistributionsInner distributionsItem) {
    if (this.distributions == null) {
      this.distributions = new ArrayList<>();
    }
    this.distributions.add(distributionsItem);
    return this;
  }

   /**
   * Get distributions
   * @return distributions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DataSetDistributionsInner> getDistributions() {
    return distributions;
  }


  public void setDistributions(List<DataSetDistributionsInner> distributions) {
    
    
    
    this.distributions = distributions;
  }


  public DataSet issued(String issued) {
    
    
    
    
    this.issued = issued;
    return this;
  }

   /**
   * The date when the data set was issued.
   * @return issued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date when the data set was issued.")

  public String getIssued() {
    return issued;
  }


  public void setIssued(String issued) {
    
    
    
    this.issued = issued;
  }


  public DataSet modified(Double modified) {
    
    
    
    
    this.modified = modified;
    return this;
  }

  public DataSet modified(Integer modified) {
    
    
    
    
    this.modified = modified.doubleValue();
    return this;
  }

   /**
   * An timestamp of when the data in this dataset was last updated
   * @return modified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An timestamp of when the data in this dataset was last updated")

  public Double getModified() {
    return modified;
  }


  public void setModified(Double modified) {
    
    
    
    this.modified = modified;
  }


  public DataSet keywords(List<String> keywords) {
    
    
    
    
    this.keywords = keywords;
    return this;
  }

  public DataSet addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * List of keywords on this data set. keywords is deprecated - use tags instead
   * @return keywords
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of keywords on this data set. keywords is deprecated - use tags instead")

  public List<String> getKeywords() {
    return keywords;
  }


  public void setKeywords(List<String> keywords) {
    
    
    
    this.keywords = keywords;
  }


  public DataSet topics(List<Topic> topics) {
    
    
    
    
    this.topics = topics;
    return this;
  }

  public DataSet addTopicsItem(Topic topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * List of topics on this data set
   * @return topics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of topics on this data set")

  public List<Topic> getTopics() {
    return topics;
  }


  public void setTopics(List<Topic> topics) {
    
    
    
    this.topics = topics;
  }


  public DataSet workflowKeywords(List<WorkflowKeywords> workflowKeywords) {
    
    
    
    
    this.workflowKeywords = workflowKeywords;
    return this;
  }

  public DataSet addWorkflowKeywordsItem(WorkflowKeywords workflowKeywordsItem) {
    if (this.workflowKeywords == null) {
      this.workflowKeywords = new ArrayList<>();
    }
    this.workflowKeywords.add(workflowKeywordsItem);
    return this;
  }

   /**
   * List of workflow keywords on this data set
   * @return workflowKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of workflow keywords on this data set")

  public List<WorkflowKeywords> getWorkflowKeywords() {
    return workflowKeywords;
  }


  public void setWorkflowKeywords(List<WorkflowKeywords> workflowKeywords) {
    
    
    
    this.workflowKeywords = workflowKeywords;
  }


  public DataSet taxonomyKeywords(List<TaxonomyKeywords> taxonomyKeywords) {
    
    
    
    
    this.taxonomyKeywords = taxonomyKeywords;
    return this;
  }

  public DataSet addTaxonomyKeywordsItem(TaxonomyKeywords taxonomyKeywordsItem) {
    if (this.taxonomyKeywords == null) {
      this.taxonomyKeywords = new ArrayList<>();
    }
    this.taxonomyKeywords.add(taxonomyKeywordsItem);
    return this;
  }

   /**
   * List of keywords based on specific taxonomies
   * @return taxonomyKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of keywords based on specific taxonomies")

  public List<TaxonomyKeywords> getTaxonomyKeywords() {
    return taxonomyKeywords;
  }


  public void setTaxonomyKeywords(List<TaxonomyKeywords> taxonomyKeywords) {
    
    
    
    this.taxonomyKeywords = taxonomyKeywords;
  }


  public DataSet category(CategoryValue category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CategoryValue getCategory() {
    return category;
  }


  public void setCategory(CategoryValue category) {
    
    
    
    this.category = category;
  }


  public DataSet visibility(VisibilityEnum visibility) {
    
    
    
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Whether or not this data set should be displayed in the index.
   * @return visibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not this data set should be displayed in the index.")

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  public void setVisibility(VisibilityEnum visibility) {
    
    
    
    this.visibility = visibility;
  }


  public DataSet concepts(List<String> concepts) {
    
    
    
    
    this.concepts = concepts;
    return this;
  }

  public DataSet addConceptsItem(String conceptsItem) {
    if (this.concepts == null) {
      this.concepts = new ArrayList<>();
    }
    this.concepts.add(conceptsItem);
    return this;
  }

   /**
   * List of concepts on this data set. Check the concepts endpoint to see valid values.
   * @return concepts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of concepts on this data set. Check the concepts endpoint to see valid values.")

  public List<String> getConcepts() {
    return concepts;
  }


  public void setConcepts(List<String> concepts) {
    
    
    
    this.concepts = concepts;
  }


  public DataSet dataSet(DataSetDataSet dataSet) {
    
    
    
    
    this.dataSet = dataSet;
    return this;
  }

   /**
   * Get dataSet
   * @return dataSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataSetDataSet getDataSet() {
    return dataSet;
  }


  public void setDataSet(DataSetDataSet dataSet) {
    
    
    
    this.dataSet = dataSet;
  }


  public DataSet services(List<DataSetServicesInner> services) {
    
    
    
    
    this.services = services;
    return this;
  }

  public DataSet addServicesItem(DataSetServicesInner servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * List of services available on the data set
   * @return services
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of services available on the data set")

  public List<DataSetServicesInner> getServices() {
    return services;
  }


  public void setServices(List<DataSetServicesInner> services) {
    
    
    
    this.services = services;
  }


  public DataSet sampleData(DataSetSampleData sampleData) {
    
    
    
    
    this.sampleData = sampleData;
    return this;
  }

   /**
   * Get sampleData
   * @return sampleData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataSetSampleData getSampleData() {
    return sampleData;
  }


  public void setSampleData(DataSetSampleData sampleData) {
    
    
    
    this.sampleData = sampleData;
  }


  public DataSet image(ImageRepresentation image) {
    
    
    
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageRepresentation getImage() {
    return image;
  }


  public void setImage(ImageRepresentation image) {
    
    
    
    this.image = image;
  }


  public DataSet coordinateReferenceSystemId(String coordinateReferenceSystemId) {
    
    
    
    
    this.coordinateReferenceSystemId = coordinateReferenceSystemId;
    return this;
  }

   /**
   * URL to the specification of the coordinate system used in the data
   * @return coordinateReferenceSystemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to the specification of the coordinate system used in the data")

  public String getCoordinateReferenceSystemId() {
    return coordinateReferenceSystemId;
  }


  public void setCoordinateReferenceSystemId(String coordinateReferenceSystemId) {
    
    
    
    this.coordinateReferenceSystemId = coordinateReferenceSystemId;
  }


  public DataSet spatialRepresentationType(String spatialRepresentationType) {
    
    
    
    
    this.spatialRepresentationType = spatialRepresentationType;
    return this;
  }

   /**
   * Type of the geospatial data
   * @return spatialRepresentationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the geospatial data")

  public String getSpatialRepresentationType() {
    return spatialRepresentationType;
  }


  public void setSpatialRepresentationType(String spatialRepresentationType) {
    
    
    
    this.spatialRepresentationType = spatialRepresentationType;
  }


  public DataSet lineage(String lineage) {
    
    
    
    
    this.lineage = lineage;
    return this;
  }

   /**
   * Information about the creation and quality assurance process of the dataset
   * @return lineage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the creation and quality assurance process of the dataset")

  public String getLineage() {
    return lineage;
  }


  public void setLineage(String lineage) {
    
    
    
    this.lineage = lineage;
  }


  public DataSet fromTemplate(String fromTemplate) {
    
    
    
    
    this.fromTemplate = fromTemplate;
    return this;
  }

   /**
   * Information about which template was used to create the dataset record
   * @return fromTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about which template was used to create the dataset record")

  public String getFromTemplate() {
    return fromTemplate;
  }


  public void setFromTemplate(String fromTemplate) {
    
    
    
    this.fromTemplate = fromTemplate;
  }


  public DataSet contacts(List<Contact> contacts) {
    
    
    
    
    this.contacts = contacts;
    return this;
  }

  public DataSet addContactsItem(Contact contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

   /**
   * List of contacts for this data set
   * @return contacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of contacts for this data set")

  public List<Contact> getContacts() {
    return contacts;
  }


  public void setContacts(List<Contact> contacts) {
    
    
    
    this.contacts = contacts;
  }


  public DataSet metadataContact(Contact metadataContact) {
    
    
    
    
    this.metadataContact = metadataContact;
    return this;
  }

   /**
   * Get metadataContact
   * @return metadataContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Contact getMetadataContact() {
    return metadataContact;
  }


  public void setMetadataContact(Contact metadataContact) {
    
    
    
    this.metadataContact = metadataContact;
  }


  public DataSet publicContact(PublicContact publicContact) {
    
    
    
    
    this.publicContact = publicContact;
    return this;
  }

   /**
   * Get publicContact
   * @return publicContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PublicContact getPublicContact() {
    return publicContact;
  }


  public void setPublicContact(PublicContact publicContact) {
    
    
    
    this.publicContact = publicContact;
  }


  public DataSet approvalForAccessNumber(Double approvalForAccessNumber) {
    
    
    
    
    this.approvalForAccessNumber = approvalForAccessNumber;
    return this;
  }

  public DataSet approvalForAccessNumber(Integer approvalForAccessNumber) {
    
    
    
    
    this.approvalForAccessNumber = approvalForAccessNumber.doubleValue();
    return this;
  }

   /**
   * Approval for access status number
   * @return approvalForAccessNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Approval for access status number")

  public Double getApprovalForAccessNumber() {
    return approvalForAccessNumber;
  }


  public void setApprovalForAccessNumber(Double approvalForAccessNumber) {
    
    
    
    this.approvalForAccessNumber = approvalForAccessNumber;
  }


  public DataSet approvalForAccessStatus(ApprovalForAccessStatusEnum approvalForAccessStatus) {
    
    
    
    
    this.approvalForAccessStatus = approvalForAccessStatus;
    return this;
  }

   /**
   * Approval for access status value
   * @return approvalForAccessStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Approval for access status value")

  public ApprovalForAccessStatusEnum getApprovalForAccessStatus() {
    return approvalForAccessStatus;
  }


  public void setApprovalForAccessStatus(ApprovalForAccessStatusEnum approvalForAccessStatus) {
    
    
    
    this.approvalForAccessStatus = approvalForAccessStatus;
  }


  public DataSet language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * Language used on the data set
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Language used on the data set")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public DataSet characterSet(String characterSet) {
    
    
    
    
    this.characterSet = characterSet;
    return this;
  }

   /**
   * Character set used on the data set
   * @return characterSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Character set used on the data set")

  public String getCharacterSet() {
    return characterSet;
  }


  public void setCharacterSet(String characterSet) {
    
    
    
    this.characterSet = characterSet;
  }


  public DataSet hierarchyLevel(String hierarchyLevel) {
    
    
    
    
    this.hierarchyLevel = hierarchyLevel;
    return this;
  }

   /**
   * Hierarchy level of the data set
   * @return hierarchyLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hierarchy level of the data set")

  public String getHierarchyLevel() {
    return hierarchyLevel;
  }


  public void setHierarchyLevel(String hierarchyLevel) {
    
    
    
    this.hierarchyLevel = hierarchyLevel;
  }


  public DataSet metadataLanguage(String metadataLanguage) {
    
    
    
    
    this.metadataLanguage = metadataLanguage;
    return this;
  }

   /**
   * Language used on the metadata
   * @return metadataLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Language used on the metadata")

  public String getMetadataLanguage() {
    return metadataLanguage;
  }


  public void setMetadataLanguage(String metadataLanguage) {
    
    
    
    this.metadataLanguage = metadataLanguage;
  }


  public DataSet metadataCharacterSet(String metadataCharacterSet) {
    
    
    
    
    this.metadataCharacterSet = metadataCharacterSet;
    return this;
  }

   /**
   * Character set used on the metadata
   * @return metadataCharacterSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Character set used on the metadata")

  public String getMetadataCharacterSet() {
    return metadataCharacterSet;
  }


  public void setMetadataCharacterSet(String metadataCharacterSet) {
    
    
    
    this.metadataCharacterSet = metadataCharacterSet;
  }


  public DataSet metadataStandardName(String metadataStandardName) {
    
    
    
    
    this.metadataStandardName = metadataStandardName;
    return this;
  }

   /**
   * Get metadataStandardName
   * @return metadataStandardName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMetadataStandardName() {
    return metadataStandardName;
  }


  public void setMetadataStandardName(String metadataStandardName) {
    
    
    
    this.metadataStandardName = metadataStandardName;
  }


  public DataSet metadataStandardVersion(String metadataStandardVersion) {
    
    
    
    
    this.metadataStandardVersion = metadataStandardVersion;
    return this;
  }

   /**
   * Get metadataStandardVersion
   * @return metadataStandardVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMetadataStandardVersion() {
    return metadataStandardVersion;
  }


  public void setMetadataStandardVersion(String metadataStandardVersion) {
    
    
    
    this.metadataStandardVersion = metadataStandardVersion;
  }


  public DataSet draftStatus(DraftStatus draftStatus) {
    
    
    
    
    this.draftStatus = draftStatus;
    return this;
  }

   /**
   * Get draftStatus
   * @return draftStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DraftStatus getDraftStatus() {
    return draftStatus;
  }


  public void setDraftStatus(DraftStatus draftStatus) {
    
    
    
    this.draftStatus = draftStatus;
  }


  public DataSet draftNotes(String draftNotes) {
    
    
    
    
    this.draftNotes = draftNotes;
    return this;
  }

   /**
   * Any notes added during review of the data set
   * @return draftNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any notes added during review of the data set")

  public String getDraftNotes() {
    return draftNotes;
  }


  public void setDraftNotes(String draftNotes) {
    
    
    
    this.draftNotes = draftNotes;
  }


  public DataSet publishedStatus(PublishedStatus publishedStatus) {
    
    
    
    
    this.publishedStatus = publishedStatus;
    return this;
  }

   /**
   * Get publishedStatus
   * @return publishedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PublishedStatus getPublishedStatus() {
    return publishedStatus;
  }


  public void setPublishedStatus(PublishedStatus publishedStatus) {
    
    
    
    this.publishedStatus = publishedStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataSet instance itself
   */
  public DataSet putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSet dataSet = (DataSet) o;
    return Objects.equals(this.tags, dataSet.tags) &&
        Objects.equals(this.summary, dataSet.summary) &&
        Objects.equals(this.title, dataSet.title) &&
        Objects.equals(this.description, dataSet.description) &&
        Objects.equals(this.id, dataSet.id) &&
        Objects.equals(this.entryType, dataSet.entryType) &&
        Objects.equals(this.exchange, dataSet.exchange) &&
        Objects.equals(this.alternativeTitles, dataSet.alternativeTitles) &&
        Objects.equals(this.scoringURI, dataSet.scoringURI) &&
        Objects.equals(this.endpointKey, dataSet.endpointKey) &&
        Objects.equals(this.isOwner, dataSet.isOwner) &&
        Objects.equals(this.publisher, dataSet.publisher) &&
        Objects.equals(this.createdAt, dataSet.createdAt) &&
        Objects.equals(this.published, dataSet.published) &&
        Objects.equals(this.metadataModified, dataSet.metadataModified) &&
        Objects.equals(this.usedBy, dataSet.usedBy) &&
        Objects.equals(this.derivedFrom, dataSet.derivedFrom) &&
        Objects.equals(this.entitlements, dataSet.entitlements) &&
        Objects.equals(this.entitlementsByIdentity, dataSet.entitlementsByIdentity) &&
        Objects.equals(this.creator, dataSet.creator) &&
        Objects.equals(this.dataReliability, dataSet.dataReliability) &&
        Objects.equals(this.license, dataSet.license) &&
        Objects.equals(this.licence, dataSet.licence) &&
        Objects.equals(this.landingPage, dataSet.landingPage) &&
        Objects.equals(this.resources, dataSet.resources) &&
        Objects.equals(this.dataFormats, dataSet.dataFormats) &&
        Objects.equals(this.pricingDescription, dataSet.pricingDescription) &&
        Objects.equals(this.spatialCoverage, dataSet.spatialCoverage) &&
        Objects.equals(this.spatialResolution, dataSet.spatialResolution) &&
        Objects.equals(this.geospatialExtent, dataSet.geospatialExtent) &&
        Objects.equals(this.temporalCoverage, dataSet.temporalCoverage) &&
        Objects.equals(this.temporalResolution, dataSet.temporalResolution) &&
        Objects.equals(this.accrualPeriodicity, dataSet.accrualPeriodicity) &&
        Objects.equals(this.distributions, dataSet.distributions) &&
        Objects.equals(this.issued, dataSet.issued) &&
        Objects.equals(this.modified, dataSet.modified) &&
        Objects.equals(this.keywords, dataSet.keywords) &&
        Objects.equals(this.topics, dataSet.topics) &&
        Objects.equals(this.workflowKeywords, dataSet.workflowKeywords) &&
        Objects.equals(this.taxonomyKeywords, dataSet.taxonomyKeywords) &&
        Objects.equals(this.category, dataSet.category) &&
        Objects.equals(this.visibility, dataSet.visibility) &&
        Objects.equals(this.concepts, dataSet.concepts) &&
        Objects.equals(this.dataSet, dataSet.dataSet) &&
        Objects.equals(this.services, dataSet.services) &&
        Objects.equals(this.sampleData, dataSet.sampleData) &&
        Objects.equals(this.image, dataSet.image) &&
        Objects.equals(this.coordinateReferenceSystemId, dataSet.coordinateReferenceSystemId) &&
        Objects.equals(this.spatialRepresentationType, dataSet.spatialRepresentationType) &&
        Objects.equals(this.lineage, dataSet.lineage) &&
        Objects.equals(this.fromTemplate, dataSet.fromTemplate) &&
        Objects.equals(this.contacts, dataSet.contacts) &&
        Objects.equals(this.metadataContact, dataSet.metadataContact) &&
        Objects.equals(this.publicContact, dataSet.publicContact) &&
        Objects.equals(this.approvalForAccessNumber, dataSet.approvalForAccessNumber) &&
        Objects.equals(this.approvalForAccessStatus, dataSet.approvalForAccessStatus) &&
        Objects.equals(this.language, dataSet.language) &&
        Objects.equals(this.characterSet, dataSet.characterSet) &&
        Objects.equals(this.hierarchyLevel, dataSet.hierarchyLevel) &&
        Objects.equals(this.metadataLanguage, dataSet.metadataLanguage) &&
        Objects.equals(this.metadataCharacterSet, dataSet.metadataCharacterSet) &&
        Objects.equals(this.metadataStandardName, dataSet.metadataStandardName) &&
        Objects.equals(this.metadataStandardVersion, dataSet.metadataStandardVersion) &&
        Objects.equals(this.draftStatus, dataSet.draftStatus) &&
        Objects.equals(this.draftNotes, dataSet.draftNotes) &&
        Objects.equals(this.publishedStatus, dataSet.publishedStatus)&&
        Objects.equals(this.additionalProperties, dataSet.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, summary, title, description, id, entryType, exchange, alternativeTitles, scoringURI, endpointKey, isOwner, publisher, createdAt, published, metadataModified, usedBy, derivedFrom, entitlements, entitlementsByIdentity, creator, dataReliability, license, licence, landingPage, resources, dataFormats, pricingDescription, spatialCoverage, spatialResolution, geospatialExtent, temporalCoverage, temporalResolution, accrualPeriodicity, distributions, issued, modified, keywords, topics, workflowKeywords, taxonomyKeywords, category, visibility, concepts, dataSet, services, sampleData, image, coordinateReferenceSystemId, spatialRepresentationType, lineage, fromTemplate, contacts, metadataContact, publicContact, approvalForAccessNumber, approvalForAccessStatus, language, characterSet, hierarchyLevel, metadataLanguage, metadataCharacterSet, metadataStandardName, metadataStandardVersion, draftStatus, draftNotes, publishedStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSet {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    entryType: ").append(toIndentedString(entryType)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    alternativeTitles: ").append(toIndentedString(alternativeTitles)).append("\n");
    sb.append("    scoringURI: ").append(toIndentedString(scoringURI)).append("\n");
    sb.append("    endpointKey: ").append(toIndentedString(endpointKey)).append("\n");
    sb.append("    isOwner: ").append(toIndentedString(isOwner)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    metadataModified: ").append(toIndentedString(metadataModified)).append("\n");
    sb.append("    usedBy: ").append(toIndentedString(usedBy)).append("\n");
    sb.append("    derivedFrom: ").append(toIndentedString(derivedFrom)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    entitlementsByIdentity: ").append(toIndentedString(entitlementsByIdentity)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    dataReliability: ").append(toIndentedString(dataReliability)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    licence: ").append(toIndentedString(licence)).append("\n");
    sb.append("    landingPage: ").append(toIndentedString(landingPage)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    dataFormats: ").append(toIndentedString(dataFormats)).append("\n");
    sb.append("    pricingDescription: ").append(toIndentedString(pricingDescription)).append("\n");
    sb.append("    spatialCoverage: ").append(toIndentedString(spatialCoverage)).append("\n");
    sb.append("    spatialResolution: ").append(toIndentedString(spatialResolution)).append("\n");
    sb.append("    geospatialExtent: ").append(toIndentedString(geospatialExtent)).append("\n");
    sb.append("    temporalCoverage: ").append(toIndentedString(temporalCoverage)).append("\n");
    sb.append("    temporalResolution: ").append(toIndentedString(temporalResolution)).append("\n");
    sb.append("    accrualPeriodicity: ").append(toIndentedString(accrualPeriodicity)).append("\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    issued: ").append(toIndentedString(issued)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    workflowKeywords: ").append(toIndentedString(workflowKeywords)).append("\n");
    sb.append("    taxonomyKeywords: ").append(toIndentedString(taxonomyKeywords)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    concepts: ").append(toIndentedString(concepts)).append("\n");
    sb.append("    dataSet: ").append(toIndentedString(dataSet)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    sampleData: ").append(toIndentedString(sampleData)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    coordinateReferenceSystemId: ").append(toIndentedString(coordinateReferenceSystemId)).append("\n");
    sb.append("    spatialRepresentationType: ").append(toIndentedString(spatialRepresentationType)).append("\n");
    sb.append("    lineage: ").append(toIndentedString(lineage)).append("\n");
    sb.append("    fromTemplate: ").append(toIndentedString(fromTemplate)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    metadataContact: ").append(toIndentedString(metadataContact)).append("\n");
    sb.append("    publicContact: ").append(toIndentedString(publicContact)).append("\n");
    sb.append("    approvalForAccessNumber: ").append(toIndentedString(approvalForAccessNumber)).append("\n");
    sb.append("    approvalForAccessStatus: ").append(toIndentedString(approvalForAccessStatus)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    characterSet: ").append(toIndentedString(characterSet)).append("\n");
    sb.append("    hierarchyLevel: ").append(toIndentedString(hierarchyLevel)).append("\n");
    sb.append("    metadataLanguage: ").append(toIndentedString(metadataLanguage)).append("\n");
    sb.append("    metadataCharacterSet: ").append(toIndentedString(metadataCharacterSet)).append("\n");
    sb.append("    metadataStandardName: ").append(toIndentedString(metadataStandardName)).append("\n");
    sb.append("    metadataStandardVersion: ").append(toIndentedString(metadataStandardVersion)).append("\n");
    sb.append("    draftStatus: ").append(toIndentedString(draftStatus)).append("\n");
    sb.append("    draftNotes: ").append(toIndentedString(draftNotes)).append("\n");
    sb.append("    publishedStatus: ").append(toIndentedString(publishedStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("summary");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("entryType");
    openapiFields.add("exchange");
    openapiFields.add("alternativeTitles");
    openapiFields.add("scoringURI");
    openapiFields.add("endpointKey");
    openapiFields.add("isOwner");
    openapiFields.add("publisher");
    openapiFields.add("createdAt");
    openapiFields.add("published");
    openapiFields.add("metadataModified");
    openapiFields.add("usedBy");
    openapiFields.add("derivedFrom");
    openapiFields.add("entitlements");
    openapiFields.add("entitlementsByIdentity");
    openapiFields.add("creator");
    openapiFields.add("dataReliability");
    openapiFields.add("license");
    openapiFields.add("licence");
    openapiFields.add("landingPage");
    openapiFields.add("resources");
    openapiFields.add("dataFormats");
    openapiFields.add("pricingDescription");
    openapiFields.add("spatialCoverage");
    openapiFields.add("spatialResolution");
    openapiFields.add("geospatialExtent");
    openapiFields.add("temporalCoverage");
    openapiFields.add("temporalResolution");
    openapiFields.add("accrualPeriodicity");
    openapiFields.add("distributions");
    openapiFields.add("issued");
    openapiFields.add("modified");
    openapiFields.add("keywords");
    openapiFields.add("topics");
    openapiFields.add("workflowKeywords");
    openapiFields.add("taxonomyKeywords");
    openapiFields.add("category");
    openapiFields.add("visibility");
    openapiFields.add("concepts");
    openapiFields.add("dataSet");
    openapiFields.add("services");
    openapiFields.add("sampleData");
    openapiFields.add("image");
    openapiFields.add("coordinateReferenceSystemId");
    openapiFields.add("spatialRepresentationType");
    openapiFields.add("lineage");
    openapiFields.add("fromTemplate");
    openapiFields.add("contacts");
    openapiFields.add("metadataContact");
    openapiFields.add("publicContact");
    openapiFields.add("approvalForAccessNumber");
    openapiFields.add("approvalForAccessStatus");
    openapiFields.add("language");
    openapiFields.add("characterSet");
    openapiFields.add("hierarchyLevel");
    openapiFields.add("metadataLanguage");
    openapiFields.add("metadataCharacterSet");
    openapiFields.add("metadataStandardName");
    openapiFields.add("metadataStandardVersion");
    openapiFields.add("draftStatus");
    openapiFields.add("draftNotes");
    openapiFields.add("publishedStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("entryType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataSet
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DataSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSet is not found in the empty JSON string", DataSet.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSet.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternativeTitles") != null && !jsonObj.get("alternativeTitles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeTitles` to be an array in the JSON string but got `%s`", jsonObj.get("alternativeTitles").toString()));
      }
      if ((jsonObj.get("scoringURI") != null && !jsonObj.get("scoringURI").isJsonNull()) && !jsonObj.get("scoringURI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoringURI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoringURI").toString()));
      }
      if ((jsonObj.get("endpointKey") != null && !jsonObj.get("endpointKey").isJsonNull()) && !jsonObj.get("endpointKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointKey").toString()));
      }
      if ((jsonObj.get("publisher") != null && !jsonObj.get("publisher").isJsonNull()) && !jsonObj.get("publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisher").toString()));
      }
      if (jsonObj.get("usedBy") != null && !jsonObj.get("usedBy").isJsonNull()) {
        JsonArray jsonArrayusedBy = jsonObj.getAsJsonArray("usedBy");
        if (jsonArrayusedBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usedBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usedBy` to be an array in the JSON string but got `%s`", jsonObj.get("usedBy").toString()));
          }

          // validate the optional field `usedBy` (array)
          for (int i = 0; i < jsonArrayusedBy.size(); i++) {
            BasicDataSetInfo.validateJsonObject(jsonArrayusedBy.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("derivedFrom") != null && !jsonObj.get("derivedFrom").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `derivedFrom` to be an array in the JSON string but got `%s`", jsonObj.get("derivedFrom").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("dataReliability") != null && !jsonObj.get("dataReliability").isJsonNull()) && !jsonObj.get("dataReliability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataReliability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataReliability").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // validate the optional field `licence`
      if (jsonObj.get("licence") != null && !jsonObj.get("licence").isJsonNull()) {
        Licence.validateJsonObject(jsonObj.getAsJsonObject("licence"));
      }
      if ((jsonObj.get("landingPage") != null && !jsonObj.get("landingPage").isJsonNull()) && !jsonObj.get("landingPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landingPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landingPage").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            Resource.validateJsonObject(jsonArrayresources.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dataFormats") != null && !jsonObj.get("dataFormats").isJsonNull()) {
        JsonArray jsonArraydataFormats = jsonObj.getAsJsonArray("dataFormats");
        if (jsonArraydataFormats != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataFormats").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataFormats` to be an array in the JSON string but got `%s`", jsonObj.get("dataFormats").toString()));
          }

          // validate the optional field `dataFormats` (array)
          for (int i = 0; i < jsonArraydataFormats.size(); i++) {
            DataFormat.validateJsonObject(jsonArraydataFormats.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("pricingDescription") != null && !jsonObj.get("pricingDescription").isJsonNull()) && !jsonObj.get("pricingDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingDescription").toString()));
      }
      // validate the optional field `geospatialExtent`
      if (jsonObj.get("geospatialExtent") != null && !jsonObj.get("geospatialExtent").isJsonNull()) {
        GeospatialExtent.validateJsonObject(jsonObj.getAsJsonObject("geospatialExtent"));
      }
      if ((jsonObj.get("temporalCoverage") != null && !jsonObj.get("temporalCoverage").isJsonNull()) && !jsonObj.get("temporalCoverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporalCoverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporalCoverage").toString()));
      }
      if ((jsonObj.get("temporalResolution") != null && !jsonObj.get("temporalResolution").isJsonNull()) && !jsonObj.get("temporalResolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporalResolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporalResolution").toString()));
      }
      if (jsonObj.get("distributions") != null && !jsonObj.get("distributions").isJsonNull()) {
        JsonArray jsonArraydistributions = jsonObj.getAsJsonArray("distributions");
        if (jsonArraydistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distributions` to be an array in the JSON string but got `%s`", jsonObj.get("distributions").toString()));
          }

          // validate the optional field `distributions` (array)
          for (int i = 0; i < jsonArraydistributions.size(); i++) {
            DataSetDistributionsInner.validateJsonObject(jsonArraydistributions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("issued") != null && !jsonObj.get("issued").isJsonNull()) && !jsonObj.get("issued").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issued` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issued").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workflowKeywords") != null && !jsonObj.get("workflowKeywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflowKeywords` to be an array in the JSON string but got `%s`", jsonObj.get("workflowKeywords").toString()));
      }
      if (jsonObj.get("taxonomyKeywords") != null && !jsonObj.get("taxonomyKeywords").isJsonNull()) {
        JsonArray jsonArraytaxonomyKeywords = jsonObj.getAsJsonArray("taxonomyKeywords");
        if (jsonArraytaxonomyKeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxonomyKeywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxonomyKeywords` to be an array in the JSON string but got `%s`", jsonObj.get("taxonomyKeywords").toString()));
          }

          // validate the optional field `taxonomyKeywords` (array)
          for (int i = 0; i < jsonArraytaxonomyKeywords.size(); i++) {
            TaxonomyKeywords.validateJsonObject(jsonArraytaxonomyKeywords.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("concepts") != null && !jsonObj.get("concepts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `concepts` to be an array in the JSON string but got `%s`", jsonObj.get("concepts").toString()));
      }
      // validate the optional field `dataSet`
      if (jsonObj.get("dataSet") != null && !jsonObj.get("dataSet").isJsonNull()) {
        DataSetDataSet.validateJsonObject(jsonObj.getAsJsonObject("dataSet"));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            DataSetServicesInner.validateJsonObject(jsonArrayservices.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `sampleData`
      if (jsonObj.get("sampleData") != null && !jsonObj.get("sampleData").isJsonNull()) {
        DataSetSampleData.validateJsonObject(jsonObj.getAsJsonObject("sampleData"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ImageRepresentation.validateJsonObject(jsonObj.getAsJsonObject("image"));
      }
      if ((jsonObj.get("coordinateReferenceSystemId") != null && !jsonObj.get("coordinateReferenceSystemId").isJsonNull()) && !jsonObj.get("coordinateReferenceSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinateReferenceSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinateReferenceSystemId").toString()));
      }
      if ((jsonObj.get("spatialRepresentationType") != null && !jsonObj.get("spatialRepresentationType").isJsonNull()) && !jsonObj.get("spatialRepresentationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spatialRepresentationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spatialRepresentationType").toString()));
      }
      if ((jsonObj.get("lineage") != null && !jsonObj.get("lineage").isJsonNull()) && !jsonObj.get("lineage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lineage").toString()));
      }
      if ((jsonObj.get("fromTemplate") != null && !jsonObj.get("fromTemplate").isJsonNull()) && !jsonObj.get("fromTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromTemplate").toString()));
      }
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
        if (jsonArraycontacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contacts` to be an array in the JSON string but got `%s`", jsonObj.get("contacts").toString()));
          }

          // validate the optional field `contacts` (array)
          for (int i = 0; i < jsonArraycontacts.size(); i++) {
            Contact.validateJsonObject(jsonArraycontacts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `metadataContact`
      if (jsonObj.get("metadataContact") != null && !jsonObj.get("metadataContact").isJsonNull()) {
        Contact.validateJsonObject(jsonObj.getAsJsonObject("metadataContact"));
      }
      // validate the optional field `publicContact`
      if (jsonObj.get("publicContact") != null && !jsonObj.get("publicContact").isJsonNull()) {
        PublicContact.validateJsonObject(jsonObj.getAsJsonObject("publicContact"));
      }
      if ((jsonObj.get("approvalForAccessStatus") != null && !jsonObj.get("approvalForAccessStatus").isJsonNull()) && !jsonObj.get("approvalForAccessStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalForAccessStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalForAccessStatus").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("characterSet") != null && !jsonObj.get("characterSet").isJsonNull()) && !jsonObj.get("characterSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterSet").toString()));
      }
      if ((jsonObj.get("hierarchyLevel") != null && !jsonObj.get("hierarchyLevel").isJsonNull()) && !jsonObj.get("hierarchyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hierarchyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hierarchyLevel").toString()));
      }
      if ((jsonObj.get("metadataLanguage") != null && !jsonObj.get("metadataLanguage").isJsonNull()) && !jsonObj.get("metadataLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataLanguage").toString()));
      }
      if ((jsonObj.get("metadataCharacterSet") != null && !jsonObj.get("metadataCharacterSet").isJsonNull()) && !jsonObj.get("metadataCharacterSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataCharacterSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataCharacterSet").toString()));
      }
      if ((jsonObj.get("metadataStandardName") != null && !jsonObj.get("metadataStandardName").isJsonNull()) && !jsonObj.get("metadataStandardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataStandardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataStandardName").toString()));
      }
      if ((jsonObj.get("metadataStandardVersion") != null && !jsonObj.get("metadataStandardVersion").isJsonNull()) && !jsonObj.get("metadataStandardVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataStandardVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataStandardVersion").toString()));
      }
      if ((jsonObj.get("draftNotes") != null && !jsonObj.get("draftNotes").isJsonNull()) && !jsonObj.get("draftNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draftNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draftNotes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSet.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSet>() {
           @Override
           public void write(JsonWriter out, DataSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSet read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DataSet instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataSet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataSet
  * @throws IOException if the JSON string is invalid with respect to DataSet
  */
  public static DataSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSet.class);
  }

 /**
  * Convert an instance of DataSet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

