/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AccessRequestCreateNewRequestRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccessRequestCreateNewRequestRequest {
  public static final String SERIALIZED_NAME_DATA_SET_ID = "dataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private UUID dataSetId;

  public static final String SERIALIZED_NAME_REQUESTING_ENTITY_ID = "requestingEntityId";
  @SerializedName(SERIALIZED_NAME_REQUESTING_ENTITY_ID)
  private String requestingEntityId;

  public static final String SERIALIZED_NAME_REQUESTER_NAME = "requesterName";
  @SerializedName(SERIALIZED_NAME_REQUESTER_NAME)
  private String requesterName;

  public static final String SERIALIZED_NAME_REQUESTER_EMAIL = "requesterEmail";
  @SerializedName(SERIALIZED_NAME_REQUESTER_EMAIL)
  private String requesterEmail;

  public static final String SERIALIZED_NAME_REQUEST_MESSAGE = "requestMessage";
  @SerializedName(SERIALIZED_NAME_REQUEST_MESSAGE)
  private String requestMessage;

  public AccessRequestCreateNewRequestRequest() {
  }

  public AccessRequestCreateNewRequestRequest dataSetId(UUID dataSetId) {
    
    
    
    
    this.dataSetId = dataSetId;
    return this;
  }

   /**
   * The ID of a dataset in the catalog
   * @return dataSetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "97130f06-6242-463f-bf19-0dd6f5a58cfb", required = true, value = "The ID of a dataset in the catalog")

  public UUID getDataSetId() {
    return dataSetId;
  }


  public void setDataSetId(UUID dataSetId) {
    
    
    
    this.dataSetId = dataSetId;
  }


  public AccessRequestCreateNewRequestRequest requestingEntityId(String requestingEntityId) {
    
    
    
    
    this.requestingEntityId = requestingEntityId;
    return this;
  }

   /**
   * ID for the entity which is requesting access.
   * @return requestingEntityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID for the entity which is requesting access.")

  public String getRequestingEntityId() {
    return requestingEntityId;
  }


  public void setRequestingEntityId(String requestingEntityId) {
    
    
    
    this.requestingEntityId = requestingEntityId;
  }


  public AccessRequestCreateNewRequestRequest requesterName(String requesterName) {
    
    
    
    
    this.requesterName = requesterName;
    return this;
  }

   /**
   * Name of the user who requested access.
   * @return requesterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the user who requested access.")

  public String getRequesterName() {
    return requesterName;
  }


  public void setRequesterName(String requesterName) {
    
    
    
    this.requesterName = requesterName;
  }


  public AccessRequestCreateNewRequestRequest requesterEmail(String requesterEmail) {
    
    
    
    
    this.requesterEmail = requesterEmail;
    return this;
  }

   /**
   * Contact email address for the user who requested access.
   * @return requesterEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contact email address for the user who requested access.")

  public String getRequesterEmail() {
    return requesterEmail;
  }


  public void setRequesterEmail(String requesterEmail) {
    
    
    
    this.requesterEmail = requesterEmail;
  }


  public AccessRequestCreateNewRequestRequest requestMessage(String requestMessage) {
    
    
    
    
    this.requestMessage = requestMessage;
    return this;
  }

   /**
   * Free text message provided by the user when requesting access.
   * @return requestMessage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Free text message provided by the user when requesting access.")

  public String getRequestMessage() {
    return requestMessage;
  }


  public void setRequestMessage(String requestMessage) {
    
    
    
    this.requestMessage = requestMessage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccessRequestCreateNewRequestRequest instance itself
   */
  public AccessRequestCreateNewRequestRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessRequestCreateNewRequestRequest accessRequestCreateNewRequestRequest = (AccessRequestCreateNewRequestRequest) o;
    return Objects.equals(this.dataSetId, accessRequestCreateNewRequestRequest.dataSetId) &&
        Objects.equals(this.requestingEntityId, accessRequestCreateNewRequestRequest.requestingEntityId) &&
        Objects.equals(this.requesterName, accessRequestCreateNewRequestRequest.requesterName) &&
        Objects.equals(this.requesterEmail, accessRequestCreateNewRequestRequest.requesterEmail) &&
        Objects.equals(this.requestMessage, accessRequestCreateNewRequestRequest.requestMessage)&&
        Objects.equals(this.additionalProperties, accessRequestCreateNewRequestRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetId, requestingEntityId, requesterName, requesterEmail, requestMessage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessRequestCreateNewRequestRequest {\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    requestingEntityId: ").append(toIndentedString(requestingEntityId)).append("\n");
    sb.append("    requesterName: ").append(toIndentedString(requesterName)).append("\n");
    sb.append("    requesterEmail: ").append(toIndentedString(requesterEmail)).append("\n");
    sb.append("    requestMessage: ").append(toIndentedString(requestMessage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetId");
    openapiFields.add("requestingEntityId");
    openapiFields.add("requesterName");
    openapiFields.add("requesterEmail");
    openapiFields.add("requestMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSetId");
    openapiRequiredFields.add("requestingEntityId");
    openapiRequiredFields.add("requestMessage");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccessRequestCreateNewRequestRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccessRequestCreateNewRequestRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessRequestCreateNewRequestRequest is not found in the empty JSON string", AccessRequestCreateNewRequestRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessRequestCreateNewRequestRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("dataSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetId").toString()));
      }
      if (!jsonObj.get("requestingEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestingEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestingEntityId").toString()));
      }
      if ((jsonObj.get("requesterName") != null && !jsonObj.get("requesterName").isJsonNull()) && !jsonObj.get("requesterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requesterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requesterName").toString()));
      }
      if ((jsonObj.get("requesterEmail") != null && !jsonObj.get("requesterEmail").isJsonNull()) && !jsonObj.get("requesterEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requesterEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requesterEmail").toString()));
      }
      if (!jsonObj.get("requestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessRequestCreateNewRequestRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessRequestCreateNewRequestRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessRequestCreateNewRequestRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessRequestCreateNewRequestRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessRequestCreateNewRequestRequest>() {
           @Override
           public void write(JsonWriter out, AccessRequestCreateNewRequestRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessRequestCreateNewRequestRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccessRequestCreateNewRequestRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessRequestCreateNewRequestRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessRequestCreateNewRequestRequest
  * @throws IOException if the JSON string is invalid with respect to AccessRequestCreateNewRequestRequest
  */
  public static AccessRequestCreateNewRequestRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessRequestCreateNewRequestRequest.class);
  }

 /**
  * Convert an instance of AccessRequestCreateNewRequestRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

