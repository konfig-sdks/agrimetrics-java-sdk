/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Billable;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ServiceDefinitionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ServiceDefinitionResponse {
  public static final String SERIALIZED_NAME_LAYER_ID = "layerId";
  @SerializedName(SERIALIZED_NAME_LAYER_ID)
  private String layerId;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_LAYER_NAME = "layerName";
  @SerializedName(SERIALIZED_NAME_LAYER_NAME)
  private String layerName;

  /**
   * Gets or Sets service
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
 public enum ServiceEnum {
    WCS("WCS"),
    
    WFS("WFS");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(String value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;

  public static final String SERIALIZED_NAME_TEMPORAL = "temporal";
  @SerializedName(SERIALIZED_NAME_TEMPORAL)
  private Boolean temporal;

  public static final String SERIALIZED_NAME_DATASTORE = "datastore";
  @SerializedName(SERIALIZED_NAME_DATASTORE)
  private String datastore;

  public static final String SERIALIZED_NAME_GEOSERVER_HOST_NAME = "geoserverHostName";
  @SerializedName(SERIALIZED_NAME_GEOSERVER_HOST_NAME)
  private String geoserverHostName;

  public static final String SERIALIZED_NAME_GEOMETRY_FIELD = "geometryField";
  @SerializedName(SERIALIZED_NAME_GEOMETRY_FIELD)
  private String geometryField;

  public static final String SERIALIZED_NAME_BILLABLE = "billable";
  @SerializedName(SERIALIZED_NAME_BILLABLE)
  private Billable billable;

  public static final String SERIALIZED_NAME_DEFAULT_E_P_S_G_CODE = "defaultEPSGCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_E_P_S_G_CODE)
  private Double defaultEPSGCode;

  /**
   * Gets or Sets WMS
   */
  @JsonAdapter(WMSEnum.Adapter.class)
 public enum WMSEnum {
    Y("Y"),
    
    N("N");

    private String value;

    WMSEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WMSEnum fromValue(String value) {
      for (WMSEnum b : WMSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WMSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WMSEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WMSEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WMSEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_W_M_S = "WMS";
  @SerializedName(SERIALIZED_NAME_W_M_S)
  private WMSEnum WMS;

  /**
   * Gets or Sets WMTS
   */
  @JsonAdapter(WMTSEnum.Adapter.class)
 public enum WMTSEnum {
    Y("Y"),
    
    N("N");

    private String value;

    WMTSEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WMTSEnum fromValue(String value) {
      for (WMTSEnum b : WMTSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WMTSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WMTSEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WMTSEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WMTSEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_W_M_T_S = "WMTS";
  @SerializedName(SERIALIZED_NAME_W_M_T_S)
  private WMTSEnum WMTS;

  /**
   * Gets or Sets WFS
   */
  @JsonAdapter(WFSEnum.Adapter.class)
 public enum WFSEnum {
    Y("Y"),
    
    N("N");

    private String value;

    WFSEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WFSEnum fromValue(String value) {
      for (WFSEnum b : WFSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WFSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WFSEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WFSEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WFSEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_W_F_S = "WFS";
  @SerializedName(SERIALIZED_NAME_W_F_S)
  private WFSEnum WFS;

  /**
   * Gets or Sets WCS
   */
  @JsonAdapter(WCSEnum.Adapter.class)
 public enum WCSEnum {
    Y("Y"),
    
    N("N");

    private String value;

    WCSEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WCSEnum fromValue(String value) {
      for (WCSEnum b : WCSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WCSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WCSEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WCSEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WCSEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_W_C_S = "WCS";
  @SerializedName(SERIALIZED_NAME_W_C_S)
  private WCSEnum WCS;

  /**
   * Gets or Sets ogCApiFeatures
   */
  @JsonAdapter(OgCApiFeaturesEnum.Adapter.class)
 public enum OgCApiFeaturesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    OgCApiFeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OgCApiFeaturesEnum fromValue(String value) {
      for (OgCApiFeaturesEnum b : OgCApiFeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OgCApiFeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OgCApiFeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OgCApiFeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OgCApiFeaturesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OG_C_API_FEATURES = "OGCApiFeatures";
  @SerializedName(SERIALIZED_NAME_OG_C_API_FEATURES)
  private OgCApiFeaturesEnum ogCApiFeatures;

  /**
   * Gets or Sets ogCApiTiles
   */
  @JsonAdapter(OgCApiTilesEnum.Adapter.class)
 public enum OgCApiTilesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    OgCApiTilesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OgCApiTilesEnum fromValue(String value) {
      for (OgCApiTilesEnum b : OgCApiTilesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OgCApiTilesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OgCApiTilesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OgCApiTilesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OgCApiTilesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OG_C_API_TILES = "OGCApiTiles";
  @SerializedName(SERIALIZED_NAME_OG_C_API_TILES)
  private OgCApiTilesEnum ogCApiTiles;

  public ServiceDefinitionResponse() {
  }

  public ServiceDefinitionResponse layerId(String layerId) {
    
    
    
    
    this.layerId = layerId;
    return this;
  }

   /**
   * Get layerId
   * @return layerId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "97130f06-6242-463f-bf19-0dd6f5a58cfb", required = true, value = "")

  public String getLayerId() {
    return layerId;
  }


  public void setLayerId(String layerId) {
    
    
    
    this.layerId = layerId;
  }


  public ServiceDefinitionResponse datasetId(String datasetId) {
    
    
    
    
    this.datasetId = datasetId;
    return this;
  }

   /**
   * Get datasetId
   * @return datasetId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "a420450f-ef42-4fc9-a137-69456bdad016", required = true, value = "")

  public String getDatasetId() {
    return datasetId;
  }


  public void setDatasetId(String datasetId) {
    
    
    
    this.datasetId = datasetId;
  }


  public ServiceDefinitionResponse layerName(String layerName) {
    
    
    
    
    this.layerName = layerName;
    return this;
  }

   /**
   * Get layerName
   * @return layerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Geospatial Layer", required = true, value = "")

  public String getLayerName() {
    return layerName;
  }


  public void setLayerName(String layerName) {
    
    
    
    this.layerName = layerName;
  }


  public ServiceDefinitionResponse service(ServiceEnum service) {
    
    
    
    
    this.service = service;
    return this;
  }

   /**
   * Get service
   * @return service
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ServiceEnum getService() {
    return service;
  }


  public void setService(ServiceEnum service) {
    
    
    
    this.service = service;
  }


  public ServiceDefinitionResponse temporal(Boolean temporal) {
    
    
    
    
    this.temporal = temporal;
    return this;
  }

   /**
   * Get temporal
   * @return temporal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getTemporal() {
    return temporal;
  }


  public void setTemporal(Boolean temporal) {
    
    
    
    this.temporal = temporal;
  }


  public ServiceDefinitionResponse datastore(String datastore) {
    
    
    
    
    this.datastore = datastore;
    return this;
  }

   /**
   * Get datastore
   * @return datastore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Datastore Name", value = "")

  public String getDatastore() {
    return datastore;
  }


  public void setDatastore(String datastore) {
    
    
    
    this.datastore = datastore;
  }


  public ServiceDefinitionResponse geoserverHostName(String geoserverHostName) {
    
    
    
    
    this.geoserverHostName = geoserverHostName;
    return this;
  }

   /**
   * Get geoserverHostName
   * @return geoserverHostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "geoserver-test.agrimetrics.co.uk", value = "")

  public String getGeoserverHostName() {
    return geoserverHostName;
  }


  public void setGeoserverHostName(String geoserverHostName) {
    
    
    
    this.geoserverHostName = geoserverHostName;
  }


  public ServiceDefinitionResponse geometryField(String geometryField) {
    
    
    
    
    this.geometryField = geometryField;
    return this;
  }

   /**
   * Get geometryField
   * @return geometryField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "geom", value = "")

  public String getGeometryField() {
    return geometryField;
  }


  public void setGeometryField(String geometryField) {
    
    
    
    this.geometryField = geometryField;
  }


  public ServiceDefinitionResponse billable(Billable billable) {
    
    
    
    
    this.billable = billable;
    return this;
  }

   /**
   * Get billable
   * @return billable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Billable getBillable() {
    return billable;
  }


  public void setBillable(Billable billable) {
    
    
    
    this.billable = billable;
  }


  public ServiceDefinitionResponse defaultEPSGCode(Double defaultEPSGCode) {
    
    
    
    
    this.defaultEPSGCode = defaultEPSGCode;
    return this;
  }

  public ServiceDefinitionResponse defaultEPSGCode(Integer defaultEPSGCode) {
    
    
    
    
    this.defaultEPSGCode = defaultEPSGCode.doubleValue();
    return this;
  }

   /**
   * Get defaultEPSGCode
   * @return defaultEPSGCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4326", value = "")

  public Double getDefaultEPSGCode() {
    return defaultEPSGCode;
  }


  public void setDefaultEPSGCode(Double defaultEPSGCode) {
    
    
    
    this.defaultEPSGCode = defaultEPSGCode;
  }


  public ServiceDefinitionResponse WMS(WMSEnum WMS) {
    
    
    
    
    this.WMS = WMS;
    return this;
  }

   /**
   * Get WMS
   * @return WMS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WMSEnum getWMS() {
    return WMS;
  }


  public void setWMS(WMSEnum WMS) {
    
    
    
    this.WMS = WMS;
  }


  public ServiceDefinitionResponse WMTS(WMTSEnum WMTS) {
    
    
    
    
    this.WMTS = WMTS;
    return this;
  }

   /**
   * Get WMTS
   * @return WMTS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WMTSEnum getWMTS() {
    return WMTS;
  }


  public void setWMTS(WMTSEnum WMTS) {
    
    
    
    this.WMTS = WMTS;
  }


  public ServiceDefinitionResponse WFS(WFSEnum WFS) {
    
    
    
    
    this.WFS = WFS;
    return this;
  }

   /**
   * Get WFS
   * @return WFS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WFSEnum getWFS() {
    return WFS;
  }


  public void setWFS(WFSEnum WFS) {
    
    
    
    this.WFS = WFS;
  }


  public ServiceDefinitionResponse WCS(WCSEnum WCS) {
    
    
    
    
    this.WCS = WCS;
    return this;
  }

   /**
   * Get WCS
   * @return WCS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public WCSEnum getWCS() {
    return WCS;
  }


  public void setWCS(WCSEnum WCS) {
    
    
    
    this.WCS = WCS;
  }


  public ServiceDefinitionResponse ogCApiFeatures(OgCApiFeaturesEnum ogCApiFeatures) {
    
    
    
    
    this.ogCApiFeatures = ogCApiFeatures;
    return this;
  }

   /**
   * Get ogCApiFeatures
   * @return ogCApiFeatures
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OgCApiFeaturesEnum getOgCApiFeatures() {
    return ogCApiFeatures;
  }


  public void setOgCApiFeatures(OgCApiFeaturesEnum ogCApiFeatures) {
    
    
    
    this.ogCApiFeatures = ogCApiFeatures;
  }


  public ServiceDefinitionResponse ogCApiTiles(OgCApiTilesEnum ogCApiTiles) {
    
    
    
    
    this.ogCApiTiles = ogCApiTiles;
    return this;
  }

   /**
   * Get ogCApiTiles
   * @return ogCApiTiles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OgCApiTilesEnum getOgCApiTiles() {
    return ogCApiTiles;
  }


  public void setOgCApiTiles(OgCApiTilesEnum ogCApiTiles) {
    
    
    
    this.ogCApiTiles = ogCApiTiles;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ServiceDefinitionResponse instance itself
   */
  public ServiceDefinitionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDefinitionResponse serviceDefinitionResponse = (ServiceDefinitionResponse) o;
    return Objects.equals(this.layerId, serviceDefinitionResponse.layerId) &&
        Objects.equals(this.datasetId, serviceDefinitionResponse.datasetId) &&
        Objects.equals(this.layerName, serviceDefinitionResponse.layerName) &&
        Objects.equals(this.service, serviceDefinitionResponse.service) &&
        Objects.equals(this.temporal, serviceDefinitionResponse.temporal) &&
        Objects.equals(this.datastore, serviceDefinitionResponse.datastore) &&
        Objects.equals(this.geoserverHostName, serviceDefinitionResponse.geoserverHostName) &&
        Objects.equals(this.geometryField, serviceDefinitionResponse.geometryField) &&
        Objects.equals(this.billable, serviceDefinitionResponse.billable) &&
        Objects.equals(this.defaultEPSGCode, serviceDefinitionResponse.defaultEPSGCode) &&
        Objects.equals(this.WMS, serviceDefinitionResponse.WMS) &&
        Objects.equals(this.WMTS, serviceDefinitionResponse.WMTS) &&
        Objects.equals(this.WFS, serviceDefinitionResponse.WFS) &&
        Objects.equals(this.WCS, serviceDefinitionResponse.WCS) &&
        Objects.equals(this.ogCApiFeatures, serviceDefinitionResponse.ogCApiFeatures) &&
        Objects.equals(this.ogCApiTiles, serviceDefinitionResponse.ogCApiTiles)&&
        Objects.equals(this.additionalProperties, serviceDefinitionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(layerId, datasetId, layerName, service, temporal, datastore, geoserverHostName, geometryField, billable, defaultEPSGCode, WMS, WMTS, WFS, WCS, ogCApiFeatures, ogCApiTiles, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDefinitionResponse {\n");
    sb.append("    layerId: ").append(toIndentedString(layerId)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    layerName: ").append(toIndentedString(layerName)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    temporal: ").append(toIndentedString(temporal)).append("\n");
    sb.append("    datastore: ").append(toIndentedString(datastore)).append("\n");
    sb.append("    geoserverHostName: ").append(toIndentedString(geoserverHostName)).append("\n");
    sb.append("    geometryField: ").append(toIndentedString(geometryField)).append("\n");
    sb.append("    billable: ").append(toIndentedString(billable)).append("\n");
    sb.append("    defaultEPSGCode: ").append(toIndentedString(defaultEPSGCode)).append("\n");
    sb.append("    WMS: ").append(toIndentedString(WMS)).append("\n");
    sb.append("    WMTS: ").append(toIndentedString(WMTS)).append("\n");
    sb.append("    WFS: ").append(toIndentedString(WFS)).append("\n");
    sb.append("    WCS: ").append(toIndentedString(WCS)).append("\n");
    sb.append("    ogCApiFeatures: ").append(toIndentedString(ogCApiFeatures)).append("\n");
    sb.append("    ogCApiTiles: ").append(toIndentedString(ogCApiTiles)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("layerId");
    openapiFields.add("datasetId");
    openapiFields.add("layerName");
    openapiFields.add("service");
    openapiFields.add("temporal");
    openapiFields.add("datastore");
    openapiFields.add("geoserverHostName");
    openapiFields.add("geometryField");
    openapiFields.add("billable");
    openapiFields.add("defaultEPSGCode");
    openapiFields.add("WMS");
    openapiFields.add("WMTS");
    openapiFields.add("WFS");
    openapiFields.add("WCS");
    openapiFields.add("OGCApiFeatures");
    openapiFields.add("OGCApiTiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("layerId");
    openapiRequiredFields.add("datasetId");
    openapiRequiredFields.add("layerName");
    openapiRequiredFields.add("service");
    openapiRequiredFields.add("WMS");
    openapiRequiredFields.add("WMTS");
    openapiRequiredFields.add("WFS");
    openapiRequiredFields.add("WCS");
    openapiRequiredFields.add("OGCApiFeatures");
    openapiRequiredFields.add("OGCApiTiles");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ServiceDefinitionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ServiceDefinitionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceDefinitionResponse is not found in the empty JSON string", ServiceDefinitionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceDefinitionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("layerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerId").toString()));
      }
      if (!jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if (!jsonObj.get("layerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layerName").toString()));
      }
      if (!jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("datastore") != null && !jsonObj.get("datastore").isJsonNull()) && !jsonObj.get("datastore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datastore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datastore").toString()));
      }
      if ((jsonObj.get("geoserverHostName") != null && !jsonObj.get("geoserverHostName").isJsonNull()) && !jsonObj.get("geoserverHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoserverHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoserverHostName").toString()));
      }
      if ((jsonObj.get("geometryField") != null && !jsonObj.get("geometryField").isJsonNull()) && !jsonObj.get("geometryField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geometryField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geometryField").toString()));
      }
      // validate the optional field `billable`
      if (jsonObj.get("billable") != null && !jsonObj.get("billable").isJsonNull()) {
        Billable.validateJsonObject(jsonObj.getAsJsonObject("billable"));
      }
      if (!jsonObj.get("WMS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WMS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WMS").toString()));
      }
      if (!jsonObj.get("WMTS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WMTS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WMTS").toString()));
      }
      if (!jsonObj.get("WFS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WFS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WFS").toString()));
      }
      if (!jsonObj.get("WCS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WCS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WCS").toString()));
      }
      if (!jsonObj.get("OGCApiFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OGCApiFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OGCApiFeatures").toString()));
      }
      if (!jsonObj.get("OGCApiTiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OGCApiTiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OGCApiTiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceDefinitionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceDefinitionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceDefinitionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceDefinitionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceDefinitionResponse>() {
           @Override
           public void write(JsonWriter out, ServiceDefinitionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceDefinitionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ServiceDefinitionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServiceDefinitionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServiceDefinitionResponse
  * @throws IOException if the JSON string is invalid with respect to ServiceDefinitionResponse
  */
  public static ServiceDefinitionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceDefinitionResponse.class);
  }

 /**
  * Convert an instance of ServiceDefinitionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

