/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CostSummary;
import java.io.File;
import com.konfigthis.client.model.GeoJSONPolygon;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.QueryLayerCalculateStatisticsWithinGeometryRequest;
import com.konfigthis.client.model.QueryLayerMetadataResponse;
import com.konfigthis.client.model.Statistics;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryLayerApi
 */
@Disabled
public class QueryLayerApiTest {

    private static QueryLayerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new QueryLayerApi(apiClient);
    }

    /**
     * Calculate query cost
     *
     * Find out the cost of searching a specific geometry within a layer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateCostTest() throws ApiException {
        UUID layerId = null;
        CostSummary response = api.calculateCost(layerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get layer statistics
     *
     * &gt; :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateStatisticsWithinGeometryTest() throws ApiException {
        Object geometry = null;
        UUID layerId = null;
        OffsetDateTime time = null;
        Statistics response = api.calculateStatisticsWithinGeometry(geometry, layerId)
                .time(time)
                .execute();
        // TODO: test validations
    }

    /**
     * Query and download sections of one or more layers
     *
     * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cutShapeBoundaryAndRetrieveTest() throws ApiException {
        List<UUID> layer = null;
        File response = api.cutShapeBoundaryAndRetrieve(layer)
                .execute();
        // TODO: test validations
    }

    /**
     * Get layer metadata
     *
     * Get the metadata for a given layer, including the geospatial extent. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metadataTest() throws ApiException {
        UUID layerId = null;
        QueryLayerMetadataResponse response = api.metadata(layerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Search within layer
     *
     * &gt; :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchGeometryTest() throws ApiException {
        UUID layerId = null;
        File response = api.searchGeometry(layerId)
                .execute();
        // TODO: test validations
    }

}
