/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.ManageLayerAddGeoTiffRequest;
import com.konfigthis.client.model.ManageLayerAddGeoTiffResponse;
import com.konfigthis.client.model.ManageLayerIngestFileRequest;
import com.konfigthis.client.model.ManageLayerSetStyleRequest;
import com.konfigthis.client.model.RestError;
import java.net.URI;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageLayerApi
 */
@Disabled
public class ManageLayerApiTest {

    private static ManageLayerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ManageLayerApi(apiClient);
    }

    /**
     * Add a GeoTIFF to a layer
     *
     * &gt; :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGeoTiffTest() throws ApiException {
        UUID layerId = null;
        String datetime = null;
        File _file = null;
        ManageLayerAddGeoTiffResponse response = api.addGeoTiff(layerId)
                .datetime(datetime)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Auto-generate and set layer style
     *
     * Generate a new style and apply it to the given layer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autoGenerateStyleTest() throws ApiException {
        UUID layerId = null;
        String key = null;
        RestError response = api.autoGenerateStyle(layerId, key)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete layer
     *
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLayerTest() throws ApiException {
        UUID layerId = null;
        api.deleteLayer(layerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the style for a layer, if one has been set
     *
     * Get the SLD style that has been applied to a layer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStyleTest() throws ApiException {
        UUID layerId = null;
        api.getStyle(layerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Ingest a file to a layer
     *
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ingestFileTest() throws ApiException {
        String fileId = null;
        UUID layerId = null;
        String fileName = null;
        String datetime = null;
        api.ingestFile(fileId, layerId)
                .fileName(fileName)
                .datetime(datetime)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a file from a layer
     *
     * &gt; :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFileTest() throws ApiException {
        UUID layerId = null;
        URI fileUri = null;
        String filename = null;
        api.removeFile(layerId)
                .fileUri(fileUri)
                .filename(filename)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete the style from a layer, if one has been set
     *
     * Delete an SLD style that has been applied to a layer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeStyleTest() throws ApiException {
        UUID layerId = null;
        api.removeStyle(layerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set layer style
     *
     * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setStyleTest() throws ApiException {
        UUID layerId = null;
        File _file = null;
        Object response = api.setStyle(layerId)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

}
