/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccrualPeriodicity;
import com.konfigthis.client.model.BasicDataSetInfo;
import com.konfigthis.client.model.BatchIdentityInputEntitlementsInner;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.CategoryValue;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.DataFormat;
import com.konfigthis.client.model.DataSet;
import com.konfigthis.client.model.DataSetDataSet;
import com.konfigthis.client.model.DataSetDistributionsInner;
import com.konfigthis.client.model.DataSetPatch;
import com.konfigthis.client.model.DataSetPatchGeospatialExtent;
import com.konfigthis.client.model.DataSetPatchLicence;
import com.konfigthis.client.model.DataSetPatchMetadataContact;
import com.konfigthis.client.model.DataSetPatchTemporalExtent;
import com.konfigthis.client.model.DataSetSampleData;
import com.konfigthis.client.model.DataSetServicesInner;
import com.konfigthis.client.model.DataSets;
import com.konfigthis.client.model.DatasetCreateFileDatasetResponse;
import com.konfigthis.client.model.DatasetDeleteSingleDataSetResponse;
import com.konfigthis.client.model.DatasetGetEntitlementsResponse;
import com.konfigthis.client.model.DatasetGetFileDatasetIdResponse;
import com.konfigthis.client.model.DatasetGetValidationReport200Response;
import com.konfigthis.client.model.DatasetGetValidationReportResponse;
import com.konfigthis.client.model.DatasetListValidTagsResponse;
import com.konfigthis.client.model.DatasetSetEntitlementsRequest;
import com.konfigthis.client.model.DraftStatus;
import com.konfigthis.client.model.Entitlement;
import com.konfigthis.client.model.EntryType;
import com.konfigthis.client.model.EntryUpdateResponse;
import com.konfigthis.client.model.Exchange;
import java.io.File;
import com.konfigthis.client.model.GeospatialExtent;
import com.konfigthis.client.model.GroupCode;
import com.konfigthis.client.model.ImageRepresentation;
import com.konfigthis.client.model.Licence;
import com.konfigthis.client.model.PublicContact;
import com.konfigthis.client.model.PublishedStatus;
import com.konfigthis.client.model.Relationship;
import com.konfigthis.client.model.Resource;
import com.konfigthis.client.model.SpatialCoverage;
import com.konfigthis.client.model.TaxonomyKeywords;
import com.konfigthis.client.model.Topic;
import java.util.UUID;
import com.konfigthis.client.model.WorkflowKeywords;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatasetApi
 */
@Disabled
public class DatasetApiTest {

    private static DatasetApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DatasetApi(apiClient);
    }

    /**
     * Create and attach file dataset
     *
     * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFileDatasetTest() throws ApiException {
        UUID dataSetId = null;
        DatasetCreateFileDatasetResponse response = api.createFileDataset(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a single data set catalog entry.
     *
     * Creates a single catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSingleCatalogEntryTest() throws ApiException {
        EntryUpdateResponse response = api.createSingleCatalogEntry()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Data Set
     *
     * Delete a single Data Set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSingleDataSetTest() throws ApiException {
        UUID dataSetId = null;
        DatasetDeleteSingleDataSetResponse response = api.deleteSingleDataSet(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Discards the draft changes on a data set catalog entry.
     *
     * Discards the draft changes on a data set catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discardDraftChangesTest() throws ApiException {
        UUID dataSetId = null;
        api.discardDraftChanges(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the draft changes on a data set catalog entry.
     *
     * Get the draft changes on a data set catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDraftChangesTest() throws ApiException {
        UUID dataSetId = null;
        DataSet response = api.getDraftChanges(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the entitlements on a data set.
     *
     * Gets the entitlements on a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntitlementsTest() throws ApiException {
        UUID dataSetId = null;
        DatasetGetEntitlementsResponse response = api.getEntitlements(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get file dataset id from dataset
     *
     * Get file dataset id from dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFileDatasetIdTest() throws ApiException {
        UUID dataSetId = null;
        DatasetGetFileDatasetIdResponse response = api.getFileDatasetId(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNonSpatialDataForGroupTest() throws ApiException {
        GroupCode group = null;
        Object response = api.getNonSpatialDataForGroup(group)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single data set catalog entry.
     *
     * Get a single data set catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleCatalogEntryTest() throws ApiException {
        UUID dataSetId = null;
        DataSet response = api.getSingleCatalogEntry(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the schematron validation report using the data sets validation profile
     *
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationReportTest() throws ApiException {
        UUID dataSetId = null;
        DatasetGetValidationReportResponse response = api.getValidationReport(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the schematron validation report using the data sets validation profile
     *
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationReport_0Test() throws ApiException {
        UUID dataSetId = null;
        DatasetGetValidationReport200Response response = api.getValidationReport_0(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all data sets.
     *
     * List all data sets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllDataSetsTest() throws ApiException {
        List<String> ids = null;
        List<String> creator = null;
        List<String> keywords = null;
        List<String> tags = null;
        Relationship tagRelationship = null;
        List<CategoryValue> category = null;
        List<SpatialCoverage> spatialCoverage = null;
        String text = null;
        String extendedText = null;
        List<String> identities = null;
        Boolean onlyFeatured = null;
        Boolean showEditable = null;
        Boolean showHidden = null;
        Integer pageNum = null;
        Integer pageSize = null;
        Integer offset = null;
        String searchType = null;
        Integer limit = null;
        Boolean legacyConcepts = null;
        String sort = null;
        Exchange exchange = null;
        List<String> metadataStandardName = null;
        List<DraftStatus> draftStatus = null;
        List<Object> publishedStatus = null;
        List<String> licence = null;
        DataSets response = api.listAllDataSets()
                .ids(ids)
                .creator(creator)
                .keywords(keywords)
                .tags(tags)
                .tagRelationship(tagRelationship)
                .category(category)
                .spatialCoverage(spatialCoverage)
                .text(text)
                .extendedText(extendedText)
                .identities(identities)
                .onlyFeatured(onlyFeatured)
                .showEditable(showEditable)
                .showHidden(showHidden)
                .pageNum(pageNum)
                .pageSize(pageSize)
                .offset(offset)
                .searchType(searchType)
                .limit(limit)
                .legacyConcepts(legacyConcepts)
                .sort(sort)
                .exchange(exchange)
                .metadataStandardName(metadataStandardName)
                .draftStatus(draftStatus)
                .publishedStatus(publishedStatus)
                .licence(licence)
                .execute();
        // TODO: test validations
    }

    /**
     * List all the valid categories of datasets.
     *
     * List all the valid categories of datasets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listValidCategoriesTest() throws ApiException {
        List<Category> response = api.listValidCategories()
                .execute();
        // TODO: test validations
    }

    /**
     * List all the valid tags that can be set on a data set.
     *
     * List all the valid tags that can be set on a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listValidTagsTest() throws ApiException {
        DatasetListValidTagsResponse response = api.listValidTags()
                .execute();
        // TODO: test validations
    }

    /**
     * Set the entitlements and on a data set for all identities.
     *
     * Set the entitlements and on a data set for all identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setEntitlementsTest() throws ApiException {
        List<BatchIdentityInputEntitlementsInner> entitlements = null;
        UUID dataSetId = null;
        Object response = api.setEntitlements(entitlements, dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the image for a data set.
     *
     * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setImageTest() throws ApiException {
        UUID dataSetId = null;
        api.setImage(dataSetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a single data set catalog entry.
     *
     * Updates a single catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSingleCatalogEntryTest() throws ApiException {
        UUID dataSetId = null;
        List<String> tags = null;
        String summary = null;
        String title = null;
        String description = null;
        List<String> alternativeTitles = null;
        String scoringURI = null;
        String endpointKey = null;
        List<Object> derivedFrom = null;
        String creator = null;
        String dataReliability = null;
        String license = null;
        DataSetPatchLicence licence = null;
        List<Resource> resources = null;
        List<DataFormat> dataFormats = null;
        String spatialCoverage = null;
        Double spatialResolution = null;
        DataSetPatchGeospatialExtent geospatialExtent = null;
        String temporalCoverage = null;
        DataSetPatchTemporalExtent temporalExtent = null;
        String temporalResolution = null;
        List<Topic> topics = null;
        List<WorkflowKeywords> workflowKeywords = null;
        List<TaxonomyKeywords> taxonomyKeywords = null;
        String accrualPeriodicity = null;
        String issued = null;
        Double createdAt = null;
        Double published = null;
        PublishedStatus publishedStatus = null;
        Double modified = null;
        CategoryValue category = null;
        String visibility = null;
        String pricingDescription = null;
        List<DataSetDistributionsInner> distributions = null;
        Double approvalForAccessNumber = null;
        String approvalForAccessStatus = null;
        List<Contact> contacts = null;
        DataSetPatchMetadataContact metadataContact = null;
        String lineage = null;
        String language = null;
        String characterSet = null;
        String hierarchyLevel = null;
        String metadataLanguage = null;
        String metadataCharacterSet = null;
        String metadataStandardName = null;
        String metadataStandardVersion = null;
        String coordinateReferenceSystemId = null;
        String spatialRepresentationType = null;
        DataSet response = api.updateSingleCatalogEntry(dataSetId)
                .tags(tags)
                .summary(summary)
                .title(title)
                .description(description)
                .alternativeTitles(alternativeTitles)
                .scoringURI(scoringURI)
                .endpointKey(endpointKey)
                .derivedFrom(derivedFrom)
                .creator(creator)
                .dataReliability(dataReliability)
                .license(license)
                .licence(licence)
                .resources(resources)
                .dataFormats(dataFormats)
                .spatialCoverage(spatialCoverage)
                .spatialResolution(spatialResolution)
                .geospatialExtent(geospatialExtent)
                .temporalCoverage(temporalCoverage)
                .temporalExtent(temporalExtent)
                .temporalResolution(temporalResolution)
                .topics(topics)
                .workflowKeywords(workflowKeywords)
                .taxonomyKeywords(taxonomyKeywords)
                .accrualPeriodicity(accrualPeriodicity)
                .issued(issued)
                .createdAt(createdAt)
                .published(published)
                .publishedStatus(publishedStatus)
                .modified(modified)
                .category(category)
                .visibility(visibility)
                .pricingDescription(pricingDescription)
                .distributions(distributions)
                .approvalForAccessNumber(approvalForAccessNumber)
                .approvalForAccessStatus(approvalForAccessStatus)
                .contacts(contacts)
                .metadataContact(metadataContact)
                .lineage(lineage)
                .language(language)
                .characterSet(characterSet)
                .hierarchyLevel(hierarchyLevel)
                .metadataLanguage(metadataLanguage)
                .metadataCharacterSet(metadataCharacterSet)
                .metadataStandardName(metadataStandardName)
                .metadataStandardVersion(metadataStandardVersion)
                .coordinateReferenceSystemId(coordinateReferenceSystemId)
                .spatialRepresentationType(spatialRepresentationType)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a single data set catalog entry.
     *
     * Updates a single catalog entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSingleEntryTest() throws ApiException {
        String title = null;
        String description = null;
        EntryType entryType = null;
        UUID dataSetId = null;
        List<String> tags = null;
        String summary = null;
        UUID id = null;
        Exchange exchange = null;
        List<String> alternativeTitles = null;
        String scoringURI = null;
        String endpointKey = null;
        Boolean isOwner = null;
        String publisher = null;
        Double createdAt = null;
        Double published = null;
        Double metadataModified = null;
        List<BasicDataSetInfo> usedBy = null;
        List<Object> derivedFrom = null;
        List<Entitlement> entitlements = null;
        Map<String, List<Entitlement>> entitlementsByIdentity = null;
        String creator = null;
        String dataReliability = null;
        String license = null;
        Licence licence = null;
        String landingPage = null;
        List<Resource> resources = null;
        List<DataFormat> dataFormats = null;
        String pricingDescription = null;
        SpatialCoverage spatialCoverage = null;
        Double spatialResolution = null;
        GeospatialExtent geospatialExtent = null;
        String temporalCoverage = null;
        String temporalResolution = null;
        AccrualPeriodicity accrualPeriodicity = null;
        List<DataSetDistributionsInner> distributions = null;
        String issued = null;
        Double modified = null;
        List<String> keywords = null;
        List<Topic> topics = null;
        List<WorkflowKeywords> workflowKeywords = null;
        List<TaxonomyKeywords> taxonomyKeywords = null;
        CategoryValue category = null;
        String visibility = null;
        List<String> concepts = null;
        DataSetDataSet dataSet = null;
        List<DataSetServicesInner> services = null;
        DataSetSampleData sampleData = null;
        ImageRepresentation image = null;
        String coordinateReferenceSystemId = null;
        String spatialRepresentationType = null;
        String lineage = null;
        String fromTemplate = null;
        List<Contact> contacts = null;
        Contact metadataContact = null;
        PublicContact publicContact = null;
        Double approvalForAccessNumber = null;
        String approvalForAccessStatus = null;
        String language = null;
        String characterSet = null;
        String hierarchyLevel = null;
        String metadataLanguage = null;
        String metadataCharacterSet = null;
        String metadataStandardName = null;
        String metadataStandardVersion = null;
        DraftStatus draftStatus = null;
        String draftNotes = null;
        PublishedStatus publishedStatus = null;
        DataSet response = api.updateSingleEntry(title, description, entryType, dataSetId)
                .tags(tags)
                .summary(summary)
                .id(id)
                .exchange(exchange)
                .alternativeTitles(alternativeTitles)
                .scoringURI(scoringURI)
                .endpointKey(endpointKey)
                .isOwner(isOwner)
                .publisher(publisher)
                .createdAt(createdAt)
                .published(published)
                .metadataModified(metadataModified)
                .usedBy(usedBy)
                .derivedFrom(derivedFrom)
                .entitlements(entitlements)
                .entitlementsByIdentity(entitlementsByIdentity)
                .creator(creator)
                .dataReliability(dataReliability)
                .license(license)
                .licence(licence)
                .landingPage(landingPage)
                .resources(resources)
                .dataFormats(dataFormats)
                .pricingDescription(pricingDescription)
                .spatialCoverage(spatialCoverage)
                .spatialResolution(spatialResolution)
                .geospatialExtent(geospatialExtent)
                .temporalCoverage(temporalCoverage)
                .temporalResolution(temporalResolution)
                .accrualPeriodicity(accrualPeriodicity)
                .distributions(distributions)
                .issued(issued)
                .modified(modified)
                .keywords(keywords)
                .topics(topics)
                .workflowKeywords(workflowKeywords)
                .taxonomyKeywords(taxonomyKeywords)
                .category(category)
                .visibility(visibility)
                .concepts(concepts)
                .dataSet(dataSet)
                .services(services)
                .sampleData(sampleData)
                .image(image)
                .coordinateReferenceSystemId(coordinateReferenceSystemId)
                .spatialRepresentationType(spatialRepresentationType)
                .lineage(lineage)
                .fromTemplate(fromTemplate)
                .contacts(contacts)
                .metadataContact(metadataContact)
                .publicContact(publicContact)
                .approvalForAccessNumber(approvalForAccessNumber)
                .approvalForAccessStatus(approvalForAccessStatus)
                .language(language)
                .characterSet(characterSet)
                .hierarchyLevel(hierarchyLevel)
                .metadataLanguage(metadataLanguage)
                .metadataCharacterSet(metadataCharacterSet)
                .metadataStandardName(metadataStandardName)
                .metadataStandardVersion(metadataStandardVersion)
                .draftStatus(draftStatus)
                .draftNotes(draftNotes)
                .publishedStatus(publishedStatus)
                .execute();
        // TODO: test validations
    }

}
