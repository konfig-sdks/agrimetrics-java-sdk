/*
 * Catalog API
 * This API lists data sets available on Agrimetrics platform.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OgcapiApi
 */
@Disabled
public class OgcapiApiTest {

    private static OgcapiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OgcapiApi(apiClient);
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresQueryTest() throws ApiException {
        UUID datasetId = null;
        String response = api.featuresQuery(datasetId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresQueryConformanceTest() throws ApiException {
        UUID datasetId = null;
        String response = api.featuresQueryConformance(datasetId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresQueryOgcTest() throws ApiException {
        UUID datasetId = null;
        String collectionId = null;
        String response = api.featuresQueryOgc(datasetId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresQuery_0Test() throws ApiException {
        UUID datasetId = null;
        String collectionId = null;
        String featureId = null;
        String response = api.featuresQuery_0(datasetId, collectionId, featureId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featuresQueryablesTest() throws ApiException {
        UUID datasetId = null;
        String collectionId = null;
        String response = api.featuresQueryables(datasetId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API CSS
     *
     * Get CSS files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStyleForCssFileTest() throws ApiException {
        String cssFile = null;
        api.getStyleForCssFile(cssFile)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features Swagger
     *
     * Get swagger files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSwaggerFileTest() throws ApiException {
        String swaggerFile = null;
        api.getSwaggerFile(swaggerFile)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryFeaturesCollectionTest() throws ApiException {
        UUID datasetId = null;
        String response = api.queryFeaturesCollection(datasetId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryFeaturesCollectionItemsTest() throws ApiException {
        UUID datasetId = null;
        String collectionId = null;
        String response = api.queryFeaturesCollectionItems(datasetId, collectionId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryFeaturesFunctionTest() throws ApiException {
        UUID datasetId = null;
        String response = api.queryFeaturesFunction(datasetId)
                .execute();
        // TODO: test validations
    }

    /**
     * OGC-API-Features query
     *
     * Query the given data set with the OGC-API Featuresinterface standard 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryFeaturesOpenapiTest() throws ApiException {
        UUID datasetId = null;
        String response = api.queryFeaturesOpenapi(datasetId)
                .execute();
        // TODO: test validations
    }

}
